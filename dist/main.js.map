{"version":3,"file":"main.js","mappings":"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","sources":["webpack://javascript-project/./src/piece.js","webpack://javascript-project/./src/pieces/barrack.js","webpack://javascript-project/./src/pieces/base.js","webpack://javascript-project/./src/pieces/treasure.js","webpack://javascript-project/./src/utils.js","webpack://javascript-project/./src/pieces/unit.js","webpack://javascript-project/./src/pieces/units/archer.js","webpack://javascript-project/./src/pieces/units/defender.js","webpack://javascript-project/./src/pieces/units/infantry.js","webpack://javascript-project/./src/board.js","webpack://javascript-project/./src/player.js","webpack://javascript-project/./src/humanPlayer.js","webpack://javascript-project/./src/view.js","webpack://javascript-project/./src/index.js","webpack://javascript-project/./src/game.js"],"sourcesContent":["class Piece {\n    constructor(team, pos, ) {\n        this.team = team;\n        this.pos = pos\n        this.image = new Image();\n    }\n\n    parentType() {\n        return Object.getPrototypeOf(this.constructor).name;\n    }\n\n    type() {\n        return this.constructor.name;\n    }\n}\n\nexport default Piece;","import Piece from \"../piece\";\n\nclass Barrack extends Piece {\n    constructor(team, pos) {\n        super(team, pos);\n        this.image.src = \"./resources/barracks2.png\";\n    }\n}\n\nexport default Barrack;","import Piece from \"../piece\";\n\nclass Base extends Piece {\n    constructor(team, pos) {\n        super(team, pos);\n    }\n}\n\nexport default Base;","import Piece from \"../piece\";\nimport Board from \"../board\";\n\nclass Treasure extends Piece {\n    constructor(team, pos) {\n        super(team, pos);\n        this.team === Board.PLAYER_TEAM ? this.image.src = \"./resources/treasureblue.png\" : this.image.src = \"./resources/treasurered.png\";\n    }\n}\n\nexport default Treasure;","import Board from \"./board\";\n\nexport function isOnBoard(pos) {\n    return pos.x > -1 && pos.x < Board.GRID_WIDTH && pos.y > -1 && pos.y < Board.GRID_HEIGHT;\n}\n\nexport function isButton(pos) {\n    return pos.y > Board.GRID_HEIGHT + 0.25 &&\n        pos.y < Board.GRID_HEIGHT + 0.75 &&\n        pos.x > 4 && pos.x < 5;\n}\n\nexport function willPlayAgain(pos) {\n     return pos.x > Board.GRID_WIDTH / 2 - 0.75 &&\n        pos.x < Board.GRID_WIDTH / 2 + 0.75 &&\n        pos.y > Math.floor((Board.GRID_HEIGHT) / 2) &&\n        pos.y < Math.floor((Board.GRID_HEIGHT) / 2) + 0.5;\n}\n\nexport function isUpgradeButton(squarePos, clickPos) {\n    let x = clickPos.x - squarePos.x;\n    let y = clickPos.y - squarePos.y;\n\n    return x > 0 && x < 0.25 && y > 0 && y < 0.25;\n}\n\nexport function isUpgradeConfirmation(squarePos, clickPos) {\n    let x = clickPos.x - squarePos.x;\n    let y = clickPos.y - squarePos.y;\n    return x > 0 && x < 1 && y > 0 && y < 0.25;\n}\n\nArray.prototype.get = function(pos) {\n    return this[pos.y][pos.x];\n}\n\nArray.prototype.last = function() {\n    return this[this.length - 1];\n}\n\nArray.prototype.first = function() {\n    return this[0];\n}\n\nObject.prototype.equals = function(pos) {\n    return this.x === pos.x && this.y === pos.y;\n}\n\nexport default Array;","import Board from \"../board\";\nimport Piece from \"../piece\";\nimport {isOnBoard} from \"../utils\";\n\nclass Unit extends Piece {\n    constructor(team, pos) {\n        super(team, pos);\n        this.attack = null;\n        this.defense = null;\n        this.pointStandard = null;\n        this.upgrade = null;\n        this.attackDist = 1;\n        this.moves = null;\n        this.attacks = [];\n        this.hasMoved = false;\n        this.hasAttacked = false;\n        this.hasUpgraded = false;\n        this.board = null;\n        this.view = null;\n    }\n\n    resetActions() {\n        this.moves = null;\n        this.attacks = [];\n    }\n\n    upgrades() {\n        this.hasUpgraded = true;\n        this.attack = this.upgrade.attack;\n        this.defense = this.upgrade.defense;\n    }\n\n    downgrade() {\n        this.attack = this.pointStandard.attack;\n        this.defense = Math.min(this.pointStandard.defense, this.defense);\n    }\n\n    getMoves() {\n        this.moves = this.getMovesSet();\n        this.moves.delete(JSON.stringify(this.pos));\n        this.moves = [...this.moves].map(elem => {\n            return JSON.parse(elem);\n        });\n        return this.moves;\n    }\n\n    getMovesSet(validVisited = new Set(), maxDist = 2, pos = this.pos) {\n        if (maxDist === 0) { return validVisited; }\n\n        for (let y=pos.y-1; y <= pos.y + 1; y++) {\n            for (let x=pos.x-1; x <= pos.x + 1; x++) {\n                let newPos = {y: y, x: x};\n                if (isOnBoard(newPos) && !this.hasUnit(newPos)) {\n                    if (!validVisited.has(JSON.stringify(newPos))) {\n                        validVisited.add(JSON.stringify(newPos));\n                    }\n                    validVisited = this.getMovesSet(validVisited, maxDist-1, newPos);\n                }\n            }\n        }\n\n        return validVisited;\n    }\n\n    getAttacks() {\n        for (let y=this.pos.y-this.attackDist; y <= this.pos.y + this.attackDist; y++) {\n            for (let x=this.pos.x-this.attackDist; x <= this.pos.x + this.attackDist; x++) {\n                let newPos = {y: y, x: x};\n                if (isOnBoard(newPos)) {\n                    let square = this.board.grid.get(newPos);\n                    if (this.hasUnit(newPos) && square.last().team !== this.team) {\n                        this.attacks.push(newPos);\n                    }\n                }\n            }\n        }\n        return this.attacks;\n    }\n\n    hasUnit(pos) {\n        let square = this.board.grid.get(pos);\n        if (square.length > 0) {\n            let elemType = square.last().parentType();\n            if (elemType === 'Unit') {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    isUpgradable(currentPlayer) {\n        return this.team === currentPlayer.team &&\n            this.attack === this.pointStandard.attack &&\n            ((this.team === Board.PLAYER_TEAM && this.pos.y < Board.GRID_HEIGHT / 2) ||\n            (this.team === Board.ENEMY_TEAM && this.pos.y >= Board.GRID_HEIGHT / 2));\n    }\n\n    onHomeTerf() {\n        return (this.team === Board.PLAYER_TEAM && this.pos.y >= Board.GRID_HEIGHT / 2) ||\n            (this.team === Board.ENEMY_TEAM && this.pos.y < Board.GRID_HEIGHT / 2);\n    }\n}\n\nexport default Unit;","import Unit from \"../unit\";\n\nclass Archer extends Unit {\n    constructor(team, pos) {\n        super(team, pos);\n        this.attack = 1;\n        this.defense = 1;\n        this.attackDist = 2;\n        this.upgrade = {attack: 2, defense: 2}\n        this.pointStandard = {attack: 1, defense: 1}\n        this.image.src = \"./resources/archer.png\";\n    }\n}\n\nexport default Archer;","import Unit from \"../unit\";\n\nclass Defender extends Unit {\n    constructor(team, pos) {\n        super(team, pos);\n        this.attack = 1;\n        this.defense = 3;\n        //if attack is changed to 1, unit.isUpgradable returns true when unit is already upgraded\n        //because it checks if upgraded using attack points. Need to implement different check\n        //if making upgraded attack points equal to standard attack points\n        this.upgrade = {attack: 2, defense: 5}\n        this.pointStandard = {attack: 1, defense: 3}\n        this.image.src = \"./resources/defender.png\";\n    }\n}\n\nexport default Defender;","import Unit from \"../unit\";\n\nclass Infantry extends Unit {\n    constructor(team, pos) {\n        super(team, pos);\n        this.attack = 2;\n        this.defense = 2;\n        this.upgrade = {attack: 4, defense: 3}\n        this.pointStandard = {attack: 2, defense: 2}\n        this.image.src = \"./resources/infantry.png\";\n    }\n}\n\nexport default Infantry;","import Barrack from \"./pieces/barrack\";\nimport Base from \"./pieces/base\";\nimport Treasure from \"./pieces/treasure\";\nimport Archer from \"./pieces/units/archer\";\nimport Defender from \"./pieces/units/defender\";\nimport Infantry from \"./pieces/units/infantry\";\n\nclass Board {\n    static GRID_WIDTH = 7;\n    static GRID_HEIGHT = 8; //0, 0 is top left corner\n    static PLAYER_TEAM = 1;\n    static ENEMY_TEAM = 2;\n\n    constructor() {\n        let pos1 = {y: Board.GRID_HEIGHT-1, x: Math.floor(Board.GRID_WIDTH/2)}\n        let pos2 = {y: 0, x: Math.floor(Board.GRID_WIDTH/2)}\n        this.treasure = {\n            player: new Treasure(Board.PLAYER_TEAM, pos1),\n            enemy: new Treasure(Board.ENEMY_TEAM, pos2)};\n\n        pos1 = {y: 0, x: Math.floor(Board.GRID_WIDTH/2)};\n        pos2 = {y: Board.GRID_HEIGHT-1, x: Math.floor(Board.GRID_WIDTH/2)}\n        this.base = {\n            player: new Base(Board.PLAYER_TEAM, pos2),\n            enemy: new Base(Board.ENEMY_TEAM, pos1)};\n        this.grid = Board.makeGrid(this.treasure, this.base);\n    }\n\n    static makeGrid(treasure, base) {\n        let grid = [];\n\n        for (let i=0; i < Board.GRID_HEIGHT; i++) {\n            grid.push([]);\n            for (let j=0; j < Board.GRID_WIDTH; j++) {\n                grid[i].push([]);\n            }\n        }\n\n        let pos = {y: 0, x: 0};\n        grid.get(pos).push(new Barrack(Board.ENEMY_TEAM, pos));\n\n        pos = {y: 0, x: Board.GRID_WIDTH-1};\n        grid.get(pos).push(new Barrack(Board.ENEMY_TEAM, pos));\n\n        pos = {y: Board.GRID_HEIGHT-1, x: 0};\n        grid.get(pos).push(new Barrack(Board.PLAYER_TEAM, pos));\n\n        pos = {y: Board.GRID_HEIGHT-1, x: Board.GRID_WIDTH-1};\n        grid.get(pos).push(new Barrack(Board.PLAYER_TEAM, pos));\n\n\n        grid.get(base.enemy.pos).push(base.enemy);\n        grid.get(base.player.pos).push(base.player);\n\n        grid.get(treasure.enemy.pos).push(treasure.enemy);\n        grid.get(treasure.player.pos).push(treasure.player);\n\n        //Temp units for testing\n        // pos = {y: 6, x: 3}\n        // grid.get(pos).push(new Archer(Board.PLAYER_TEAM, pos));\n        // pos = {y: 1, x: 3}\n        // grid.get(pos).push(new Infantry(Board.ENEMY_TEAM, pos));\n        // pos = {y: 3, x: 4}\n        // grid.get(pos).push(new Archer(Board.PLAYER_TEAM, pos));\n        // pos = {y: 4, x: 1}\n        // grid.get(pos).push(new Archer(Board.PLAYER_TEAM, pos));\n        // pos = {y: 3, x: 3}\n        // grid.get(pos).push(new Defender(Board.ENEMY_TEAM, pos));\n\n        return grid;\n    }\n\n    isWon() {\n        return this.treasure.player.pos.equals(this.base.enemy.pos) ||\n            this.treasure.enemy.pos.equals(this.base.player.pos);\n    }\n}\n\nexport default Board;","class Player {\n    constructor(team, treasure, base) {\n        this.team = team;\n        this.units = [];\n        this.treasure = treasure;\n        this.base;\n    }\n\n    removeUnit(unit) {\n        let found = false;\n        let i = 0;\n        while (!found && i < this.units.length) {\n            if (this.units[i++].pos.equals(unit.pos)) {\n                found = true;\n            }\n        }\n        let u = this.units.splice(i-1, 1);\n        // console.log(this.units, u )\n        return this.units;\n    }\n}\n\nexport default Player;","import Player from \"./player\";\n\nclass HumanPlayer extends Player {\n    constructor(team) {\n        super(team);\n    }\n}\n\nexport default HumanPlayer;","import Board from \"./board\";\nimport Game from \"./game\";\nimport Barrack from \"./pieces/barrack\";\nimport Base from \"./pieces/base\";\nimport Treasure from \"./pieces/treasure\";\nimport Unit from \"./pieces/unit\";\nimport Archer from \"./pieces/units/archer\";\nimport Defender from \"./pieces/units/defender\";\nimport Infantry from \"./pieces/units/infantry\";\nimport { isOnBoard, isButton, willPlayAgain } from \"./utils\";\n\nclass View {\n    static SQUARE_DIM = 100;\n\n    constructor(game, ctx, el) {\n        this.game = game;\n        this.el = el;\n        this.ctx = ctx;\n        this.ratio = null;\n        this.images = this.renderImg();\n        this.drawBoard();\n        this.drawMenu({y: Board.GRID_HEIGHT, x: Board.GRID_WIDTH});\n        // addEventListener(\"resize\", (event) => {\n        //     this.clearBoard();\n        //     this.drawBoard();\n        // });\n    }\n\n    resetView(game) {\n        this.game = game;\n        this.ratio = null;\n        this.drawBoard();\n    }\n\n    clearBoard() {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    }\n\n    drawBoard(unitPos, clickedPos) {\n        this.clearBoard();\n        this.invisifyButtons();\n\n        this.images.background.onload(unitPos, clickedPos);\n    }\n\n    invisifyButtons() {\n        const e = [];\n        e.push(document.querySelector(\".about\"));\n        e.push(document.querySelector(\".rules\"));\n        e.push(document.querySelector(\".abouttitle\"));\n        e.push(document.querySelector(\".rulestitle\"));\n\n        e.forEach(e => {if (e) {e.style.visibility = 'hidden'}});\n    }\n\n    drawBoardWithoutOnload(unitPos, clickedPos) {\n        for (let y=0; y < Board.GRID_HEIGHT; y++) {\n            for (let x=0; x < Board.GRID_WIDTH; x++) {\n                this.drawGridSquare(x, y, \"darkgreen\");\n                this.drawGridElems({y: y, x: x}, unitPos, clickedPos);\n            }\n        }\n        this.drawMidline();\n\n        this.drawEndTurnButton();\n\n        this.ctx.font = \"40px Copperplate\";\n        this.game.currentPlayer.team === Board.ENEMY_TEAM ? this.ctx.fillStyle = \"red\" : this.ctx.fillStyle = \"blue\";\n        let str = \"Action Points: \" + this.game.actionPoints.toString();\n        this.ctx.strokeStyle = 'dimgrey';\n        this.ctx.lineWidth = 3;\n        this.ctx.strokeText(str, 10, (Board.GRID_HEIGHT+0.5) * View.SQUARE_DIM);\n        this.ctx.fillText(str, 10, (Board.GRID_HEIGHT+0.5) * View.SQUARE_DIM);\n\n        this.ctx.font = \"30px Copperplate\";\n        str = \"Troops: \" + this.game.currentPlayer.units.length.toString() + \"/8\";\n        this.ctx.strokeText(str, 10, (Board.GRID_HEIGHT+0.75) * View.SQUARE_DIM);\n        this.ctx.fillText(str, 10, (Board.GRID_HEIGHT+0.75) * View.SQUARE_DIM);\n    }\n\n    drawMidline() {\n        this.ctx.strokeStyle = 'lightskyblue';    \n        this.ctx.beginPath();\n        this.ctx.moveTo(0, Board.GRID_HEIGHT / 2 * View.SQUARE_DIM);\n        this.ctx.lineTo((Board.GRID_HEIGHT-1) * View.SQUARE_DIM, Board.GRID_HEIGHT / 2 * View.SQUARE_DIM);\n        this.ctx.stroke();\n    }\n\n    drawEndTurnButton() {\n        this.ctx.fillStyle = 'lightskyblue';        \n        this.ctx.fillRect(\n            View.SQUARE_DIM * 4,\n            (Board.GRID_HEIGHT+0.25) * View.SQUARE_DIM,\n            View.SQUARE_DIM * 1,\n            View.SQUARE_DIM * 0.5);\n        this.ctx.strokeStyle = 'cornflowerblue';\n        this.ctx.lineWidth = 1;\n        this.ctx.strokeRect(\n            View.SQUARE_DIM * 4,\n            (Board.GRID_HEIGHT+0.25) * View.SQUARE_DIM,\n            View.SQUARE_DIM * 1,\n            View.SQUARE_DIM * 0.5);\n        this.ctx.font = \"25px Copperplate\";\n        this.ctx.fillStyle = \"dimgrey\";\n        this.ctx.lineWidth = 2;\n        this.ctx.fillText(\"End\", 4.25 * View.SQUARE_DIM, (Board.GRID_HEIGHT+0.45) * View.SQUARE_DIM);\n        this.ctx.fillText(\"Turn\", 4.15 * View.SQUARE_DIM, (Board.GRID_HEIGHT+0.65) * View.SQUARE_DIM);\n    }\n\n    drawMenu(pos) {\n        const grid = document.createElement(\"ul\");\n        grid.classList.add(\"grid\");\n\n        let width = 100 * this.ratio;\n        let height = 50 * this.ratio;\n        grid.style.width = width.toString()+\"px\";\n        grid.style.height = height.toString()+\"px\";\n    \n        const cell = document.createElement(\"li\");\n        cell.style.backgroundColor = \"lightskyblue\";\n        cell.style.border = \"1px solid cornflowerblue\";\n        cell.style.width = grid.style.width;\n        cell.style.height = grid.style.height;\n        cell.style.position = \"absolute\";\n        cell.style.left = ((pos.x-1.5)*this.ratio*View.SQUARE_DIM).toString()+\"px\"\n        cell.style.top = ((pos.y+0.32)*this.ratio*View.SQUARE_DIM).toString()+\"px\"\n        cell.style.margin = \"0px\"\n        cell.style.listStyle = \"none\";\n        cell.style.cursor = \"pointer\";\n        cell.innerHTML = \"Menu\"\n        cell.style.font = \"25px Copperplate\"\n        cell.style.color = \"dimgrey\"\n        cell.style.textAlign = \"center\"\n        cell.style.lineHeight = (50*this.ratio).toString()+\"px\";\n        cell.classList.add(\"button\");\n\n        grid.appendChild(cell);\n        this.el.appendChild(grid);\n\n        this.drawMenuOptions(pos);\n        this.drawRules(pos);\n        this.drawAbout(pos);\n    }\n\n    drawMenuOptions(pos) {\n        const menu = document.createElement(\"ul\");\n        menu.classList.add(\"menu\");\n\n        let width = 100 * this.ratio;\n        let height = 50 * this.ratio;\n        menu.style.width = width.toString()+\"px\";\n        menu.style.height = height.toString()+\"px\";\n    \n        const rules = document.createElement(\"li\");\n        this.drawButton(\"Rules\", rules, {x: pos.x, y: pos.y - 0.5}, menu);\n        rules.classList.add(\"rules\");\n        const about = document.createElement(\"li\");\n        this.drawButton(\"About\", about, pos, menu);\n        about.classList.add(\"about\");\n\n        menu.appendChild(rules);\n        menu.appendChild(about);\n        menu.style.visibility = 'hidden'\n        this.el.appendChild(menu);\n    }\n\n    drawRules(pos) {\n        const title = document.createElement(\"ul\");\n        title.classList.add(\"rulestitle\");\n        this.drawMenuDisplayBox(\"How To Play\", title, title);\n\n        // let width = 500 * this.ratio;\n        // let height = 600 * this.ratio;\n        // title.style.width = width.toString()+\"px\";\n        // title.style.height = height.toString()+\"px\";\n    \n        const rules = document.createElement(\"li\");\n        this.drawMenuInnerDisplayBox(\"Steal the enemy's treasure & bring it back to your base!<p>BUYING | Select the barracks to buy troops. All units can move up to 2 spaces in any direction. There are 3 types of troops:</p>-Infantry: Defense 2, Attack 1, Range 1<br>-Archer: Defense 1, Attack 1, Range 2<br>-Defender: Defense 3, Attack 1, Range 1<br><p>UPGRADING | When in enemy territory, units can be ugraded as follows:</p>-Infantry: Defense +1, Attack +2<br>-Archer: Defense +1, Attack +1<br>-Defender: Defense +2, Attack +1<br><p>Units cannot attack after upgrading until the next round. Stats return to normal once returning to friendly territory.</p><p>TREASURE | Pick up the treasure by moving a unit onto the square containing it. (You can only pick up enemy treasure.)</p><p>PRICE CHART<br>Moving or Attacking: 1 Action Point<br>Buying or Upgrading: 2 Action Points</p>\", rules, title);\n        rules.style.font = \"12px Copperplate\";\n        rules.classList.add(\"rulesbox\");\n\n        title.appendChild(rules);\n        title.style.visibility = 'hidden'\n        this.el.appendChild(title);\n    }\n\n    drawAbout(pos) {\n        const title = document.createElement(\"ul\");\n        title.classList.add(\"abouttitle\");\n\n        this.drawMenuDisplayBox(\"About\", title, title);\n    \n        const rules = document.createElement(\"li\");\n        this.drawMenuInnerDisplayBox(\"<br><br><br><br><br><p>Game developed by Jasmine Kobata</p><br><p><a href='https://github.com/JasmineKobata/Javascript-Project'>Treasure Wars! GitHub Repo</p><br><p><a href='https://www.appacademy.io/'>App Academy</a> Javascript Project</p>\", rules, title);\n        rules.style.font = \"15px Copperplate\";\n        rules.classList.add(\"aboutbox\");\n\n        title.appendChild(rules);\n        title.style.visibility = 'hidden'\n        this.el.appendChild(title);\n    }\n\n    drawMenuDisplayBox(str, box, title) {\n        let width = 450 * this.ratio;\n        let height = 600 * this.ratio;\n        box.style.width = width.toString()+\"px\";\n        box.style.height = height.toString()+\"px\";\n        box.style.backgroundColor = \"lightskyblue\";\n        box.style.border = \"1px solid cornflowerblue\";\n        box.style.position = \"absolute\";\n        box.style.left = (this.ratio*(View.SQUARE_DIM + 10)).toString()+\"px\"\n        box.style.top = (this.ratio*(View.SQUARE_DIM+10)).toString()+\"px\"\n        box.style.margin = \"0px\"\n        box.style.listStyle = \"none\";\n        box.style.cursor = \"pointer\";\n        box.innerHTML = str;\n        box.style.font = \"25px Copperplate\"\n        box.style.color = \"dimgrey\"\n        box.style.textAlign = \"center\"\n        box.style.lineHeight = (50*this.ratio).toString()+\"px\";\n    }\n\n    drawMenuInnerDisplayBox(str, box, title) {\n        let width = 375 * this.ratio;\n        let height = 475 * this.ratio;\n        box.style.width = width.toString()+\"px\";\n        box.style.height = height.toString()+\"px\";\n        box.style.backgroundColor = \"cornflowerblue\";\n        box.style.border = \"1px solid cornflowerblue\";\n        box.style.position = \"absolute\";\n        box.style.left = (this.ratio*(View.SQUARE_DIM/2 + 10)).toString()+\"px\"\n        box.style.top = (this.ratio*(View.SQUARE_DIM/2+10)).toString()+\"px\"\n        box.style.margin = \"0px\"\n        box.style.listStyle = \"none\";\n        box.style.cursor = \"pointer\";\n        box.innerHTML = str;\n        box.style.font = \"25px Copperplate\"\n        box.style.color = \"white\"\n        box.style.textAlign = \"center\"\n    }\n\n    drawButton(str, cell, pos, container) {\n        cell.style.backgroundColor = \"lightskyblue\";\n        cell.style.border = \"1px solid cornflowerblue\";\n        cell.style.width = container.style.width;\n        cell.style.height = container.style.height;\n        cell.style.position = \"absolute\";\n        cell.style.left = ((pos.x-1.5)*this.ratio*View.SQUARE_DIM).toString()+\"px\"\n        cell.style.top = ((pos.y+0.32)*this.ratio*View.SQUARE_DIM).toString()+\"px\"\n        cell.style.margin = \"0px\"\n        cell.style.listStyle = \"none\";\n        cell.style.cursor = \"pointer\";\n        cell.innerHTML = str\n        cell.style.font = \"20px Copperplate\"\n        cell.style.color = \"dimgrey\"\n        cell.style.textAlign = \"center\"\n        cell.style.lineHeight = (50*this.ratio).toString()+\"px\";\n    }\n\n    drawWinningScreen() {\n        let img = new Image();\n        img.src = './resources/wood.png';\n        img.onload = () => {\n            this.ctx.drawImage(\n                img,\n                View.SQUARE_DIM * Math.floor((Board.GRID_WIDTH-2) / 2),\n                View.SQUARE_DIM * (Math.floor((Board.GRID_HEIGHT-2) / 2)+0.25),\n                View.SQUARE_DIM * 3, View.SQUARE_DIM * 1.5);\n            this.ctx.beginPath();\n            this.ctx.stroke();\n\n            this.ctx.font = \"30px Copperplate\";\n            this.ctx.lineWidth = 3;\n            let str = \"\";\n            if (this.game.currentPlayer.team === Board.PLAYER_TEAM) {\n                this.ctx.fillStyle = \"blue\";\n                this.ctx.strokeStyle = \"darkblue\";\n                str += \"Blue\";\n            } else {\n                this.ctx.fillStyle = \"red\";\n                this.ctx.strokeStyle = \"maroon\";\n                str += \"Red\";\n            }\n            str += \" Victory!\"\n            this.ctx.strokeText(str,\n                View.SQUARE_DIM * (Board.GRID_WIDTH / 2 - 1),\n                View.SQUARE_DIM * (Board.GRID_HEIGHT / 2 - 0.25));\n            this.ctx.fillText(str,\n                View.SQUARE_DIM * (Board.GRID_WIDTH / 2 - 1),\n                View.SQUARE_DIM * (Board.GRID_HEIGHT / 2 - 0.25));\n            \n            this.drawPlayAgainButton();\n        };\n    }\n\n    drawPlayAgainButton() {\n        this.ctx.lineWidth = 2;\n        this.ctx.fillStyle = 'cornflowerblue';  \n        this.ctx.strokeStyle = '#543000';      \n        this.ctx.fillRect(\n            View.SQUARE_DIM * (Board.GRID_WIDTH / 2 - 0.75),\n            View.SQUARE_DIM * (Math.floor((Board.GRID_HEIGHT) / 2)),\n            View.SQUARE_DIM * 1.5,\n            View.SQUARE_DIM * 0.5);\n        this.ctx.strokeRect(\n            View.SQUARE_DIM * (Board.GRID_WIDTH / 2 - 0.75),\n            View.SQUARE_DIM * (Math.floor((Board.GRID_HEIGHT) / 2)),\n            View.SQUARE_DIM * 1.5,\n            View.SQUARE_DIM * 0.5);\n        this.ctx.strokeStyle = 'blue';\n        this.ctx.font = \"24px Copperplate\";\n        this.ctx.lineWidth = 1;\n        this.ctx.fillStyle = \"white\";\n        this.ctx.strokeStyle = \"grey\"\n        this.ctx.strokeText(\"Play Again?\",\n            View.SQUARE_DIM * (Board.GRID_WIDTH / 2 - 0.70),\n            View.SQUARE_DIM * (Board.GRID_HEIGHT / 2 + 0.3));\n        this.ctx.fillText(\"Play Again?\",\n            View.SQUARE_DIM * (Board.GRID_WIDTH / 2 - 0.70),\n            View.SQUARE_DIM * (Board.GRID_HEIGHT / 2 + 0.3));\n    }\n\n    drawUpgradeConfirmation(pos) {\n        this.ctx.fillStyle = 'lightskyblue';        \n        this.ctx.fillRect(\n            View.SQUARE_DIM * pos.x,\n            View.SQUARE_DIM * pos.y,\n            View.SQUARE_DIM * 1,\n            View.SQUARE_DIM * 0.35);\n        this.ctx.strokeStyle = 'cornflowerblue';\n        this.ctx.strokeRect(\n            View.SQUARE_DIM * pos.x,\n            View.SQUARE_DIM * pos.y,\n            View.SQUARE_DIM * 1,\n            View.SQUARE_DIM * 0.35);\n        this.ctx.lineWidth = 1;\n        this.ctx.font = \"20px Copperplate\";\n        this.ctx.fillStyle = \"dimgrey\";\n        this.ctx.fillText(\"Upgrade?\",\n            View.SQUARE_DIM * pos.x,\n            View.SQUARE_DIM * (pos.y + 0.25));\n    }\n\n    drawBarrackSelection(pos) {\n        let newPos = this.adjustMenuPosition(pos);\n        this.team === Board.ENEMY_TEAM ? this.ctx.fillStyle = \"red\" : this.ctx.fillStyle = \"blue\";\n        let troopSelection = [];\n            this.images.barrack.onload(newPos);\n\n        this.ctx.font = \"30px Copperplate\";\n        this.ctx.fillStyle = \"white\";\n        this.ctx.lineWidth = 3;\n        this.ctx.fillText(\"Buy New Troop?\",\n            View.SQUARE_DIM * (newPos.x + 0.35),\n            View.SQUARE_DIM * (newPos.y + 0.35));\n    \n        let inf = new Infantry(this.game.currentPlayer.team, {y: newPos.y+0.5, x: newPos.x});\n        let arch = new Archer(this.game.currentPlayer.team, {y: newPos.y+0.5, x: newPos.x+1});\n        let def = new Defender(this.game.currentPlayer.team, {y: newPos.y+0.5, x: newPos.x+2});\n        inf.board = this.game.board;\n        arch.board = this.game.board;\n        def.board = this.game.board;\n        inf.view = this.game.view;\n        arch.view = this.game.view;\n        def.view = this.game.view;\n        troopSelection.push(inf);\n        troopSelection.push(arch);\n        troopSelection.push(def);\n        troopSelection.forEach( (unit) => {\n            unit.draw(this.ctx, this.game.currentPlayer);\n        });\n        return troopSelection;\n    }\n\n    adjustMenuPosition(pos) {\n        let newPos = {};\n        pos.x === 0 ? newPos.x = pos.x + 0.25 : newPos.x = pos.x - 2.25;\n        pos.y === 0 ? newPos.y = pos.y + 0.5 : newPos.y = pos.y - 1;\n        return newPos;\n    }\n\n    drawOutline(pos) {\n        this.ctx.strokeStyle = 'yellow';\n        this.ctx.lineWidth = 10;\n        this.ctx.strokeRect(\n            View.SQUARE_DIM * pos.x,\n            View.SQUARE_DIM * pos.y,\n            View.SQUARE_DIM,\n            View.SQUARE_DIM\n        )\n    }\n\n    drawMoveHighlights(pos) {\n        this.drawGridSquare(pos.x, pos.y, 'seagreen', \"mediumseagreen\");\n    }\n\n    drawAttackHighlights(pos) {\n        this.drawGridSquare(pos.x, pos.y, \"cornflowerblue\", \"lightskyblue\")\n    }\n\n    drawGridElems(pos, unitPos, clickedPos) {\n        let gridSquare = this.game.board.grid.get(pos);\n        for (let i=0; i < gridSquare.length; i++) {\n            gridSquare[i].draw(this.ctx, this.game.currentPlayer, unitPos, clickedPos);\n        }\n        this.ctx.beginPath();\n    }\n\n    drawGridSquare(x, y, outlineColor, fillColor) {\n        if (fillColor) {\n            this.ctx.fillStyle = fillColor;\n            this.ctx.globalAlpha = 0.60;\n            this.ctx.fillRect(\n                View.SQUARE_DIM * x,\n                View.SQUARE_DIM * y,\n                View.SQUARE_DIM,\n                View.SQUARE_DIM\n            )\n        }\n        this.ctx.strokeStyle = outlineColor;\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(\n            View.SQUARE_DIM * x,\n            View.SQUARE_DIM * y,\n            View.SQUARE_DIM,\n            View.SQUARE_DIM\n        )\n        this.ctx.globalAlpha = 1;\n    }\n\n    renderImg() {\n        let pixelWidth = Board.GRID_WIDTH * View.SQUARE_DIM;\n        let pixelHeight = (Board.GRID_HEIGHT+1) * View.SQUARE_DIM;\n        this.ctx.canvas.width = pixelWidth;\n        this.ctx.canvas.height = pixelHeight;\n        this.ratio = Math.min(\n            window.innerHeight / this.ctx.canvas.height,\n            window.innerWidth / this.ctx.canvas.width\n        )\n        this.ctx.scale(this.ratio, this.ratio);\n        let images = {};\n        images.background = new Image();\n        images.background.src = \"./resources/grass2.png\";\n        images.background.onload = (unitPos, clickedPos) => {\n            this.ctx.drawImage(\n                images.background, 0, 0,\n               pixelWidth, pixelHeight,\n               0, 0,\n               pixelWidth, pixelHeight);\n            this.ctx.beginPath();\n            this.ctx.stroke();\n            this.drawBoardWithoutOnload(unitPos, clickedPos);\n        }\n\n        images.barrack = new Image();\n        images.barrack.src = \"./resources/wood.png\";\n        images.barrack.onload = (pos) => {\n            this.ctx.drawImage(\n                images.barrack,\n                View.SQUARE_DIM * pos.x,\n                View.SQUARE_DIM * pos.y,\n                View.SQUARE_DIM * 3, View.SQUARE_DIM * 1.5);\n            this.ctx.beginPath();\n            this.ctx.stroke();\n        };\n\n        return images;\n    }\n\n    bindEvents(ctx) {\n        const button = document.querySelector(\".button\");\n        button.addEventListener(\"click\", this.handleButton.bind(this));\n        const about = document.querySelector(\".about\");\n        if (about) {about.addEventListener(\"click\", this.handleAbout.bind(this));}\n        const rules = document.querySelector(\".rules\");\n        if (rules) {rules.addEventListener(\"click\", this.handleRules.bind(this));}\n        ctx.canvas.addEventListener('click', this.handleClick.bind(this));\n    }\n\n    handleAbout(event) {\n        const e = document.querySelector(\".abouttitle\");\n        this.invisifyButtons();\n        e.style.visibility = 'visible';\n    }\n\n    handleRules(event) {\n        const e = document.querySelector(\".rulestitle\");\n        this.invisifyButtons();\n        e.style.visibility = 'visible';\n    }\n\n    handleButton(event) {\n        const e1 = document.querySelector(\".about\")\n        const e2 = document.querySelector(\".rules\")\n\n        e1.style.visibility = 'visible';\n        e2.style.visibility = 'visible';\n    }\n\n    handleClick(event) {\n        let x = Math.floor(event.offsetX / (View.SQUARE_DIM * this.ratio))\n        let y = Math.floor(event.offsetY / (View.SQUARE_DIM * this.ratio))\n        let xExact = event.offsetX / (View.SQUARE_DIM * this.ratio);\n        let yExact = event.offsetY / (View.SQUARE_DIM * this.ratio);\n        let pos = {y, x};\n        let posExact = {y: yExact, x: xExact};\n\n        if (this.game.board.isWon()) {\n        //    this.drawWinningScreen();\n            if (willPlayAgain(posExact)) {\n                this.game.resetGame(this);\n                this.drawBoard();\n            }\n        } else {\n            this.drawBoard();\n            if (isOnBoard(pos)) {\n                this.game.ctx.clickedPos = pos\n                this.game.ctx.exactPos = posExact;\n                this.game.stateMachine();\n            } else if (isButton(posExact)) {\n                this.game.switchPlayers();\n                this.drawBoard();\n            }\n        }\n    }\n}\n\nfunction drawUpgradeButton(unit, ctx, x, y) {\n    unit.team === Board.ENEMY_TEAM ? ctx.fillStyle = \"red\" : ctx.fillStyle = \"blue\";\n    ctx.beginPath();\n    ctx.arc(\n        View.SQUARE_DIM * x + View.SQUARE_DIM * .15,\n        View.SQUARE_DIM * y + View.SQUARE_DIM * .15,\n        View.SQUARE_DIM * .1,\n        0, 2.0 * Math.PI);\n    ctx.fill();\n\n    ctx.fillStyle = \"white\";\n    ctx.font = \"30px Copperplate\";\n    ctx.fillText(\"+\", View.SQUARE_DIM * x + View.SQUARE_DIM * 0.06,\n    View.SQUARE_DIM * y + View.SQUARE_DIM * .22);\n}\n\nfunction drawStats(unit, ctx, x, y) {\n    unit.team === Board.ENEMY_TEAM ? ctx.fillStyle = \"red\" : ctx.fillStyle = \"blue\";\n    ctx.font = \"35px Copperplate\";\n    ctx.strokeStyle = 'dimgrey';\n    ctx.lineWidth = 3;\n    ctx.strokeText(\n        \"A\"+unit.attack.toString(),\n        View.SQUARE_DIM * x + View.SQUARE_DIM * .3,\n        View.SQUARE_DIM * y + View.SQUARE_DIM * .50);\n    ctx.strokeText(\n        \"D\"+unit.defense.toString(),\n        View.SQUARE_DIM * x + View.SQUARE_DIM * .3,\n        View.SQUARE_DIM * y + View.SQUARE_DIM * .75);\n    ctx.fillText(\n        \"A\"+unit.attack.toString(),\n        View.SQUARE_DIM * x + View.SQUARE_DIM * .3,\n        View.SQUARE_DIM * y + View.SQUARE_DIM * .50);\n    ctx.fillText(\n        \"D\"+unit.defense.toString(),\n        View.SQUARE_DIM * x + View.SQUARE_DIM * .3,\n        View.SQUARE_DIM * y + View.SQUARE_DIM * .75);\n}\n\nBarrack.prototype.draw = function(ctx) {\n    this.team === Board.ENEMY_TEAM ? ctx.fillStyle = \"red\" : ctx.fillStyle = \"blue\";\n    ctx.fillRect(\n        View.SQUARE_DIM * this.pos.x + View.SQUARE_DIM * .10,\n        View.SQUARE_DIM * this.pos.y + View.SQUARE_DIM * .70,\n        View.SQUARE_DIM * .80,\n        View.SQUARE_DIM * .20);\n\n    this.image.onload = () => {\n        ctx.drawImage(\n            this.image,\n            View.SQUARE_DIM * this.pos.x,\n            View.SQUARE_DIM * this.pos.y,\n            View.SQUARE_DIM, View.SQUARE_DIM);\n        ctx.beginPath();\n        ctx.stroke();\n    };\n    this.image.onload();\n}\n\nBase.prototype.draw = function(ctx) {\n    this.team === Board.ENEMY_TEAM ? ctx.fillStyle = \"red\" : ctx.fillStyle = \"blue\";\n    ctx.beginPath();\n    ctx.arc(\n        View.SQUARE_DIM * this.pos.x + View.SQUARE_DIM * .50,\n        View.SQUARE_DIM * this.pos.y + View.SQUARE_DIM * .50,\n        View.SQUARE_DIM * .35,\n        0, 2.0 * Math.PI);\n    ctx.fill();\n}\n\nTreasure.prototype.draw = function(ctx) {\n    this.image.onload = () => {\n        ctx.drawImage(\n            this.image,\n            View.SQUARE_DIM * this.pos.x,\n            View.SQUARE_DIM * this.pos.y,\n            View.SQUARE_DIM, View.SQUARE_DIM);\n        ctx.beginPath();\n        ctx.stroke();\n    };\n    this.image.onload();\n}\n\nexport function drawUpgradeConfirmation(ctx, pos) {\n    ctx.fillStyle = 'lightskyblue';        \n    ctx.fillRect(\n        View.SQUARE_DIM * pos.x,\n        View.SQUARE_DIM * pos.y,\n        View.SQUARE_DIM * 1,\n        View.SQUARE_DIM * 0.35);\n    ctx.strokeStyle = 'cornflowerblue';\n    ctx.strokeRect(\n        View.SQUARE_DIM * pos.x,\n        View.SQUARE_DIM * pos.y,\n        View.SQUARE_DIM * 1,\n        View.SQUARE_DIM * 0.35);\n    ctx.lineWidth = 1;\n    ctx.font = \"20px Copperplate\";\n    ctx.fillStyle = \"dimgrey\";\n    ctx.fillText(\"Upgrade?\",\n        View.SQUARE_DIM * pos.x,\n        View.SQUARE_DIM * (pos.y + 0.25));\n}\n\nUnit.prototype.draw = function(ctx, currentPlayer, unitPos, clickedPos) {\n    this.team === Board.ENEMY_TEAM ? ctx.fillStyle = \"red\" : ctx.fillStyle = \"blue\";\n\n    this.image.onload = () => {\n        ctx.drawImage(\n            this.image,\n            View.SQUARE_DIM * this.pos.x,\n            View.SQUARE_DIM * this.pos.y,\n            View.SQUARE_DIM, View.SQUARE_DIM);\n        ctx.beginPath();\n        ctx.stroke();\n        drawStats(this, ctx, this.pos.x, this.pos.y);\n        if (this.isUpgradable(currentPlayer)) {\n            drawUpgradeButton(this, ctx, this.pos.x, this.pos.y);\n            if (unitPos && clickedPos) {\n                drawUpgradeConfirmation(ctx, unitPos);\n            }\n        }\n    };\n    this.image.onload();\n    // this.image.src = this.image.src;\n}\n\nexport default View;","import View from './view.js';\nimport Game from './game.js';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const canvas = document.getElementById('treasure-game');\n    const ctx = canvas.getContext(\"2d\");\n    const el = document.querySelector('.buttons');\n\n    const game = new Game();\n    const view = new View(game, ctx, el);\n    game.view = view;\n\n    view.bindEvents(ctx);\n});","import Board from \"./board\";\nimport HumanPlayer from \"./humanPlayer\";\nimport { isUpgradeButton, isUpgradeConfirmation } from \"./utils\";\n\nclass Game {\n    constructor() {\n        this.board = new Board();\n        this.view = null;\n        this.state = 'unselected';\n        this.player = new HumanPlayer(Board.PLAYER_TEAM);\n        this.enemy = new HumanPlayer(Board.ENEMY_TEAM);\n        this.currentPlayer = this.player;\n        this.actionPoints = 4;\n        this.ctx = {}; //{ clickedPos, selectedSquare }\n    }\n\n    resetGame(view) {\n        this.board = new Board();\n        this.view = view;\n        this.state = 'unselected';\n        this.player = new HumanPlayer(Board.PLAYER_TEAM);\n        this.enemy = new HumanPlayer(Board.ENEMY_TEAM);\n        this.currentPlayer = this.player;\n        this.actionPoints = 4;\n        this.ctx = {};\n    }\n\n    switchPlayers() {\n        this.board.grid.forEach((col) => {\n            col.forEach((row) => {\n                row.forEach((e) => {\n                    if (e.parentType() === 'Unit') {\n                        e.hasMoved = false;\n                        e.hasAttacked = false;\n                        e.hasUpgraded = false;\n                    }\n                })\n            })\n        })\n        this.actionPoints = 4;\n        this.state = 'unselected';\n        this.currentPlayer === this.player ? this.currentPlayer = this.enemy : this.currentPlayer = this.player;\n    }\n\n    //ctx -> {clickedPos always set, selectedSquare that will be set in unselected stage}\n    stateMachine() {\n        let square = this.board.grid.get(this.ctx.clickedPos);\n        switch (this.state) {\n            case 'unselected':\n                //if unit upgrade is selected\n                if (this.unitUpgradeable(this.ctx.exactPos, square.last())) {\n                    this.ctx.selectedSquare = square;\n                    this.state = 'upgrade';\n                } //if unit is selected\n                else if (this.unitSelected(square.last())) {\n                    this.ctx.selectedSquare = square;\n                    this.state = 'unit';\n                } //else if barrack is selected\n                else if (this.actionPoints > 1 && this.currentPlayer.units.length < 8\n                    && this.barrackSelected(square.first())) {\n                    this.ctx.menu = this.view.drawBarrackSelection(square.first().pos);\n                    this.ctx.selectedSquare = square;\n                    this.state = 'barrack';\n                }\n                break;\n            case 'unit':\n                //if action taken\n                if (this.actionTaken(this.ctx.clickedPos, this.ctx.selectedSquare)) {\n                    this.ctx = {};\n                    this.state = 'unselected';\n                    // this.view.drawBoard();\n                    if (this.board.isWon()) {\n                        this.view.drawBoard();\n                        this.view.drawWinningScreen();\n                    } else {\n                        if (this.actionPoints === 0) { this.switchPlayers(); }\n                        this.view.drawBoard();\n                    }\n                } //else if action not taken\n                else {\n                    this.view.drawBoard();\n                    if (this.unitUpgradeable(this.ctx.exactPos, square.last())) {\n                        this.state = 'upgrade'\n                    }\n                    else if (this.unitSelected(square.last())) {}\n                    else if (this.actionPoints > 1 && this.currentPlayer.units.length < 8\n                        && this.barrackSelected(square.first())) {\n                        this.ctx.menu = this.view.drawBarrackSelection(square.first().pos);\n                        this.state = 'barrack';\n                    }\n                    else {\n                        this.state = 'unselected';\n                    }\n                    this.ctx.selectedSquare = square;\n                }\n                break;\n            case 'barrack':\n                //if unit is bought\n                if (this.unitBought(this.ctx.exactPos, this.ctx.menu, this.ctx.selectedSquare)) {\n                    this.ctx = {};\n                    this.state = 'unselected';\n                    if (this.actionPoints === 0) { this.switchPlayers(); }\n                    this.view.drawBoard();\n                } //else if unit is not bought\n                else {\n                    this.view.drawBoard();\n                    if (this.unitUpgradeable(this.ctx.exactPos, square.last())) {\n                        this.state = 'upgrade'\n                    }\n                    else if (this.unitSelected(square.last())) {\n                        this.state = 'unit';\n                    }\n                    else if (this.barrackSelected(square.first())) {\n                        this.ctx.menu = this.view.drawBarrackSelection(square.first().pos);\n                    } else {\n                        this.state = 'unselected';\n                    }\n                    this.ctx.selectedSquare = square;\n                }\n                break;\n            case 'upgrade':\n                //if unit is upgraded\n                if (this.unitUpgraded(this.ctx.exactPos, this.ctx.selectedSquare)) {\n                    this.state = 'unselected';\n                    if (this.actionPoints === 0) { this.switchPlayers(); }\n                    this.view.drawBoard();\n                }\n                else {\n                    this.view.drawBoard();\n                    //if another unit upgrade is selected\n                    if (this.unitUpgradeable(this.ctx.exactPos, square.last())) {\n                    } //else if a unit is selected\n                    else if (this.unitSelected(square.last())) {\n                        this.state = 'unit';\n                    } //else if a barrack is selected\n                    else if (this.actionPoints > 1 && this.currentPlayer.units.length < 8\n                        && this.barrackSelected(square.first())) {\n                        this.ctx.menu = this.view.drawBarrackSelection(square.first().pos);\n                        this.state = 'barrack';\n                    } else {\n                        this.state = 'unselected';\n                    }\n                    this.ctx.selectedSquare = square;\n                }\n                break;\n            default:\n                // console.log(\"ERROR: undefined state\");\n        }\n    }\n\n    unitUpgradeable(pos, unit) {\n        let unitUpgradeable = false;\n        if (this.actionPoints > 1 && unit && unit.parentType() === 'Unit' &&\n            unit.isUpgradable(this.currentPlayer) && isUpgradeButton(unit.pos, pos)) {\n                unitUpgradeable = true;\n                this.view.drawBoard(unit.pos, pos);\n        }\n        return unitUpgradeable;\n    }\n\n    unitUpgraded(pos, square) {\n        let unitUpgraded = false;\n        let unit = square.last();\n        if (unit && unit.parentType() === 'Unit' &&\n            unit.isUpgradable(this.currentPlayer) && isUpgradeConfirmation(unit.pos, pos)) {\n                unit.upgrades();\n                this.actionPoints -= 2;\n                unitUpgraded = true;\n        }\n        return unitUpgraded;\n    }\n\n    unitSelected(unit) {\n        let unitSelected = false;\n        if (unit && unit.parentType() === 'Unit' && unit.team === this.currentPlayer.team) {\n            unit.resetActions(); //reset newly selected unit's action squares\n            if (!unit.board) { unit.board = this.board; }\n            if (!unit.view) { unit.view = this.view; }\n\n            this.unitCallDrawSelected(unit, this.view);\n            unitSelected = true;\n        }\n        return unitSelected;\n    }\n\n    unitCallDrawSelected(unit, view) {\n        if (!unit.hasMoved) {\n            unit.getMoves().forEach((pos) => {\n                view.drawMoveHighlights(pos);\n                view.drawGridElems(pos);\n            });\n        }\n        if (!unit.hasAttacked && !unit.hasUpgraded) {\n            unit.getAttacks().forEach((pos) => {\n                view.drawAttackHighlights(pos);\n                view.drawGridElems(pos);\n            })\n        }\n        view.drawOutline(unit.pos);\n    }\n\n    barrackSelected(barrack) {\n        return barrack && barrack.type() === 'Barrack' && barrack.team === this.currentPlayer.team;\n    }\n\n    unitBought(pos, menu, square) {\n        let unitBought = false;\n        let newPos = this.adjustMenuPosition(square.first(), pos);\n        let unit;\n        if (unit = menu.find(e => e.pos.x === newPos.x && e.pos.y === newPos.y)) {\n            unit.pos = square.first().pos;\n            square.push(unit);\n            this.currentPlayer.units.push(unit);\n            this.actionPoints -= 2;\n            unitBought = true;\n        }\n\n        return unitBought;\n    }\n\n    adjustMenuPosition(barrack, pos) {\n        let xDifference = barrack.pos.x === 0 ? -0.25 : 0.25;\n        let yDifference = barrack.pos.y === 0 ? -1 : 0.5;\n        let x = Math.floor((pos.x + xDifference));\n        let y = Math.floor((pos.y + yDifference));\n        let newPos = {};\n        newPos.x = barrack.pos.x === 0 ? x + 0.25 : x - 0.25;\n        newPos.y = barrack.pos.y === 0 ? y + 1 : y - 0.5;\n        return newPos;\n    }\n\n    actionTaken(pos, square) {\n        return this.moveUnit(pos, square) || this.attackUnit(pos, square);\n    }\n\n    moveUnit(pos, square) {\n        let unitMoved = false;\n        let unit = square.last();\n \n        if (unit.moves && unit.moves.find(e => e.x === pos.x && e.y === pos.y)) {\n            unit.pos = pos; //reset unit position;\n            if (unit.onHomeTerf()) {\n                unit.downgrade();\n            }\n            square.pop();\n            if (square.length > 0 && square.last().type() === 'Treasure'\n                && square.last().team !== this.currentPlayer.team) {\n                square.last().pos = pos;\n                this.board.grid.get(pos).push(square.pop());\n            }\n            this.board.grid.get(pos).push(unit);\n\n            this.actionPoints--;\n            unit.hasMoved = true;\n            unitMoved = true;\n        }\n        return unitMoved;\n    }\n\n    attackUnit(pos, square) {\n        let unitAttacked = false;\n        let unit = square.last();\n        if (unit.attacks && unit.attacks.find(e => e.x === pos.x && e.y === pos.y)) {\n            let attackedSquare = this.board.grid.get(pos);\n            let attackedUnit = attackedSquare.last();\n            attackedUnit.defense -= unit.attack;\n            if (attackedUnit.defense < 1) {\n                attackedSquare.pop();\n                this.currentPlayer.team === this.player.team ? this.enemy.removeUnit(attackedUnit) : this.player.removeUnit(attackedUnit);\n            }\n            this.actionPoints--;\n            unit.hasAttacked = true;\n            unitAttacked = true;\n        }\n        return unitAttacked;\n    }\n}\n\nexport default Game;"],"names":["constructor","team","pos","this","image","Image","parentType","Object","getPrototypeOf","name","type","Piece","super","src","Board","isOnBoard","x","y","Array","prototype","get","last","length","first","equals","attack","defense","pointStandard","upgrade","attackDist","moves","attacks","hasMoved","hasAttacked","hasUpgraded","board","view","resetActions","upgrades","downgrade","Math","min","getMoves","getMovesSet","delete","JSON","stringify","map","elem","parse","validVisited","Set","maxDist","newPos","hasUnit","has","add","getAttacks","square","grid","push","isUpgradable","currentPlayer","onHomeTerf","Unit","pos1","GRID_HEIGHT","floor","GRID_WIDTH","pos2","treasure","player","Treasure","PLAYER_TEAM","enemy","ENEMY_TEAM","base","Base","makeGrid","static","i","j","Barrack","isWon","units","removeUnit","unit","found","splice","Player","View","game","ctx","el","ratio","images","renderImg","drawBoard","drawMenu","resetView","clearBoard","clearRect","canvas","width","height","unitPos","clickedPos","invisifyButtons","background","onload","e","document","querySelector","forEach","style","visibility","drawBoardWithoutOnload","drawGridSquare","drawGridElems","drawMidline","drawEndTurnButton","font","fillStyle","str","actionPoints","toString","strokeStyle","lineWidth","strokeText","SQUARE_DIM","fillText","beginPath","moveTo","lineTo","stroke","fillRect","strokeRect","createElement","classList","cell","backgroundColor","border","position","left","top","margin","listStyle","cursor","innerHTML","color","textAlign","lineHeight","appendChild","drawMenuOptions","drawRules","drawAbout","menu","rules","drawButton","about","title","drawMenuDisplayBox","drawMenuInnerDisplayBox","box","container","drawWinningScreen","img","drawImage","drawPlayAgainButton","drawUpgradeConfirmation","drawBarrackSelection","adjustMenuPosition","troopSelection","barrack","inf","Infantry","arch","Archer","def","Defender","draw","drawOutline","drawMoveHighlights","drawAttackHighlights","gridSquare","outlineColor","fillColor","globalAlpha","pixelWidth","pixelHeight","window","innerHeight","innerWidth","scale","bindEvents","addEventListener","handleButton","bind","handleAbout","handleRules","handleClick","event","e1","e2","offsetX","offsetY","xExact","posExact","willPlayAgain","resetGame","exactPos","stateMachine","isButton","switchPlayers","arc","PI","fill","drawStats","drawUpgradeButton","getElementById","getContext","state","HumanPlayer","col","row","unitUpgradeable","selectedSquare","unitSelected","barrackSelected","actionTaken","unitBought","unitUpgraded","squarePos","clickPos","isUpgradeButton","isUpgradeConfirmation","unitCallDrawSelected","find","xDifference","yDifference","moveUnit","attackUnit","unitMoved","pop","unitAttacked","attackedSquare","attackedUnit"],"sourceRoot":""}