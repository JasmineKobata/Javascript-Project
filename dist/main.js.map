{"version":3,"file":"main.js","mappings":"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","sources":["webpack://javascript-project/./src/piece.js","webpack://javascript-project/./src/pieces/barrack.js","webpack://javascript-project/./src/pieces/base.js","webpack://javascript-project/./src/pieces/treasure.js","webpack://javascript-project/./src/board.js","webpack://javascript-project/./src/utils.js","webpack://javascript-project/./src/pieces/unit.js","webpack://javascript-project/./src/pieces/units/archer.js","webpack://javascript-project/./src/pieces/units/defender.js","webpack://javascript-project/./src/pieces/units/infantry.js","webpack://javascript-project/./src/view.js","webpack://javascript-project/./src/player.js","webpack://javascript-project/./src/humanPlayer.js","webpack://javascript-project/./src/index.js","webpack://javascript-project/./src/game.js"],"sourcesContent":["class Piece {\n    constructor(team, pos, ) {\n        this.team = team;\n        this.pos = pos\n        this.image = new Image();\n    }\n\n    parentType() {\n        return Object.getPrototypeOf(this.constructor).name;\n    }\n\n    type() {\n        return this.constructor.name;\n    }\n}\n\nexport default Piece;","import Piece from \"../piece\";\n\nclass Barrack extends Piece {\n    constructor(team, pos) {\n        super(team, pos);\n        this.image.src = \"./resources/barracks2.png\";\n    }\n}\n\nexport default Barrack;","import Piece from \"../piece\";\n\nclass Base extends Piece {\n    constructor(team, pos) {\n        super(team, pos);\n    }\n}\n\nexport default Base;","import Piece from \"../piece\";\nimport Board from \"../board\";\n\nclass Treasure extends Piece {\n    constructor(team, pos) {\n        super(team, pos);\n        this.team === Board.PLAYER_TEAM ? this.image.src = \"./resources/treasureblue.png\" : this.image.src = \"./resources/treasurered.png\";\n    }\n}\n\nexport default Treasure;","import Barrack from \"./pieces/barrack\";\nimport Base from \"./pieces/base\";\nimport Treasure from \"./pieces/treasure\";\n\nclass Board {\n    static GRID_WIDTH = 7;\n    static GRID_HEIGHT = 8; //0, 0 is top left corner\n    static PLAYER_TEAM = 1;\n    static ENEMY_TEAM = 2;\n\n    constructor() {\n        let pos1 = {y: Board.GRID_HEIGHT-1, x: Math.floor(Board.GRID_WIDTH/2)}\n        let pos2 = {y: 0, x: Math.floor(Board.GRID_WIDTH/2)}\n        this.treasure = {\n            player: new Treasure(Board.PLAYER_TEAM, pos1),\n            enemy: new Treasure(Board.ENEMY_TEAM, pos2)};\n\n        pos1 = {y: 0, x: Math.floor(Board.GRID_WIDTH/2)};\n        pos2 = {y: Board.GRID_HEIGHT-1, x: Math.floor(Board.GRID_WIDTH/2)}\n        this.base = {\n            player: new Base(Board.PLAYER_TEAM, pos2),\n            enemy: new Base(Board.ENEMY_TEAM, pos1)};\n        this.barracks = {\n            player: [],\n            enemy: []\n        };\n        this.grid = Board.makeGrid(this.treasure, this.base, this.barracks);\n    }\n\n    static makeGrid(treasure, base, barracks) {\n        let grid = [];\n\n        for (let i=0; i < Board.GRID_HEIGHT; i++) {\n            grid.push([]);\n            for (let j=0; j < Board.GRID_WIDTH; j++) {\n                grid[i].push([]);\n            }\n        }\n\n        let pos = {y: 0, x: 0};\n        let barrack = new Barrack(Board.ENEMY_TEAM, pos);\n        grid.get(pos).push(barrack);\n        barracks.enemy.push(barrack);\n\n        pos = {y: 0, x: Board.GRID_WIDTH-1};\n        barrack = new Barrack(Board.ENEMY_TEAM, pos);\n        grid.get(pos).push(barrack);\n        barracks.enemy.push(barrack);\n\n        pos = {y: Board.GRID_HEIGHT-1, x: 0};\n        barrack = new Barrack(Board.PLAYER_TEAM, pos);\n        grid.get(pos).push(barrack);\n        barracks.player.push(barrack);\n\n        pos = {y: Board.GRID_HEIGHT-1, x: Board.GRID_WIDTH-1};\n        barrack = new Barrack(Board.PLAYER_TEAM, pos);\n        grid.get(pos).push(barrack);\n        barracks.player.push(barrack);\n\n        grid.get(base.enemy.pos).push(base.enemy);\n        grid.get(base.player.pos).push(base.player);\n\n        grid.get(treasure.enemy.pos).push(treasure.enemy);\n        grid.get(treasure.player.pos).push(treasure.player);\n\n        return grid;\n    }\n\n    isWon() {\n        return this.treasure.player.pos.equals(this.base.enemy.pos) ||\n            this.treasure.enemy.pos.equals(this.base.player.pos);\n    }\n}\n\nexport default Board;","import Board from \"./board\";\n\nexport function isOnBoard(pos) {\n    return pos.x > -1 && pos.x < Board.GRID_WIDTH && pos.y > -1 && pos.y < Board.GRID_HEIGHT;\n}\n\nexport function isButton(pos) {\n    return pos.y > Board.GRID_HEIGHT + 0.25 &&\n        pos.y < Board.GRID_HEIGHT + 0.75 &&\n        pos.x > 4 && pos.x < 5;\n}\n\nexport function willPlayAgain(pos) {\n     return pos.x > Board.GRID_WIDTH / 2 - 0.75 &&\n        pos.x < Board.GRID_WIDTH / 2 + 0.75 &&\n        pos.y > Math.floor((Board.GRID_HEIGHT) / 2) &&\n        pos.y < Math.floor((Board.GRID_HEIGHT) / 2) + 0.5;\n}\n\nexport function isUpgradeButton(squarePos, clickPos) {\n    let x = clickPos.x - squarePos.x;\n    let y = clickPos.y - squarePos.y;\n\n    return x > 0 && x < 0.25 && y > 0 && y < 0.25;\n}\n\nexport function isUpgradeConfirmation(squarePos, clickPos) {\n    let x = clickPos.x - squarePos.x;\n    let y = clickPos.y - squarePos.y;\n    return x > 0 && x < 1 && y > 0 && y < 0.25;\n}\n\nArray.prototype.get = function(pos) {\n    return this[pos.y][pos.x];\n}\n\nArray.prototype.containsType = function(type) {\n    square.some()\n}\n\nArray.prototype.last = function() {\n    return this[this.length - 1];\n}\n\nArray.prototype.first = function() {\n    return this[0];\n}\n\nObject.prototype.equals = function(pos) {\n    return this.x === pos.x && this.y === pos.y;\n}\n\nexport default Array;","import Board from \"../board\";\nimport Piece from \"../piece\";\nimport {isOnBoard} from \"../utils\";\n\nclass Unit extends Piece {\n    constructor(team, pos) {\n        super(team, pos);\n        this.attack = null;\n        this.defense = null;\n        this.pointStandard = null;\n        this.upgrade = null;\n        this.attackDist = 1;\n        this.moves = null;\n        this.attacks = [];\n        this.hasMoved = false;\n        this.hasAttacked = false;\n        this.hasUpgraded = false;\n        this.board = null;\n        this.view = null;\n    }\n\n    resetActions() {\n        this.moves = null;\n        this.attacks = [];\n    }\n\n    upgrades() {\n        this.hasUpgraded = true;\n        this.attack = this.upgrade.attack;\n        this.defense = this.upgrade.defense;\n    }\n\n    downgrade() {\n        this.attack = this.pointStandard.attack;\n        this.defense = Math.min(this.pointStandard.defense, this.defense);\n    }\n\n    getMoves() {\n        this.moves = this.getMovesSet();\n        this.moves.delete(JSON.stringify(this.pos));\n        this.moves = [...this.moves].map(elem => {\n            return JSON.parse(elem);\n        });\n        return this.moves;\n    }\n\n    getMovesSet(validVisited = new Set(), maxDist = 2, pos = this.pos) {\n        if (maxDist === 0) { return validVisited; }\n\n        for (let y=pos.y-1; y <= pos.y + 1; y++) {\n            for (let x=pos.x-1; x <= pos.x + 1; x++) {\n                let newPos = {y: y, x: x};\n                if (isOnBoard(newPos) && !this.hasUnit(newPos)) {\n                    if (!validVisited.has(JSON.stringify(newPos))) {\n                        validVisited.add(JSON.stringify(newPos));\n                    }\n                    validVisited = this.getMovesSet(validVisited, maxDist-1, newPos);\n                }\n            }\n        }\n\n        return validVisited;\n    }\n\n    getAttacks() {\n        for (let y=this.pos.y-this.attackDist; y <= this.pos.y + this.attackDist; y++) {\n            for (let x=this.pos.x-this.attackDist; x <= this.pos.x + this.attackDist; x++) {\n                let newPos = {y: y, x: x};\n                if (isOnBoard(newPos)) {\n                    let square = this.board.grid.get(newPos);\n                    if (this.hasUnit(newPos) && square.last().team !== this.team) {\n                        this.attacks.push(newPos);\n                    }\n                }\n            }\n        }\n        return this.attacks;\n    }\n\n    hasUnit(pos) {\n        let square = this.board.grid.get(pos);\n        if (square.length > 0) {\n            let elemType = square.last().parentType();\n            if (elemType === 'Unit') {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    isUpgradable(currentPlayer) {\n        return this.team === currentPlayer.team &&\n            this.attack === this.pointStandard.attack &&\n            ((this.team === Board.PLAYER_TEAM && this.pos.y < Board.GRID_HEIGHT / 2) ||\n            (this.team === Board.ENEMY_TEAM && this.pos.y >= Board.GRID_HEIGHT / 2));\n    }\n\n    onHomeTerf() {\n        return (this.team === Board.PLAYER_TEAM && this.pos.y >= Board.GRID_HEIGHT / 2) ||\n            (this.team === Board.ENEMY_TEAM && this.pos.y < Board.GRID_HEIGHT / 2);\n    }\n}\n\nexport default Unit;","import Unit from \"../unit\";\n\nclass Archer extends Unit {\n    constructor(team, pos) {\n        super(team, pos);\n        this.attack = 1;\n        this.defense = 1;\n        this.attackDist = 2;\n        this.upgrade = {attack: 2, defense: 2}\n        this.pointStandard = {attack: 1, defense: 1}\n        this.image.src = \"./resources/archer.png\";\n    }\n}\n\nexport default Archer;","import Unit from \"../unit\";\n\nclass Defender extends Unit {\n    constructor(team, pos) {\n        super(team, pos);\n        this.attack = 1;\n        this.defense = 3;\n        //if attack is changed to 1, unit.isUpgradable returns true when unit is already upgraded\n        //because it checks if upgraded using attack points. Need to implement different check\n        //if making upgraded attack points equal to standard attack points\n        this.upgrade = {attack: 2, defense: 5}\n        this.pointStandard = {attack: 1, defense: 3}\n        this.image.src = \"./resources/defender.png\";\n    }\n}\n\nexport default Defender;","import Unit from \"../unit\";\n\nclass Infantry extends Unit {\n    constructor(team, pos) {\n        super(team, pos);\n        this.attack = 2;\n        this.defense = 2;\n        this.upgrade = {attack: 4, defense: 3}\n        this.pointStandard = {attack: 2, defense: 2}\n        this.image.src = \"./resources/infantry.png\";\n    }\n}\n\nexport default Infantry;","import Board from \"./board\";\nimport Barrack from \"./pieces/barrack\";\nimport Base from \"./pieces/base\";\nimport Treasure from \"./pieces/treasure\";\nimport Unit from \"./pieces/unit\";\nimport Archer from \"./pieces/units/archer\";\nimport Defender from \"./pieces/units/defender\";\nimport Infantry from \"./pieces/units/infantry\";\nimport { isOnBoard, isButton, willPlayAgain } from \"./utils\";\n\nclass View {\n    static SQUARE_DIM = 100;\n\n    constructor(game, ctx, el) {\n        this.game = game;\n        this.el = el;\n        this.ctx = ctx;\n        this.ratio = null;\n        this.images = this.renderImg();\n        this.drawBoard();\n        this.drawMenu({y: Board.GRID_HEIGHT, x: Board.GRID_WIDTH});\n        this.noMoreMoves = this.drawNoMoreMovesModule();\n    }\n\n    resetView(game) {\n        this.game = game;\n        this.ratio = null;\n        this.drawBoard();\n    }\n\n    clearBoard() {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    }\n\n    drawBoard(unitPos, clickedPos) {\n        this.clearBoard();\n        this.invisifyButtons();\n\n        this.images.background.onload(unitPos, clickedPos);\n    }\n\n    invisifyButtons() {\n        const e = [];\n        e.push(document.querySelector(\".about\"));\n        e.push(document.querySelector(\".rules\"));\n        e.push(document.querySelector(\".abouttitle\"));\n        e.push(document.querySelector(\".rulestitle\"));\n\n        e.forEach(e => {if (e) {e.style.visibility = 'hidden'}});\n    }\n\n    drawBoardWithoutOnload(unitPos, clickedPos) {\n        for (let y=0; y < Board.GRID_HEIGHT; y++) {\n            for (let x=0; x < Board.GRID_WIDTH; x++) {\n                this.drawGridSquare(x, y, \"darkgreen\");\n                this.drawGridElems({y: y, x: x}, unitPos, clickedPos);\n            }\n        }\n        this.drawMidline();\n\n        this.drawEndTurnButton();\n\n        this.ctx.font = \"40px Copperplate\";\n        this.game.currentPlayer.team === Board.ENEMY_TEAM ? this.ctx.fillStyle = \"red\" : this.ctx.fillStyle = \"blue\";\n        let str = \"Action Points: \" + this.game.actionPoints.toString();\n        this.ctx.strokeStyle = 'dimgrey';\n        this.ctx.lineWidth = 3;\n        this.ctx.strokeText(str, 10, (Board.GRID_HEIGHT+0.5) * View.SQUARE_DIM);\n        this.ctx.fillText(str, 10, (Board.GRID_HEIGHT+0.5) * View.SQUARE_DIM);\n\n        this.ctx.font = \"30px Copperplate\";\n        str = \"Troops: \" + this.game.currentPlayer.units.length.toString() + \"/8\";\n        this.ctx.strokeText(str, 10, (Board.GRID_HEIGHT+0.75) * View.SQUARE_DIM);\n        this.ctx.fillText(str, 10, (Board.GRID_HEIGHT+0.75) * View.SQUARE_DIM);\n    }\n\n    drawMidline() {\n        this.ctx.strokeStyle = 'lightskyblue';    \n        this.ctx.beginPath();\n        this.ctx.moveTo(0, Board.GRID_HEIGHT / 2 * View.SQUARE_DIM);\n        this.ctx.lineTo((Board.GRID_HEIGHT-1) * View.SQUARE_DIM, Board.GRID_HEIGHT / 2 * View.SQUARE_DIM);\n        this.ctx.stroke();\n    }\n\n    drawEndTurnButton() {\n        this.ctx.fillStyle = 'lightskyblue';        \n        this.ctx.fillRect(\n            View.SQUARE_DIM * 4,\n            (Board.GRID_HEIGHT+0.25) * View.SQUARE_DIM,\n            View.SQUARE_DIM * 1,\n            View.SQUARE_DIM * 0.5);\n        this.ctx.strokeStyle = 'cornflowerblue';\n        this.ctx.lineWidth = 1;\n        this.ctx.strokeRect(\n            View.SQUARE_DIM * 4,\n            (Board.GRID_HEIGHT+0.25) * View.SQUARE_DIM,\n            View.SQUARE_DIM * 1,\n            View.SQUARE_DIM * 0.5);\n        this.ctx.font = \"25px Copperplate\";\n        this.ctx.fillStyle = \"dimgrey\";\n        this.ctx.lineWidth = 2;\n        this.ctx.fillText(\"End\", 4.25 * View.SQUARE_DIM, (Board.GRID_HEIGHT+0.45) * View.SQUARE_DIM);\n        this.ctx.fillText(\"Turn\", 4.15 * View.SQUARE_DIM, (Board.GRID_HEIGHT+0.65) * View.SQUARE_DIM);\n    }\n\n    drawMenu(pos) {\n        const grid = document.createElement(\"ul\");\n        grid.classList.add(\"grid\");\n\n        grid.style.position = \"absolute\";\n        grid.style.right = \"7.5%\";\n        grid.style.bottom = \"calc(0.2% - 32px)\";\n        grid.style.width = \"calc(14.29% - 40px)\";\n        grid.style.height = \"5.85%\";\n\n        const cell = document.createElement(\"li\");\n        cell.classList.add(\"menu\")\n        cell.style.backgroundColor = \"lightskyblue\";\n        cell.style.border = \"1px solid cornflowerblue\";\n        cell.style.height = \"calc(100% - 2px)\";\n        cell.style.width = \"calc(100% - 2px)\";\n        cell.style.left = \"0px\";\n\n        cell.style.listStyle = \"none\";\n        cell.style.cursor = \"pointer\";\n        cell.innerHTML = \"Menu\"\n        cell.style.font = (25*this.ratio) + \"px Copperplate\"\n\n        cell.style.color = \"dimgrey\"\n        cell.style.textAlign = \"center\"\n        cell.style.lineHeight = \"200%\"\n        cell.classList.add(\"button\");\n\n        grid.appendChild(cell);\n        // this.el.appendChild(grid);\n        document.getElementsByClassName(\"background\")[0].appendChild(grid)\n\n        this.drawMenuOptions(pos, cell);\n        const ruleBox = this.drawRules(pos);\n        const aboutBox = this.drawAbout(pos);\n\n        const windowResize = window.onresize;\n        window.onresize = () => {\n            windowResize();\n\n            if (this.ratio < 0.67) {\n                this.ratio = 0.67;\n            }\n            ruleBox.style.font = (19*this.ratio - 2) + \"px Copperplate\"\n            ruleBox.style.lineHeight = \"100%\"\n            aboutBox.style.font = (20*this.ratio - 2) + \"px Copperplate\"\n            aboutBox.style.lineHeight = \"350%\"\n        }\n    }\n\n    drawMenuOptions(pos, cell) {\n        const menu = document.createElement(\"ul\");\n        menu.classList.add(\"menu\");\n\n        menu.style.position = \"absolute\";\n        menu.style.right = \"7.5%\";\n        menu.style.bottom = \"calc(5.85% - 16px)\";\n        menu.style.width = \"calc(14.29% - 42px)\";\n        menu.style.height = \"calc(5.85% - 2px)\";\n    \n        const rules = document.createElement(\"li\");\n        this.drawButton(\"Rules\", rules, {x: \"0%\", y: \"100%\"});\n        rules.classList.add(\"rules\");\n        const about = document.createElement(\"li\");\n        this.drawButton(\"About\", about, {x: \"0%\", y: \"0%\"});\n        about.classList.add(\"about\");\n\n        rules.style.font = 20*this.ratio + \"px Copperplate\";\n        rules.style.lineHeight = \"250%\"\n        about.style.font = 20*this.ratio + \"px Copperplate\";\n        about.style.lineHeight = \"250%\"\n\n        menu.appendChild(rules);\n        menu.appendChild(about);\n        menu.style.visibility = 'hidden'\n\n        window.onresize = () => {\n            this.ratio = Math.min(\n                window.innerHeight / this.ctx.canvas.height,\n                window.innerWidth / this.ctx.canvas.width\n            )\n            if (this.ratio < 0.67) {\n                this.ratio = 0.67;\n            }\n            cell.style.font = (25*this.ratio) + \"px Copperplate\"\n            cell.style.lineHeight = \"200%\"\n\n            rules.style.font = (20*this.ratio) + \"px Copperplate\"\n            rules.style.lineHeight = \"250%\"\n            about.style.font = (20*this.ratio) + \"px Copperplate\"\n            about.style.lineHeight = \"250%\"\n        }\n\n        // this.el.appendChild(menu);\n        document.getElementsByClassName(\"background\")[0].appendChild(menu)\n    }\n\n    drawRules(pos) {\n        const title = document.createElement(\"ul\");\n        title.classList.add(\"rulestitle\");\n        this.drawMenuDisplayBox(\"How To Play&nbsp;&nbsp;&nbsp;\", title, title);\n    \n        const rules = document.createElement(\"li\");\n        this.drawMenuInnerDisplayBox(\"Steal the enemy's treasure & bring it back to your base!<p>BUYING | Select the barracks to buy troops. All units can move up to 2 spaces in any direction. There are 3 types of troops:</p>-Infantry: Defense 2, Attack 1, Range 1<br>-Archer: Defense 1, Attack 1, Range 2<br>-Defender: Defense 3, Attack 1, Range 1<br><p>UPGRADING | When in enemy territory, units can be ugraded as follows:</p>-Infantry: Defense +1, Attack +2<br>-Archer: Defense +1, Attack +1<br>-Defender: Defense +2, Attack +1<br><p>Units cannot attack after upgrading until the next round. Stats return to normal once returning to friendly territory.</p><p>TREASURE | Pick up the treasure by moving a unit onto the square containing it. (You can only pick up enemy treasure.)</p><p>PRICE CHART<br>Moving or Attacking: 1 Action Point<br>Buying or Upgrading: 2 Action Points</p>\",\n        rules, title);\n        rules.style.font = \"12px Copperplate\";\n        if (this.ratio < 0.67) {\n            this.ratio = 0.67;\n        }\n        rules.style.font = (19*this.ratio - 2) + \"px Copperplate\"\n        rules.style.lineHeight = \"100%\";\n        rules.classList.add(\"rulesbox\");\n\n        title.appendChild(rules);\n        // title.style.visibility = 'hidden'\n        // this.el.appendChild(title);\n        document.getElementsByClassName(\"background\")[0].appendChild(title)\n        return rules;\n    }\n\n    drawAbout(pos) {\n        const title = document.createElement(\"ul\");\n        title.classList.add(\"abouttitle\");\n\n        this.drawMenuDisplayBox(\"About&nbsp;&nbsp;&nbsp;\", title, title);\n    \n        const about = document.createElement(\"li\");\n        this.drawMenuInnerDisplayBox(\"<br><br><p>Game developed by <a href='https://www.linkedin.com/in/jdirksen/'>Jasmine Kobata</a></p><p><a href='https://github.com/JasmineKobata/Javascript-Project'>Treasure Wars! GitHub Repo</p><p><a href='https://www.appacademy.io/'>App Academy</a> Javascript Project</p>\", about, title);\n        if (this.ratio < 0.67) {\n            this.ratio = 0.67;\n        }\n        about.style.font = (20*this.ratio - 2) + \"px Copperplate\";\n        about.style.lineHeight = \"350%\"\n        about.classList.add(\"aboutbox\");\n\n        title.appendChild(about);\n        title.style.visibility = 'hidden'\n        // this.el.appendChild(title);\n        document.getElementsByClassName(\"background\")[0].appendChild(title)\n        return about;\n    }\n\n    drawMenuDisplayBox(str, box, title) {\n        box.style.width = \"calc(75% - 42px)\"\n        box.style.height = \"calc(75% - 2px)\"\n        box.style.backgroundColor = \"lightskyblue\";\n        box.style.border = \"1px solid cornflowerblue\";\n        box.style.position = \"absolute\";\n        box.style.left = \"50%\";\n        box.style.top = \"45%\";\n        box.style.transform = \"translate(-50%, -50%)\";\n        box.style.margin = \"0px\"\n        box.style.listStyle = \"none\";\n        box.style.cursor = \"pointer\";\n        box.innerHTML = str;\n        if (this.ratio < 0.67) {\n            this.ratio = 0.67;\n        }\n        box.style.font = (30*this.ratio - 2) + \"px Copperplate\"\n        box.style.color = \"dimgrey\"\n        box.style.textAlign = \"center\"\n        box.style.lineHeight = \"250%\";\n\n        const windowResize = window.onresize;\n        window.onresize = () => {\n            windowResize();\n\n            if (this.ratio < 0.67) {\n                this.ratio = 0.67;\n            }\n            box.style.font = (30*this.ratio - 2) + \"px Copperplate\"\n            box.style.lineHeight = \"250%\";\n        }\n    }\n\n    drawMenuInnerDisplayBox(str, box, title) {\n        box.style.width = \"calc(80% - 42px)\"\n        box.style.height = \"calc(80% - 2px)\"\n        box.style.backgroundColor = \"cornflowerblue\";\n        box.style.border = \"1px solid cornflowerblue\";\n        box.style.position = \"absolute\";\n        box.style.left = \"50%\";\n        box.style.top = \"50%\";\n        box.style.transform = \"translate(-50%, -50%)\";\n        // box.style.margin = \"0px\";\n        box.style.listStyle = \"none\";\n        box.style.cursor = \"pointer\";\n        box.innerHTML = str;\n        box.style.font = \"25px Copperplate\"\n        box.style.color = \"white\"\n    }\n\n    drawButton(str, cell, pos) {\n        cell.style.backgroundColor = \"lightskyblue\";\n        cell.style.border = \"1px solid cornflowerblue\";\n        cell.style.width = \"100%\";\n        cell.style.height = \"100%\";\n        cell.style.position = \"absolute\";\n        cell.style.right = pos.x;\n        cell.style.bottom = pos.y;\n        cell.style.margin = \"0px\"\n        cell.style.listStyle = \"none\";\n        cell.style.cursor = \"pointer\";\n        cell.innerHTML = str\n        cell.style.color = \"dimgrey\"\n        cell.style.textAlign = \"center\"\n    }\n\n    updateNoMoreMovesStr() {\n        let str = \"<br>No Moves Left!</br>\";\n        str += this.game.currentPlayer.team === Board.PLAYER_TEAM ? \"Red\" : \"Blue\";\n        str += \"'s Turn?\"\n        return str;\n    }\n\n    drawNoMoreMovesModule() {\n        const background = document.createElement(\"div\");\n        background.classList.add(\"movesBackground\")\n        background.style.width = \"100%\";\n        background.style.height = \"100%\";\n        background.style.position = \"absolute\";\n        background.style.top = \"0px\";\n        background.style.visibility = \"hidden\";\n\n        const module = document.createElement(\"ul\");\n        module.classList.add(\"noMoreMoves\");\n\n        module.style.width = \"calc(40% - 42px)\"\n        module.style.height = \"calc(18% - 2px)\"\n        module.style.backgroundColor = \"lightskyblue\";\n        module.style.border = \"1px solid cornflowerblue\";\n        module.style.position = \"absolute\";\n        module.style.left = \"50%\";\n        module.style.top = \"45%\";\n        module.style.transform = \"translate(-50%, -50%)\";\n        module.style.margin = \"0px\"\n        module.style.paddingLeft = \"10px\";\n        module.style.paddingRight = module.style.paddingLeft;\n        module.style.listStyle = \"none\";\n        module.style.cursor = \"pointer\";\n        module.style.font = (27*this.ratio - 2) + \"px Copperplate\"\n        module.style.color = \"dimgrey\"\n        module.style.textAlign = \"center\"\n        \n        const button = document.createElement(\"li\");\n        button.classList.add(\"movesButton\");\n        button.innerHTML = \"OK\"\n        button.style.width = \"50%\"\n        button.style.height = \"calc(18% - 2px)\"\n        button.style.backgroundColor = \"cornflowerblue\";\n        button.style.border = \"1px solid cornflowerblue\";\n        button.style.marginLeft = \"auto\";\n        button.style.marginRight = \"auto\";\n        button.style.marginTop = \"11%\"\n        button.style.color = \"white\"\n\n        const windowResize = window.onresize;\n        window.onresize = () => {\n            windowResize();\n\n            if (this.ratio < 0.67) {\n                this.ratio = 0.67;\n            }\n            module.style.font = (27*this.ratio - 2) + \"px Copperplate\"\n            // ruleBox.style.lineHeight = \"100%\"\n        }\n\n        module.appendChild(button);\n        background.appendChild(module);\n        document.getElementsByClassName(\"background\")[0].appendChild(background)\n\n        // this.bindMovesButton();\n        return background;\n    }\n\n    drawWinningScreen() {\n        let img = new Image();\n        img.src = './resources/wood.png';\n        img.onload = () => {\n            this.ctx.drawImage(\n                img,\n                View.SQUARE_DIM * Math.floor((Board.GRID_WIDTH-2) / 2),\n                View.SQUARE_DIM * (Math.floor((Board.GRID_HEIGHT-2) / 2)+0.25),\n                View.SQUARE_DIM * 3, View.SQUARE_DIM * 1.5);\n            this.ctx.beginPath();\n            this.ctx.stroke();\n\n            this.ctx.font = \"30px Copperplate\";\n            this.ctx.lineWidth = 3;\n            let str = \"\";\n            if (this.game.currentPlayer.team === Board.PLAYER_TEAM) {\n                this.ctx.fillStyle = \"blue\";\n                this.ctx.strokeStyle = \"darkblue\";\n                str += \"Blue\";\n            } else {\n                this.ctx.fillStyle = \"red\";\n                this.ctx.strokeStyle = \"maroon\";\n                str += \"Red\";\n            }\n            str += \" Victory!\"\n            this.ctx.strokeText(str,\n                View.SQUARE_DIM * (Board.GRID_WIDTH / 2 - 1),\n                View.SQUARE_DIM * (Board.GRID_HEIGHT / 2 - 0.25));\n            this.ctx.fillText(str,\n                View.SQUARE_DIM * (Board.GRID_WIDTH / 2 - 1),\n                View.SQUARE_DIM * (Board.GRID_HEIGHT / 2 - 0.25));\n            \n            this.drawPlayAgainButton();\n        };\n    }\n\n    drawPlayAgainButton() {\n        this.ctx.lineWidth = 2;\n        this.ctx.fillStyle = 'cornflowerblue';  \n        this.ctx.strokeStyle = '#543000';      \n        this.ctx.fillRect(\n            View.SQUARE_DIM * (Board.GRID_WIDTH / 2 - 0.75),\n            View.SQUARE_DIM * (Math.floor((Board.GRID_HEIGHT) / 2)),\n            View.SQUARE_DIM * 1.5,\n            View.SQUARE_DIM * 0.5);\n        this.ctx.strokeRect(\n            View.SQUARE_DIM * (Board.GRID_WIDTH / 2 - 0.75),\n            View.SQUARE_DIM * (Math.floor((Board.GRID_HEIGHT) / 2)),\n            View.SQUARE_DIM * 1.5,\n            View.SQUARE_DIM * 0.5);\n        this.ctx.strokeStyle = 'blue';\n        this.ctx.font = \"24px Copperplate\";\n        this.ctx.lineWidth = 1;\n        this.ctx.fillStyle = \"white\";\n        this.ctx.strokeStyle = \"grey\"\n        this.ctx.strokeText(\"Play Again?\",\n            View.SQUARE_DIM * (Board.GRID_WIDTH / 2 - 0.70),\n            View.SQUARE_DIM * (Board.GRID_HEIGHT / 2 + 0.3));\n        this.ctx.fillText(\"Play Again?\",\n            View.SQUARE_DIM * (Board.GRID_WIDTH / 2 - 0.70),\n            View.SQUARE_DIM * (Board.GRID_HEIGHT / 2 + 0.3));\n    }\n\n    drawUpgradeConfirmation(pos) {\n        this.ctx.fillStyle = 'lightskyblue';        \n        this.ctx.fillRect(\n            View.SQUARE_DIM * pos.x,\n            View.SQUARE_DIM * pos.y,\n            View.SQUARE_DIM * 1,\n            View.SQUARE_DIM * 0.35);\n        this.ctx.strokeStyle = 'cornflowerblue';\n        this.ctx.strokeRect(\n            View.SQUARE_DIM * pos.x,\n            View.SQUARE_DIM * pos.y,\n            View.SQUARE_DIM * 1,\n            View.SQUARE_DIM * 0.35);\n        this.ctx.lineWidth = 1;\n        this.ctx.font = \"20px Copperplate\";\n        this.ctx.fillStyle = \"dimgrey\";\n        this.ctx.fillText(\"Upgrade?\",\n            View.SQUARE_DIM * pos.x,\n            View.SQUARE_DIM * (pos.y + 0.25));\n    }\n\n    drawBarrackSelection(pos) {\n        let newPos = this.adjustMenuPosition(pos);\n        this.team === Board.ENEMY_TEAM ? this.ctx.fillStyle = \"red\" : this.ctx.fillStyle = \"blue\";\n        let troopSelection = [];\n            this.images.barrack.onload(newPos);\n\n        this.ctx.font = \"30px Copperplate\";\n        this.ctx.fillStyle = \"white\";\n        this.ctx.lineWidth = 3;\n        this.ctx.fillText(\"Buy New Troop?\",\n            View.SQUARE_DIM * (newPos.x + 0.35),\n            View.SQUARE_DIM * (newPos.y + 0.35));\n    \n        let inf = new Infantry(this.game.currentPlayer.team, {y: newPos.y+0.5, x: newPos.x});\n        let arch = new Archer(this.game.currentPlayer.team, {y: newPos.y+0.5, x: newPos.x+1});\n        let def = new Defender(this.game.currentPlayer.team, {y: newPos.y+0.5, x: newPos.x+2});\n        inf.board = this.game.board;\n        arch.board = this.game.board;\n        def.board = this.game.board;\n        inf.view = this.game.view;\n        arch.view = this.game.view;\n        def.view = this.game.view;\n        troopSelection.push(inf);\n        troopSelection.push(arch);\n        troopSelection.push(def);\n        troopSelection.forEach( (unit) => {\n            unit.draw(this.ctx, this.game.currentPlayer);\n        });\n        return troopSelection;\n    }\n\n    adjustMenuPosition(pos) {\n        let newPos = {};\n        pos.x === 0 ? newPos.x = pos.x + 0.25 : newPos.x = pos.x - 2.25;\n        pos.y === 0 ? newPos.y = pos.y + 0.5 : newPos.y = pos.y - 1;\n        return newPos;\n    }\n\n    drawOutline(pos) {\n        this.ctx.strokeStyle = 'yellow';\n        this.ctx.lineWidth = 10;\n        this.ctx.strokeRect(\n            View.SQUARE_DIM * pos.x,\n            View.SQUARE_DIM * pos.y,\n            View.SQUARE_DIM,\n            View.SQUARE_DIM\n        )\n    }\n\n    drawMoveHighlights(pos) {\n        this.drawGridSquare(pos.x, pos.y, 'seagreen', \"mediumseagreen\");\n    }\n\n    drawAttackHighlights(pos) {\n        this.drawGridSquare(pos.x, pos.y, \"cornflowerblue\", \"lightskyblue\")\n    }\n\n    drawGridElems(pos, unitPos, clickedPos) {\n        let gridSquare = this.game.board.grid.get(pos);\n        for (let i=0; i < gridSquare.length; i++) {\n            gridSquare[i].draw(this.ctx, this.game.currentPlayer, unitPos, clickedPos);\n        }\n        this.ctx.beginPath();\n    }\n\n    drawGridSquare(x, y, outlineColor, fillColor) {\n        if (fillColor) {\n            this.ctx.fillStyle = fillColor;\n            this.ctx.globalAlpha = 0.60;\n            this.ctx.fillRect(\n                View.SQUARE_DIM * x,\n                View.SQUARE_DIM * y,\n                View.SQUARE_DIM,\n                View.SQUARE_DIM\n            )\n        }\n        this.ctx.strokeStyle = outlineColor;\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(\n            View.SQUARE_DIM * x,\n            View.SQUARE_DIM * y,\n            View.SQUARE_DIM,\n            View.SQUARE_DIM\n        )\n        this.ctx.globalAlpha = 1;\n    }\n\n    renderImg() {\n        let pixelWidth = Board.GRID_WIDTH * View.SQUARE_DIM;\n        let pixelHeight = (Board.GRID_HEIGHT+1) * View.SQUARE_DIM;\n        this.ctx.canvas.width = pixelWidth;\n        this.ctx.canvas.height = pixelHeight;\n        this.ratio = Math.min(\n            window.innerHeight / this.ctx.canvas.height,\n            window.innerWidth / this.ctx.canvas.width\n        )\n        // this.ctx.scale(this.ratio, this.ratio);\n        let images = {};\n        images.background = new Image();\n        images.background.src = \"./resources/grass2.png\";\n        images.background.onload = (unitPos, clickedPos) => {\n            this.ctx.drawImage(\n                images.background, 0, 0,\n               pixelWidth, pixelHeight,\n               0, 0,\n               pixelWidth, pixelHeight);\n            this.ctx.beginPath();\n            this.ctx.stroke();\n            this.drawBoardWithoutOnload(unitPos, clickedPos);\n        }\n\n        images.barrack = new Image();\n        images.barrack.src = \"./resources/wood.png\";\n        images.barrack.onload = (pos) => {\n            this.ctx.drawImage(\n                images.barrack,\n                View.SQUARE_DIM * pos.x,\n                View.SQUARE_DIM * pos.y,\n                View.SQUARE_DIM * 3, View.SQUARE_DIM * 1.5);\n            this.ctx.beginPath();\n            this.ctx.stroke();\n        };\n\n        return images;\n    }\n\n    // background.classList.add(\".movesBackground\")\n    // module.classList.add(\".noMoreMoves\");\n    // button.classList.add(\".movesButton\");\n\n    bindEvents(ctx) {\n        const button = document.querySelector(\".button\");\n        button.addEventListener(\"click\", this.handleButton.bind(this));\n        const about = document.querySelector(\".about\");\n        if (about) {about.addEventListener(\"click\", this.handleAbout.bind(this));}\n        const rules = document.querySelector(\".rules\");\n        if (rules) {rules.addEventListener(\"click\", this.handleRules.bind(this));}\n        ctx.canvas.addEventListener('click', this.handleClick.bind(this));\n        document.addEventListener(\"click\", this.handleBackground.bind(this));\n        this.bindMovesButton();\n    }\n\n    bindMovesButton() {\n        const movesBackground = document.querySelector(\".movesBackground\");\n        if (movesBackground) {\n            movesBackground.addEventListener(\"click\", this.handleMovesBackground.bind(this, movesBackground))\n        };\n        const movesButton = document.querySelector(\".movesButton\");\n        if (movesButton) {\n            movesButton.addEventListener(\"click\", this.handleMovesButton.bind(this, movesBackground))\n        };\n        return movesButton;\n    }\n\n    handleAbout(event) {\n        const e = document.querySelector(\".abouttitle\");\n        this.invisifyButtons();\n        e.style.visibility = 'visible';\n    }\n\n    handleRules(event) {\n        const e = document.querySelector(\".rulestitle\");\n        this.invisifyButtons();\n        e.style.visibility = 'visible';\n    }\n\n    handleButton(event) {\n        const e1 = document.querySelector(\".about\")\n        const e2 = document.querySelector(\".rules\")\n\n        this.invisifyButtons();\n        e1.style.visibility = 'visible';\n        e2.style.visibility = 'visible';\n    }\n\n    handleClick(event) {\n        let x = Math.floor(event.offsetX / (View.SQUARE_DIM * this.ratio))\n        let y = Math.floor(event.offsetY / (View.SQUARE_DIM * this.ratio))\n        let xExact = event.offsetX / (View.SQUARE_DIM * this.ratio);\n        let yExact = event.offsetY / (View.SQUARE_DIM * this.ratio);\n        let pos = {y, x};\n        let posExact = {y: yExact, x: xExact};\n\n        if (this.game.board.isWon()) {\n        //    this.drawWinningScreen();\n            if (willPlayAgain(posExact)) {\n                this.game.resetGame(this);\n                this.drawBoard();\n            }\n        } else {\n            this.drawBoard();\n            if (isOnBoard(pos)) {\n                this.game.ctx.clickedPos = pos\n                this.game.ctx.exactPos = posExact;\n                this.game.stateMachine();\n            } else if (isButton(posExact)) {\n                this.game.switchPlayers();\n                this.drawBoard();\n            }\n        }\n    }\n\n    handleBackground(event) {\n        if (!document.querySelector(\".background\").contains(event.target)) {\n            this.drawBoard();\n            this.game.state = \"unselected\";\n            const movesBackground = document.querySelector(\".movesBackground\");\n            if (movesBackground) movesBackground.style.visibility = \"hidden\";\n        }\n    }\n\n    handleMovesButton(movesBackground, event) {\n        this.game.switchPlayers();\n        movesBackground.style.visibility = \"hidden\";\n        this.drawBoard();\n    }\n\n    handleMovesBackground(movesBackground, event) {\n        if (!document.querySelector(\".noMoreMoves\").contains(event.target)) {\n            movesBackground.style.visibility = \"hidden\";\n        }\n    }\n}\n\nfunction drawUpgradeButton(unit, ctx, x, y) {\n    unit.team === Board.ENEMY_TEAM ? ctx.fillStyle = \"red\" : ctx.fillStyle = \"blue\";\n    ctx.beginPath();\n    ctx.arc(\n        View.SQUARE_DIM * x + View.SQUARE_DIM * .15,\n        View.SQUARE_DIM * y + View.SQUARE_DIM * .15,\n        View.SQUARE_DIM * .1,\n        0, 2.0 * Math.PI);\n    ctx.fill();\n\n    ctx.fillStyle = \"white\";\n    ctx.font = \"30px Copperplate\";\n    ctx.fillText(\"+\", View.SQUARE_DIM * x + View.SQUARE_DIM * 0.06,\n    View.SQUARE_DIM * y + View.SQUARE_DIM * .22);\n}\n\nfunction drawStats(unit, ctx, x, y) {\n    unit.team === Board.ENEMY_TEAM ? ctx.fillStyle = \"red\" : ctx.fillStyle = \"blue\";\n    ctx.font = \"35px Copperplate\";\n    ctx.strokeStyle = 'dimgrey';\n    ctx.lineWidth = 3;\n    ctx.strokeText(\n        \"A\"+unit.attack.toString(),\n        View.SQUARE_DIM * x + View.SQUARE_DIM * .3,\n        View.SQUARE_DIM * y + View.SQUARE_DIM * .50);\n    ctx.strokeText(\n        \"D\"+unit.defense.toString(),\n        View.SQUARE_DIM * x + View.SQUARE_DIM * .3,\n        View.SQUARE_DIM * y + View.SQUARE_DIM * .75);\n    ctx.fillText(\n        \"A\"+unit.attack.toString(),\n        View.SQUARE_DIM * x + View.SQUARE_DIM * .3,\n        View.SQUARE_DIM * y + View.SQUARE_DIM * .50);\n    ctx.fillText(\n        \"D\"+unit.defense.toString(),\n        View.SQUARE_DIM * x + View.SQUARE_DIM * .3,\n        View.SQUARE_DIM * y + View.SQUARE_DIM * .75);\n}\n\nBarrack.prototype.draw = function(ctx) {\n    this.team === Board.ENEMY_TEAM ? ctx.fillStyle = \"red\" : ctx.fillStyle = \"blue\";\n    ctx.fillRect(\n        View.SQUARE_DIM * this.pos.x + View.SQUARE_DIM * .10,\n        View.SQUARE_DIM * this.pos.y + View.SQUARE_DIM * .70,\n        View.SQUARE_DIM * .80,\n        View.SQUARE_DIM * .20);\n\n    this.image.onload = () => {\n        ctx.drawImage(\n            this.image,\n            View.SQUARE_DIM * this.pos.x,\n            View.SQUARE_DIM * this.pos.y,\n            View.SQUARE_DIM, View.SQUARE_DIM);\n        ctx.beginPath();\n        ctx.stroke();\n    };\n    this.image.onload();\n}\n\nBase.prototype.draw = function(ctx) {\n    this.team === Board.ENEMY_TEAM ? ctx.fillStyle = \"red\" : ctx.fillStyle = \"blue\";\n    ctx.beginPath();\n    ctx.arc(\n        View.SQUARE_DIM * this.pos.x + View.SQUARE_DIM * .50,\n        View.SQUARE_DIM * this.pos.y + View.SQUARE_DIM * .50,\n        View.SQUARE_DIM * .35,\n        0, 2.0 * Math.PI);\n    ctx.fill();\n}\n\nTreasure.prototype.draw = function(ctx) {\n    this.image.onload = () => {\n        ctx.drawImage(\n            this.image,\n            View.SQUARE_DIM * this.pos.x,\n            View.SQUARE_DIM * this.pos.y,\n            View.SQUARE_DIM, View.SQUARE_DIM);\n        ctx.beginPath();\n        ctx.stroke();\n    };\n    this.image.onload();\n}\n\nexport function drawUpgradeConfirmation(ctx, pos) {\n    ctx.fillStyle = 'lightskyblue';        \n    ctx.fillRect(\n        View.SQUARE_DIM * pos.x,\n        View.SQUARE_DIM * pos.y,\n        View.SQUARE_DIM * 1,\n        View.SQUARE_DIM * 0.35);\n    ctx.strokeStyle = 'cornflowerblue';\n    ctx.strokeRect(\n        View.SQUARE_DIM * pos.x,\n        View.SQUARE_DIM * pos.y,\n        View.SQUARE_DIM * 1,\n        View.SQUARE_DIM * 0.35);\n    ctx.lineWidth = 1;\n    ctx.font = \"20px Copperplate\";\n    ctx.fillStyle = \"dimgrey\";\n    ctx.fillText(\"Upgrade?\",\n        View.SQUARE_DIM * pos.x,\n        View.SQUARE_DIM * (pos.y + 0.25));\n}\n\nUnit.prototype.draw = function(ctx, currentPlayer, unitPos, clickedPos) {\n    this.team === Board.ENEMY_TEAM ? ctx.fillStyle = \"red\" : ctx.fillStyle = \"blue\";\n\n    this.image.onload = () => {\n        ctx.drawImage(\n            this.image,\n            View.SQUARE_DIM * this.pos.x,\n            View.SQUARE_DIM * this.pos.y,\n            View.SQUARE_DIM, View.SQUARE_DIM);\n        ctx.beginPath();\n        ctx.stroke();\n        drawStats(this, ctx, this.pos.x, this.pos.y);\n        if (this.isUpgradable(currentPlayer)) {\n            drawUpgradeButton(this, ctx, this.pos.x, this.pos.y);\n            if (unitPos && clickedPos) {\n                drawUpgradeConfirmation(ctx, unitPos);\n            }\n        }\n    };\n    this.image.onload();\n    // this.image.src = this.image.src;\n}\n\nexport default View;","class Player {\n    constructor(team, treasure, base) {\n        this.team = team;\n        this.units = [];\n        this.treasure = treasure;\n        this.base;\n    }\n\n    removeUnit(unit) {\n        let found = false;\n        let i = 0;\n        while (!found && i < this.units.length) {\n            if (this.units[i++].pos.equals(unit.pos)) {\n                found = true;\n            }\n        }\n        let u = this.units.splice(i-1, 1);\n        // console.log(this.units, u )\n        return this.units;\n    }\n}\n\nexport default Player;","import Player from \"./player\";\n\nclass HumanPlayer extends Player {\n    constructor(team) {\n        super(team);\n    }\n}\n\nexport default HumanPlayer;","import View from './view.js';\nimport Game from './game.js';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const canvas = document.getElementById('treasure-game');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    const ctx = canvas.getContext(\"2d\");\n    const el = document.querySelector('.buttons');\n\n    const game = new Game();\n    const view = new View(game, ctx, el);\n    game.view = view;\n\n    view.bindEvents(ctx);\n});","import Board from \"./board\";\nimport HumanPlayer from \"./humanPlayer\";\nimport { isUpgradeButton, isUpgradeConfirmation } from \"./utils\";\n\nclass Game {\n    constructor() {\n        this.board = new Board();\n        this.view = null;\n        this.state = 'unselected';\n        this.player = new HumanPlayer(Board.PLAYER_TEAM);\n        this.enemy = new HumanPlayer(Board.ENEMY_TEAM);\n        this.currentPlayer = this.player;\n        this.actionPoints = 4;\n        this.ctx = {}; //{ clickedPos, selectedSquare }\n    }\n\n    resetGame(view) {\n        this.board = new Board();\n        this.view = view;\n        this.state = 'unselected';\n        this.player = new HumanPlayer(Board.PLAYER_TEAM);\n        this.enemy = new HumanPlayer(Board.ENEMY_TEAM);\n        this.currentPlayer = this.player;\n        this.actionPoints = 4;\n        this.ctx = {};\n    }\n\n    switchPlayers() {\n        this.board.grid.forEach((col) => {\n            col.forEach((row) => {\n                row.forEach((e) => {\n                    if (e.parentType() === 'Unit') {\n                        e.hasMoved = false;\n                        e.hasAttacked = false;\n                        e.hasUpgraded = false;\n                    }\n                })\n            })\n        })\n        this.actionPoints = 4;\n        this.state = 'unselected';\n        this.currentPlayer === this.player ? this.currentPlayer = this.enemy : this.currentPlayer = this.player;\n    }\n\n    //ctx -> {clickedPos always set, selectedSquare that will be set in unselected stage}\n    stateMachine() {\n        let square = this.board.grid.get(this.ctx.clickedPos);\n        console.log(square);\n        switch (this.state) {\n            case 'unselected':\n                //if unit upgrade is selected\n                if (this.unitUpgradeable(this.ctx.exactPos, square.last())) {\n                    this.ctx.selectedSquare = square;\n                    this.state = 'upgrade';\n                } //if unit is selected\n                else if (this.unitSelected(square.last())) {\n                    this.ctx.selectedSquare = square;\n                    this.state = 'unit';\n                } //else if barrack is selected\n                else if (this.actionPoints > 1 && this.currentPlayer.units.length < 8\n                    && this.barrackSelected(square.first())) {\n                    this.ctx.menu = this.view.drawBarrackSelection(square.first().pos);\n                    this.ctx.selectedSquare = square;\n                    this.state = 'barrack';\n                }\n                break;\n            case 'unit':\n                //if action taken\n                if (this.actionTaken(this.ctx.clickedPos, this.ctx.selectedSquare)) {\n                    this.ctx = {};\n                    this.state = 'unselected';\n                    // this.view.drawBoard();\n                    if (this.board.isWon()) {\n                        this.view.drawBoard();\n                        this.view.drawWinningScreen();\n                    } else {\n                        if (this.actionPoints === 0) { this.switchPlayers(); }\n                        this.view.drawBoard();\n                    }\n                } //else if action not taken\n                else {\n                    this.view.drawBoard();\n                    if (this.unitUpgradeable(this.ctx.exactPos, square.last())) {\n                        this.state = 'upgrade'\n                    }\n                    else if (this.unitSelected(square.last())) {}\n                    else if (this.actionPoints > 1 && this.currentPlayer.units.length < 8\n                        && this.barrackSelected(square.first())) {\n                        this.ctx.menu = this.view.drawBarrackSelection(square.first().pos);\n                        this.state = 'barrack';\n                    }\n                    else {\n                        this.state = 'unselected';\n                    }\n                    this.ctx.selectedSquare = square;\n                }\n                this.noMoreMovesDisplay();\n                break;\n            case 'barrack':\n                //if unit is bought\n                if (this.unitBought(this.ctx.exactPos, this.ctx.menu, this.ctx.selectedSquare)) {\n                    this.ctx = {};\n                    this.state = 'unselected';\n                    if (this.actionPoints === 0) { this.switchPlayers(); }\n                    this.view.drawBoard();\n                } //else if unit is not bought\n                else {\n                    this.view.drawBoard();\n                    if (this.unitUpgradeable(this.ctx.exactPos, square.last())) {\n                        this.state = 'upgrade'\n                    }\n                    else if (this.unitSelected(square.last())) {\n                        this.state = 'unit';\n                    }\n                    else if (this.barrackSelected(square.first())) {\n                        this.ctx.menu = this.view.drawBarrackSelection(square.first().pos);\n                    } else {\n                        this.state = 'unselected';\n                    }\n                    this.ctx.selectedSquare = square;\n                }\n                this.noMoreMovesDisplay();\n                break;\n            case 'upgrade':\n                //if unit is upgraded\n                if (this.unitUpgraded(this.ctx.exactPos, this.ctx.selectedSquare)) {\n                    this.state = 'unselected';\n                    if (this.actionPoints === 0) { this.switchPlayers(); }\n                    this.view.drawBoard();\n                }\n                else {\n                    this.view.drawBoard();\n                    //if another unit upgrade is selected\n                    if (this.unitUpgradeable(this.ctx.exactPos, square.last())) {\n                    } //else if a unit is selected\n                    else if (this.unitSelected(square.last())) {\n                        this.state = 'unit';\n                    } //else if a barrack is selected\n                    else if (this.actionPoints > 1 && this.currentPlayer.units.length < 8\n                        && this.barrackSelected(square.first())) {\n                        this.ctx.menu = this.view.drawBarrackSelection(square.first().pos);\n                        this.state = 'barrack';\n                    } else {\n                        this.state = 'unselected';\n                    }\n                    this.ctx.selectedSquare = square;\n                }\n                this.noMoreMovesDisplay();\n                break;\n            default:\n                // console.log(\"ERROR: undefined state\");\n        }\n    }\n\n    noMoreMovesDisplay() {\n        if (!this.movesAvailable() && this.actionPoints < 4) {\n            const noMoreMoves = this.view.noMoreMoves.querySelector(\".noMoreMoves\");\n            const button = noMoreMoves.querySelector(\".movesButton\")\n        \n            noMoreMoves.innerHTML = this.view.updateNoMoreMovesStr();\n            noMoreMoves.appendChild(button);\n            \n            this.view.noMoreMoves.style.visibility = \"visible\"\n        }\n    }\n\n    movesAvailable() {\n        let bool = false;\n        this.currentPlayer.units.forEach(unit => {\n            bool ||= !unit.hasMoved;\n            if (!unit.hasAttacked) {\n                unit.getAttacks();\n            }\n            bool ||= !unit.hasUpgraded && unit.attacks.length > 0;\n            bool ||= this.actionPoints > 1 && unit.isUpgradable(this.currentPlayer);\n            bool ||= this.actionPoints > 1 && this.barracksEmpty();\n        })\n        return bool;\n    }\n\n    barracksEmpty() {\n        let barracks;\n        if (this.currentPlayer === this.player) {\n            barracks = this.board.barracks.player;\n        } else {\n            barracks = this.board.barracks.enemy;\n        }\n\n        let res = false;\n        barracks.forEach(b => {\n            let bool = true;\n            const barrackSquare = this.board.grid.get(b.pos)\n            barrackSquare.forEach(unit => {\n                if (unit.parentType() === 'Unit') bool = false;\n            })\n            res ||= bool;\n        })\n        return res;\n    }\n\n    unitUpgradeable(pos, unit) {\n        let unitUpgradeable = false;\n        if (this.actionPoints > 1 && unit && unit.parentType() === 'Unit' &&\n            unit.isUpgradable(this.currentPlayer) && isUpgradeButton(unit.pos, pos)) {\n                unitUpgradeable = true;\n                this.view.drawBoard(unit.pos, pos);\n        }\n        return unitUpgradeable;\n    }\n\n    unitUpgraded(pos, square) {\n        let unitUpgraded = false;\n        let unit = square.last();\n        if (unit && unit.parentType() === 'Unit' &&\n            unit.isUpgradable(this.currentPlayer) && isUpgradeConfirmation(unit.pos, pos)) {\n                unit.upgrades();\n                this.actionPoints -= 2;\n                unitUpgraded = true;\n        }\n        return unitUpgraded;\n    }\n\n    unitSelected(unit) {\n        let unitSelected = false;\n        if (unit && unit.parentType() === 'Unit' && unit.team === this.currentPlayer.team) {\n            unit.resetActions(); //reset newly selected unit's action squares\n            if (!unit.board) { unit.board = this.board; }\n            if (!unit.view) { unit.view = this.view; }\n\n            this.unitCallDrawSelected(unit, this.view);\n            unitSelected = true;\n        }\n        return unitSelected;\n    }\n\n    unitCallDrawSelected(unit, view) {\n        if (!unit.hasMoved) {\n            unit.getMoves().forEach((pos) => {\n                view.drawMoveHighlights(pos);\n                view.drawGridElems(pos);\n            });\n        }\n\n        if (!unit.hasAttacked && !unit.hasUpgraded) {\n            unit.getAttacks().forEach((pos) => {\n                view.drawAttackHighlights(pos);\n                view.drawGridElems(pos);\n            })\n        }\n        view.drawOutline(unit.pos);\n    }\n\n    barrackSelected(barrack) {\n        return barrack && barrack.type() === 'Barrack' && barrack.team === this.currentPlayer.team;\n    }\n\n    unitBought(pos, menu, square) {\n        let unitBought = false;\n        let newPos = this.adjustMenuPosition(square.first(), pos);\n        let unit;\n        if (unit = menu.find(e => e.pos.x === newPos.x && e.pos.y === newPos.y)) {\n            unit.pos = square.first().pos;\n            square.push(unit);\n            this.currentPlayer.units.push(unit);\n            this.actionPoints -= 2;\n            unitBought = true;\n        }\n\n        return unitBought;\n    }\n\n    adjustMenuPosition(barrack, pos) {\n        let xDifference = barrack.pos.x === 0 ? -0.25 : 0.25;\n        let yDifference = barrack.pos.y === 0 ? -1 : 0.5;\n        let x = Math.floor((pos.x + xDifference));\n        let y = Math.floor((pos.y + yDifference));\n        let newPos = {};\n        newPos.x = barrack.pos.x === 0 ? x + 0.25 : x - 0.25;\n        newPos.y = barrack.pos.y === 0 ? y + 1 : y - 0.5;\n        return newPos;\n    }\n\n    actionTaken(pos, square) {\n        return this.moveUnit(pos, square) || this.attackUnit(pos, square);\n    }\n\n    moveUnit(pos, square) {\n        let unitMoved = false;\n        let unit = square.last();\n \n        if (unit.moves && unit.moves.find(e => e.x === pos.x && e.y === pos.y)) {\n            unit.pos = pos; //reset unit position;\n            if (unit.onHomeTerf()) {\n                unit.downgrade();\n            }\n            square.pop();\n            let treasureIdx = this.getTreasureIdx(square);\n            if (treasureIdx !== null) {\n                square[treasureIdx].pos = pos;\n                this.board.grid.get(pos).push(square[treasureIdx]);\n                square.splice(treasureIdx, 1);\n            }\n            this.board.grid.get(pos).push(unit);\n\n            this.actionPoints--;\n            unit.hasMoved = true;\n            unitMoved = true;\n        }\n        return unitMoved;\n    }\n\n    getTreasureIdx(square) {\n        for (let i=0; i<square.length; i++) {\n            if (square[i].team !== this.currentPlayer.team\n                && square[i].type() === 'Treasure') {\n                return i;\n            }\n        }\n        return null\n    }\n\n    attackUnit(pos, square) {\n        let unitAttacked = false;\n        let unit = square.last();\n        if (unit.attacks && unit.attacks.find(e => e.x === pos.x && e.y === pos.y)) {\n            let attackedSquare = this.board.grid.get(pos);\n            let attackedUnit = attackedSquare.last();\n            attackedUnit.defense -= unit.attack;\n            if (attackedUnit.defense < 1) {\n                attackedSquare.pop();\n                this.currentPlayer.team === this.player.team ? this.enemy.removeUnit(attackedUnit) : this.player.removeUnit(attackedUnit);\n            }\n            this.actionPoints--;\n            unit.hasAttacked = true;\n            unitAttacked = true;\n        }\n        return unitAttacked;\n    }\n}\n\nexport default Game;"],"names":["constructor","team","pos","this","image","Image","parentType","Object","getPrototypeOf","name","type","Piece","super","src","Board","pos1","y","GRID_HEIGHT","x","Math","floor","GRID_WIDTH","pos2","treasure","player","Treasure","PLAYER_TEAM","enemy","ENEMY_TEAM","base","Base","barracks","grid","makeGrid","static","i","push","j","barrack","Barrack","get","isWon","equals","isOnBoard","Array","prototype","containsType","square","some","last","length","first","attack","defense","pointStandard","upgrade","attackDist","moves","attacks","hasMoved","hasAttacked","hasUpgraded","board","view","resetActions","upgrades","downgrade","min","getMoves","getMovesSet","delete","JSON","stringify","map","elem","parse","validVisited","Set","maxDist","newPos","hasUnit","has","add","getAttacks","isUpgradable","currentPlayer","onHomeTerf","Unit","View","game","ctx","el","ratio","images","renderImg","drawBoard","drawMenu","noMoreMoves","drawNoMoreMovesModule","resetView","clearBoard","clearRect","canvas","width","height","unitPos","clickedPos","invisifyButtons","background","onload","e","document","querySelector","forEach","style","visibility","drawBoardWithoutOnload","drawGridSquare","drawGridElems","drawMidline","drawEndTurnButton","font","fillStyle","str","actionPoints","toString","strokeStyle","lineWidth","strokeText","SQUARE_DIM","fillText","units","beginPath","moveTo","lineTo","stroke","fillRect","strokeRect","createElement","classList","position","right","bottom","cell","backgroundColor","border","left","listStyle","cursor","innerHTML","color","textAlign","lineHeight","appendChild","getElementsByClassName","drawMenuOptions","ruleBox","drawRules","aboutBox","drawAbout","windowResize","window","onresize","menu","rules","drawButton","about","innerHeight","innerWidth","title","drawMenuDisplayBox","drawMenuInnerDisplayBox","box","top","transform","margin","updateNoMoreMovesStr","module","paddingLeft","paddingRight","button","marginLeft","marginRight","marginTop","drawWinningScreen","img","drawImage","drawPlayAgainButton","drawUpgradeConfirmation","drawBarrackSelection","adjustMenuPosition","troopSelection","inf","Infantry","arch","Archer","def","Defender","unit","draw","drawOutline","drawMoveHighlights","drawAttackHighlights","gridSquare","outlineColor","fillColor","globalAlpha","pixelWidth","pixelHeight","bindEvents","addEventListener","handleButton","bind","handleAbout","handleRules","handleClick","handleBackground","bindMovesButton","movesBackground","handleMovesBackground","movesButton","handleMovesButton","event","e1","e2","offsetX","offsetY","xExact","posExact","willPlayAgain","resetGame","exactPos","stateMachine","isButton","switchPlayers","contains","target","state","arc","PI","fill","drawStats","drawUpgradeButton","removeUnit","found","splice","Player","getElementById","getContext","HumanPlayer","col","row","console","log","unitUpgradeable","selectedSquare","unitSelected","barrackSelected","actionTaken","noMoreMovesDisplay","unitBought","unitUpgraded","movesAvailable","bool","barracksEmpty","res","b","squarePos","clickPos","isUpgradeButton","isUpgradeConfirmation","unitCallDrawSelected","find","xDifference","yDifference","moveUnit","attackUnit","unitMoved","pop","treasureIdx","getTreasureIdx","unitAttacked","attackedSquare","attackedUnit"],"sourceRoot":""}