(function(){"use strict";var __webpack_modules__={627:function(){eval('\n;// CONCATENATED MODULE: ./src/piece.js\nclass Piece {\n  constructor(team, pos) {\n    this.team = team;\n    this.pos = pos;\n    this.image = new Image();\n  }\n  parentType() {\n    return Object.getPrototypeOf(this.constructor).name;\n  }\n  type() {\n    return this.constructor.name;\n  }\n}\n/* harmony default export */ var piece = (Piece);\n;// CONCATENATED MODULE: ./src/pieces/barrack.js\n\nclass Barrack extends piece {\n  constructor(team, pos) {\n    super(team, pos);\n    this.image.src = "./resources/barracks2.png";\n  }\n}\n/* harmony default export */ var pieces_barrack = (Barrack);\n;// CONCATENATED MODULE: ./src/pieces/base.js\n\nclass Base extends piece {\n  constructor(team, pos) {\n    super(team, pos);\n  }\n}\n/* harmony default export */ var base = (Base);\n;// CONCATENATED MODULE: ./src/pieces/treasure.js\n\n\nclass Treasure extends piece {\n  constructor(team, pos) {\n    super(team, pos);\n    this.team === board.PLAYER_TEAM ? this.image.src = "./resources/treasureblue.png" : this.image.src = "./resources/treasurered.png";\n  }\n}\n/* harmony default export */ var treasure = (Treasure);\n;// CONCATENATED MODULE: ./src/board.js\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\nclass Board {\n  //0, 0 is top left corner\n\n  constructor() {\n    let pos1 = {\n      y: Board.GRID_HEIGHT - 1,\n      x: Math.floor(Board.GRID_WIDTH / 2)\n    };\n    let pos2 = {\n      y: 0,\n      x: Math.floor(Board.GRID_WIDTH / 2)\n    };\n    this.treasure = {\n      player: new treasure(Board.PLAYER_TEAM, pos1),\n      enemy: new treasure(Board.ENEMY_TEAM, pos2)\n    };\n    pos1 = {\n      y: 0,\n      x: Math.floor(Board.GRID_WIDTH / 2)\n    };\n    pos2 = {\n      y: Board.GRID_HEIGHT - 1,\n      x: Math.floor(Board.GRID_WIDTH / 2)\n    };\n    this.base = {\n      player: new base(Board.PLAYER_TEAM, pos2),\n      enemy: new base(Board.ENEMY_TEAM, pos1)\n    };\n    this.barracks = {\n      player: [],\n      enemy: []\n    };\n    this.grid = Board.makeGrid(this.treasure, this.base, this.barracks);\n  }\n  static makeGrid(treasure, base, barracks) {\n    let grid = [];\n    for (let i = 0; i < Board.GRID_HEIGHT; i++) {\n      grid.push([]);\n      for (let j = 0; j < Board.GRID_WIDTH; j++) {\n        grid[i].push([]);\n      }\n    }\n    let pos = {\n      y: 0,\n      x: 0\n    };\n    let barrack = new pieces_barrack(Board.ENEMY_TEAM, pos);\n    grid.get(pos).push(barrack);\n    barracks.enemy.push(barrack);\n    pos = {\n      y: 0,\n      x: Board.GRID_WIDTH - 1\n    };\n    barrack = new pieces_barrack(Board.ENEMY_TEAM, pos);\n    grid.get(pos).push(barrack);\n    barracks.enemy.push(barrack);\n    pos = {\n      y: Board.GRID_HEIGHT - 1,\n      x: 0\n    };\n    barrack = new pieces_barrack(Board.PLAYER_TEAM, pos);\n    grid.get(pos).push(barrack);\n    barracks.player.push(barrack);\n    pos = {\n      y: Board.GRID_HEIGHT - 1,\n      x: Board.GRID_WIDTH - 1\n    };\n    barrack = new pieces_barrack(Board.PLAYER_TEAM, pos);\n    grid.get(pos).push(barrack);\n    barracks.player.push(barrack);\n    grid.get(base.enemy.pos).push(base.enemy);\n    grid.get(base.player.pos).push(base.player);\n    grid.get(treasure.enemy.pos).push(treasure.enemy);\n    grid.get(treasure.player.pos).push(treasure.player);\n    return grid;\n  }\n  isWon() {\n    return this.treasure.player.pos.equals(this.base.enemy.pos) || this.treasure.enemy.pos.equals(this.base.player.pos);\n  }\n}\n_defineProperty(Board, "GRID_WIDTH", 7);\n_defineProperty(Board, "GRID_HEIGHT", 8);\n_defineProperty(Board, "PLAYER_TEAM", 1);\n_defineProperty(Board, "ENEMY_TEAM", 2);\n/* harmony default export */ var board = (Board);\n;// CONCATENATED MODULE: ./src/utils.js\n\nfunction isOnBoard(pos) {\n  return pos.x > -1 && pos.x < board.GRID_WIDTH && pos.y > -1 && pos.y < board.GRID_HEIGHT;\n}\nfunction isButton(pos) {\n  return pos.y > board.GRID_HEIGHT + 0.25 && pos.y < board.GRID_HEIGHT + 0.75 && pos.x > 4 && pos.x < 5;\n}\nfunction willPlayAgain(pos) {\n  return pos.x > board.GRID_WIDTH / 2 - 0.75 && pos.x < board.GRID_WIDTH / 2 + 0.75 && pos.y > Math.floor(board.GRID_HEIGHT / 2) && pos.y < Math.floor(board.GRID_HEIGHT / 2) + 0.5;\n}\nfunction isUpgradeButton(squarePos, clickPos) {\n  let x = clickPos.x - squarePos.x;\n  let y = clickPos.y - squarePos.y;\n  return x > 0 && x < 0.25 && y > 0 && y < 0.25;\n}\nfunction isUpgradeConfirmation(squarePos, clickPos) {\n  let x = clickPos.x - squarePos.x;\n  let y = clickPos.y - squarePos.y;\n  return x > 0 && x < 1 && y > 0 && y < 0.25;\n}\nArray.prototype.get = function (pos) {\n  return this[pos.y][pos.x];\n};\nArray.prototype.containsType = function (type) {\n  square.some();\n};\nArray.prototype.last = function () {\n  return this[this.length - 1];\n};\nArray.prototype.first = function () {\n  return this[0];\n};\nObject.prototype.left = function () {\n  return {\n    x: this.x - 1,\n    y: this.y\n  };\n};\nObject.prototype.right = function () {\n  return {\n    x: this.x + 1,\n    y: this.y\n  };\n};\nObject.prototype.up = function () {\n  return {\n    x: this.x,\n    y: this.y - 1\n  };\n};\nObject.prototype.down = function () {\n  return {\n    x: this.x,\n    y: this.y + 1\n  };\n};\nObject.prototype.equals = function (pos) {\n  return this.x === pos.x && this.y === pos.y;\n};\n/* harmony default export */ var utils = (Array);\n;// CONCATENATED MODULE: ./src/pieces/unit.js\n\n\n\nclass Unit extends piece {\n  constructor(team, pos) {\n    super(team, pos);\n    this.attack = null;\n    this.defense = null;\n    this.pointStandard = null;\n    this.upgrade = null;\n    this.level = 1;\n    this.attackDist = 1;\n    this.moves = null;\n    this.attacks = [];\n    this.hasMoved = false;\n    this.hasAttacked = false;\n    this.hasUpgraded = false;\n    this.board = null;\n    this.view = null;\n  }\n  resetActions() {\n    this.moves = null;\n    this.attacks = [];\n  }\n  upgrades() {\n    this.level = 2;\n    this.hasUpgraded = true;\n    this.attack = this.upgrade.attack;\n    this.defense = this.upgrade.defense;\n  }\n  downgrade() {\n    this.level = 1;\n    this.attack = this.pointStandard.attack;\n    this.defense = Math.min(this.pointStandard.defense, this.defense);\n  }\n  getMoves() {\n    this.moves = this.getMovesSetBFS();\n    this.moves.delete(JSON.stringify(this.pos));\n    this.moves = [...this.moves].map(elem => {\n      return JSON.parse(elem);\n    });\n    return this.moves;\n  }\n  getMovesSetDFS() {\n    let validVisited = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Set();\n    let maxDist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    let pos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.pos;\n    if (maxDist === 0) {\n      return validVisited;\n    }\n    for (let y = pos.y - 1; y <= pos.y + 1; y++) {\n      for (let x = pos.x - 1; x <= pos.x + 1; x++) {\n        let newPos = {\n          y: y,\n          x: x\n        };\n        if (isOnBoard(newPos) && !this.hasUnit(newPos)) {\n          if (!validVisited.has(JSON.stringify(newPos))) {\n            validVisited.add(JSON.stringify(newPos));\n          }\n          validVisited = this.getMovesSet(validVisited, maxDist - 1, newPos);\n        }\n      }\n    }\n    return validVisited;\n  }\n  getMovesSetBFS() {\n    let validVisited = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Set();\n    let maxDist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    let pos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.pos;\n    if (maxDist === 0) {\n      return validVisited;\n    }\n    var q = [pos];\n    while (q.length !== 0) {\n      let newPos = q.shift();\n      validVisited.add(JSON.stringify(newPos));\n      this.addToQueue(q, newPos.left(), validVisited, this.isWithinDist(pos, newPos.left(), maxDist));\n      this.addToQueue(q, newPos.right(), validVisited, this.isWithinDist(pos, newPos.right(), maxDist));\n      this.addToQueue(q, newPos.up(), validVisited, this.isWithinDist(pos, newPos.up(), maxDist));\n      this.addToQueue(q, newPos.down(), validVisited, this.isWithinDist(pos, newPos.down(), maxDist));\n    }\n    return validVisited;\n  }\n  addToQueue(q, pos, validVisited, withinDist) {\n    if (isOnBoard(pos) && withinDist && !this.hasUnit(pos) && !validVisited.has(JSON.stringify(pos))) q.push(pos);\n  }\n  isWithinDist(pos, newPos, maxDist) {\n    return Math.abs(pos.x - newPos.x) <= maxDist && Math.abs(pos.y - newPos.y) <= maxDist;\n  }\n  getAttacks() {\n    for (let y = this.pos.y - this.attackDist; y <= this.pos.y + this.attackDist; y++) {\n      for (let x = this.pos.x - this.attackDist; x <= this.pos.x + this.attackDist; x++) {\n        let newPos = {\n          y: y,\n          x: x\n        };\n        if (isOnBoard(newPos)) {\n          let square = this.board.grid.get(newPos);\n          if (this.hasUnit(newPos) && square.last().team !== this.team) {\n            this.attacks.push(newPos);\n          }\n        }\n      }\n    }\n    return this.attacks;\n  }\n  hasUnit(pos) {\n    let square = this.board.grid.get(pos);\n    if (square.length > 0) {\n      let elemType = square.last().parentType();\n      if (elemType === \'Unit\') {\n        return true;\n      }\n    }\n    return false;\n  }\n  isUpgradable(currentPlayer) {\n    return this.team === currentPlayer.team && this.level == 1 && (this.team === board.PLAYER_TEAM && this.pos.y < board.GRID_HEIGHT / 2 || this.team === board.ENEMY_TEAM && this.pos.y >= board.GRID_HEIGHT / 2);\n  }\n  onHomeTerf() {\n    return this.team === board.PLAYER_TEAM && this.pos.y >= board.GRID_HEIGHT / 2 || this.team === board.ENEMY_TEAM && this.pos.y < board.GRID_HEIGHT / 2;\n  }\n}\n/* harmony default export */ var unit = (Unit);\n;// CONCATENATED MODULE: ./src/pieces/units/archer.js\n\nclass Archer extends unit {\n  constructor(team, pos) {\n    super(team, pos);\n    this.attack = 1;\n    this.defense = 1;\n    this.attackDist = 3;\n    this.upgrade = {\n      attack: 2,\n      defense: 2\n    };\n    this.pointStandard = {\n      attack: 1,\n      defense: 1\n    };\n    this.image.src = "./resources/archer.png";\n  }\n}\n/* harmony default export */ var archer = (Archer);\n;// CONCATENATED MODULE: ./src/pieces/units/defender.js\n\nclass Defender extends unit {\n  constructor(team, pos) {\n    super(team, pos);\n    this.attack = 1;\n    this.defense = 3;\n    //if attack is changed to 1, unit.isUpgradable returns true when unit is already upgraded\n    //because it checks if upgraded using attack points. Need to implement different check\n    //if making upgraded attack points equal to standard attack points\n    this.upgrade = {\n      attack: 1,\n      defense: 5\n    };\n    this.pointStandard = {\n      attack: 1,\n      defense: 3\n    };\n    this.image.src = "./resources/defender.png";\n  }\n}\n/* harmony default export */ var defender = (Defender);\n;// CONCATENATED MODULE: ./src/pieces/units/infantry.js\n\nclass Infantry extends unit {\n  constructor(team, pos) {\n    super(team, pos);\n    this.attack = 2;\n    this.defense = 2;\n    this.upgrade = {\n      attack: 4,\n      defense: 3\n    };\n    this.pointStandard = {\n      attack: 2,\n      defense: 2\n    };\n    this.image.src = "./resources/infantry.png";\n  }\n}\n/* harmony default export */ var infantry = (Infantry);\n;// CONCATENATED MODULE: ./src/view.js\nfunction view_defineProperty(obj, key, value) { key = view_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction view_toPropertyKey(arg) { var key = view_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }\nfunction view_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n\n\n\n\n\nclass View {\n  constructor(game, ctx, el) {\n    this.game = game;\n    this.el = el;\n    this.ctx = ctx;\n    this.ratio = null;\n    this.images = this.renderImg();\n    this.drawBoard();\n    this.drawMenu({\n      y: board.GRID_HEIGHT,\n      x: board.GRID_WIDTH\n    });\n    this.noMoreMoves = this.drawNoMoreMovesModule();\n  }\n  resetView(game) {\n    this.game = game;\n    this.ratio = null;\n    this.drawBoard();\n  }\n  clearBoard() {\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n  }\n  drawBoard(unitPos, clickedPos) {\n    this.clearBoard();\n    this.invisifyButtons();\n    this.images.background.onload(unitPos, clickedPos);\n  }\n  invisifyButtons() {\n    const e = [];\n    e.push(document.querySelector(".about"));\n    e.push(document.querySelector(".rules"));\n    e.push(document.querySelector(".abouttitle"));\n    e.push(document.querySelector(".rulestitle"));\n    e.forEach(e => {\n      if (e) {\n        e.style.visibility = \'hidden\';\n      }\n    });\n  }\n  drawBoardWithoutOnload(unitPos, clickedPos) {\n    for (let y = 0; y < board.GRID_HEIGHT; y++) {\n      for (let x = 0; x < board.GRID_WIDTH; x++) {\n        this.drawGridSquare(x, y, "darkgreen");\n        this.drawGridElems({\n          y: y,\n          x: x\n        }, unitPos, clickedPos);\n      }\n    }\n    this.drawMidline();\n    this.drawEndTurnButton();\n    this.ctx.font = "40px Copperplate";\n    this.game.currentPlayer.team === board.ENEMY_TEAM ? this.ctx.fillStyle = "red" : this.ctx.fillStyle = "blue";\n    let str = "Action Points: " + this.game.actionPoints.toString();\n    this.ctx.strokeStyle = \'dimgrey\';\n    this.ctx.lineWidth = 3;\n    this.ctx.strokeText(str, 10, (board.GRID_HEIGHT + 0.5) * View.SQUARE_DIM);\n    this.ctx.fillText(str, 10, (board.GRID_HEIGHT + 0.5) * View.SQUARE_DIM);\n    this.ctx.font = "30px Copperplate";\n    str = "Troops: " + this.game.currentPlayer.units.length.toString() + "/8";\n    this.ctx.strokeText(str, 10, (board.GRID_HEIGHT + 0.75) * View.SQUARE_DIM);\n    this.ctx.fillText(str, 10, (board.GRID_HEIGHT + 0.75) * View.SQUARE_DIM);\n  }\n  drawMidline() {\n    this.ctx.strokeStyle = \'lightskyblue\';\n    this.ctx.beginPath();\n    this.ctx.moveTo(0, board.GRID_HEIGHT / 2 * View.SQUARE_DIM);\n    this.ctx.lineTo((board.GRID_HEIGHT - 1) * View.SQUARE_DIM, board.GRID_HEIGHT / 2 * View.SQUARE_DIM);\n    this.ctx.stroke();\n  }\n  drawEndTurnButton() {\n    this.ctx.fillStyle = \'lightskyblue\';\n    this.ctx.fillRect(View.SQUARE_DIM * 4, (board.GRID_HEIGHT + 0.25) * View.SQUARE_DIM, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.5);\n    this.ctx.strokeStyle = \'cornflowerblue\';\n    this.ctx.lineWidth = 1;\n    this.ctx.strokeRect(View.SQUARE_DIM * 4, (board.GRID_HEIGHT + 0.25) * View.SQUARE_DIM, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.5);\n    this.ctx.font = "25px Copperplate";\n    this.ctx.fillStyle = "dimgrey";\n    this.ctx.lineWidth = 2;\n    this.ctx.fillText("End", 4.25 * View.SQUARE_DIM, (board.GRID_HEIGHT + 0.45) * View.SQUARE_DIM);\n    this.ctx.fillText("Turn", 4.15 * View.SQUARE_DIM, (board.GRID_HEIGHT + 0.65) * View.SQUARE_DIM);\n  }\n  drawMenu(pos) {\n    const grid = document.createElement("ul");\n    grid.classList.add("grid");\n    grid.style.position = "absolute";\n    grid.style.right = "7.5%";\n    grid.style.bottom = "calc(0.2% - 32px)";\n    grid.style.width = "calc(14.29% - 40px)";\n    grid.style.height = "5.85%";\n    const cell = document.createElement("li");\n    cell.classList.add("menu");\n    cell.style.backgroundColor = "lightskyblue";\n    cell.style.border = "1px solid cornflowerblue";\n    cell.style.height = "calc(100% - 2px)";\n    cell.style.width = "calc(100% - 2px)";\n    cell.style.left = "0px";\n    cell.style.listStyle = "none";\n    cell.style.cursor = "pointer";\n    cell.innerHTML = "Menu";\n    cell.style.font = 25 * this.ratio + "px Copperplate";\n    cell.style.color = "dimgrey";\n    cell.style.textAlign = "center";\n    cell.style.lineHeight = "200%";\n    cell.classList.add("button");\n    grid.appendChild(cell);\n    // this.el.appendChild(grid);\n    document.getElementsByClassName("background")[0].appendChild(grid);\n    this.drawMenuOptions(pos, cell);\n    const ruleBox = this.drawRules(pos);\n    const aboutBox = this.drawAbout(pos);\n    const windowResize = window.onresize;\n    window.onresize = () => {\n      windowResize();\n      if (this.ratio < 0.67) {\n        this.ratio = 0.67;\n      }\n      ruleBox.style.font = 19 * this.ratio - 2 + "px Copperplate";\n      ruleBox.style.lineHeight = "100%";\n      aboutBox.style.font = 20 * this.ratio - 2 + "px Copperplate";\n      aboutBox.style.lineHeight = "350%";\n    };\n  }\n  drawMenuOptions(pos, cell) {\n    const menu = document.createElement("ul");\n    menu.classList.add("menu");\n    menu.style.position = "absolute";\n    menu.style.right = "7.5%";\n    menu.style.bottom = "calc(5.85% - 16px)";\n    menu.style.width = "calc(14.29% - 42px)";\n    menu.style.height = "calc(5.85% - 2px)";\n    const rules = document.createElement("li");\n    this.drawButton("Rules", rules, {\n      x: "0%",\n      y: "100%"\n    });\n    rules.classList.add("rules");\n    const about = document.createElement("li");\n    this.drawButton("About", about, {\n      x: "0%",\n      y: "0%"\n    });\n    about.classList.add("about");\n    rules.style.font = 20 * this.ratio + "px Copperplate";\n    rules.style.lineHeight = "250%";\n    about.style.font = 20 * this.ratio + "px Copperplate";\n    about.style.lineHeight = "250%";\n    menu.appendChild(rules);\n    menu.appendChild(about);\n    menu.style.visibility = \'hidden\';\n    window.onresize = () => {\n      this.ratio = Math.min(window.innerHeight / this.ctx.canvas.height, window.innerWidth / this.ctx.canvas.width);\n      if (this.ratio < 0.67) {\n        this.ratio = 0.67;\n      }\n      cell.style.font = 25 * this.ratio + "px Copperplate";\n      cell.style.lineHeight = "200%";\n      rules.style.font = 20 * this.ratio + "px Copperplate";\n      rules.style.lineHeight = "250%";\n      about.style.font = 20 * this.ratio + "px Copperplate";\n      about.style.lineHeight = "250%";\n    };\n\n    // this.el.appendChild(menu);\n    document.getElementsByClassName("background")[0].appendChild(menu);\n  }\n  drawRules(pos) {\n    const title = document.createElement("ul");\n    title.classList.add("rulestitle");\n    this.drawMenuDisplayBox("How To Play&nbsp;&nbsp;&nbsp;", title, title);\n    const rules = document.createElement("li");\n    this.drawMenuInnerDisplayBox("Steal the enemy\'s treasure & bring it back to your base!<p>BUYING | Select the barracks to buy troops. All units can move up to 2 spaces in any direction. There are 3 types of troops:</p>-Infantry: Defense 2, Attack 1, Range 1<br>-Archer: Defense 1, Attack 1, Range 3<br>-Defender: Defense 3, Attack 1, Range 1<br><p>UPGRADING | When in enemy territory, units can be ugraded as follows:</p>-Infantry: Defense +1, Attack +2<br>-Archer: Defense +1, Attack +1<br>-Defender: Defense +2, Attack +0<br><p>Units cannot attack after upgrading until the next round. Stats return to normal once returning to friendly territory.</p><p>TREASURE | Pick up the treasure by moving a unit onto the square containing it. (You can only pick up enemy treasure.)</p><p>PRICE CHART<br>Moving or Attacking: 1 Action Point<br>Buying or Upgrading: 2 Action Points</p>", rules, title);\n    rules.style.font = "12px Copperplate";\n    if (this.ratio < 0.67) {\n      this.ratio = 0.67;\n    }\n    rules.style.font = 19 * this.ratio - 2 + "px Copperplate";\n    rules.style.lineHeight = "100%";\n    rules.classList.add("rulesbox");\n    title.appendChild(rules);\n    // title.style.visibility = \'hidden\'\n    // this.el.appendChild(title);\n    document.getElementsByClassName("background")[0].appendChild(title);\n    return rules;\n  }\n  drawAbout(pos) {\n    const title = document.createElement("ul");\n    title.classList.add("abouttitle");\n    this.drawMenuDisplayBox("About&nbsp;&nbsp;&nbsp;", title, title);\n    const about = document.createElement("li");\n    this.drawMenuInnerDisplayBox("<br><br><p>Game developed by <a href=\'https://www.linkedin.com/in/jdirksen/\'>Jasmine Kobata</a></p><p><a href=\'https://github.com/JasmineKobata/Javascript-Project\'>Treasure Wars! GitHub Repo</p><p><a href=\'https://www.appacademy.io/\'>App Academy</a> Javascript Project</p>", about, title);\n    if (this.ratio < 0.67) {\n      this.ratio = 0.67;\n    }\n    about.style.font = 20 * this.ratio - 2 + "px Copperplate";\n    about.style.lineHeight = "350%";\n    about.classList.add("aboutbox");\n    title.appendChild(about);\n    title.style.visibility = \'hidden\';\n    // this.el.appendChild(title);\n    document.getElementsByClassName("background")[0].appendChild(title);\n    return about;\n  }\n  drawMenuDisplayBox(str, box, title) {\n    box.style.width = "calc(75% - 42px)";\n    box.style.height = "calc(75% - 2px)";\n    box.style.backgroundColor = "lightskyblue";\n    box.style.border = "1px solid cornflowerblue";\n    box.style.position = "absolute";\n    box.style.left = "50%";\n    box.style.top = "45%";\n    box.style.transform = "translate(-50%, -50%)";\n    box.style.margin = "0px";\n    box.style.listStyle = "none";\n    box.style.cursor = "pointer";\n    box.innerHTML = str;\n    if (this.ratio < 0.67) {\n      this.ratio = 0.67;\n    }\n    box.style.font = 30 * this.ratio - 2 + "px Copperplate";\n    box.style.color = "dimgrey";\n    box.style.textAlign = "center";\n    box.style.lineHeight = "250%";\n    const windowResize = window.onresize;\n    window.onresize = () => {\n      windowResize();\n      if (this.ratio < 0.67) {\n        this.ratio = 0.67;\n      }\n      box.style.font = 30 * this.ratio - 2 + "px Copperplate";\n      box.style.lineHeight = "250%";\n    };\n  }\n  drawMenuInnerDisplayBox(str, box, title) {\n    box.style.width = "calc(80% - 42px)";\n    box.style.height = "calc(80% - 2px)";\n    box.style.backgroundColor = "cornflowerblue";\n    box.style.border = "1px solid cornflowerblue";\n    box.style.position = "absolute";\n    box.style.left = "50%";\n    box.style.top = "50%";\n    box.style.transform = "translate(-50%, -50%)";\n    // box.style.margin = "0px";\n    box.style.listStyle = "none";\n    box.style.cursor = "pointer";\n    box.innerHTML = str;\n    box.style.font = "25px Copperplate";\n    box.style.color = "white";\n  }\n  drawButton(str, cell, pos) {\n    cell.style.backgroundColor = "lightskyblue";\n    cell.style.border = "1px solid cornflowerblue";\n    cell.style.width = "100%";\n    cell.style.height = "100%";\n    cell.style.position = "absolute";\n    cell.style.right = pos.x;\n    cell.style.bottom = pos.y;\n    cell.style.margin = "0px";\n    cell.style.listStyle = "none";\n    cell.style.cursor = "pointer";\n    cell.innerHTML = str;\n    cell.style.color = "dimgrey";\n    cell.style.textAlign = "center";\n  }\n  updateNoMoreMovesStr() {\n    let str = "<br>No Moves Left!</br>";\n    str += this.game.currentPlayer.team === board.PLAYER_TEAM ? "Red" : "Blue";\n    str += "\'s Turn?";\n    return str;\n  }\n  drawNoMoreMovesModule() {\n    const background = document.createElement("div");\n    background.classList.add("movesBackground");\n    background.style.width = "100%";\n    background.style.height = "100%";\n    background.style.position = "absolute";\n    background.style.top = "0px";\n    background.style.visibility = "hidden";\n    const module = document.createElement("ul");\n    module.classList.add("noMoreMoves");\n    module.style.width = "calc(40% - 42px)";\n    module.style.height = "calc(18% - 2px)";\n    module.style.backgroundColor = "lightskyblue";\n    module.style.border = "1px solid cornflowerblue";\n    module.style.position = "absolute";\n    module.style.left = "50%";\n    module.style.top = "45%";\n    module.style.transform = "translate(-50%, -50%)";\n    module.style.margin = "0px";\n    module.style.paddingLeft = "10px";\n    module.style.paddingRight = module.style.paddingLeft;\n    module.style.listStyle = "none";\n    module.style.cursor = "pointer";\n    module.style.font = 27 * this.ratio - 2 + "px Copperplate";\n    module.style.color = "dimgrey";\n    module.style.textAlign = "center";\n    const button = document.createElement("li");\n    button.classList.add("movesButton");\n    button.innerHTML = "OK";\n    button.style.width = "50%";\n    button.style.height = "calc(18% - 2px)";\n    button.style.backgroundColor = "cornflowerblue";\n    button.style.border = "1px solid cornflowerblue";\n    button.style.marginLeft = "auto";\n    button.style.marginRight = "auto";\n    button.style.marginTop = "11%";\n    button.style.color = "white";\n    const windowResize = window.onresize;\n    window.onresize = () => {\n      windowResize();\n      if (this.ratio < 0.67) {\n        this.ratio = 0.67;\n      }\n      module.style.font = 27 * this.ratio - 2 + "px Copperplate";\n      // ruleBox.style.lineHeight = "100%"\n    };\n\n    module.appendChild(button);\n    background.appendChild(module);\n    document.getElementsByClassName("background")[0].appendChild(background);\n\n    // this.bindMovesButton();\n    return background;\n  }\n  drawWinningScreen() {\n    let img = new Image();\n    img.src = \'./resources/wood.png\';\n    img.onload = () => {\n      this.ctx.drawImage(img, View.SQUARE_DIM * Math.floor((board.GRID_WIDTH - 2) / 2), View.SQUARE_DIM * (Math.floor((board.GRID_HEIGHT - 2) / 2) + 0.25), View.SQUARE_DIM * 3, View.SQUARE_DIM * 1.5);\n      this.ctx.beginPath();\n      this.ctx.stroke();\n      this.ctx.font = "30px Copperplate";\n      this.ctx.lineWidth = 3;\n      let str = "";\n      if (this.game.currentPlayer.team === board.PLAYER_TEAM) {\n        this.ctx.fillStyle = "blue";\n        this.ctx.strokeStyle = "darkblue";\n        str += "Blue";\n      } else {\n        this.ctx.fillStyle = "red";\n        this.ctx.strokeStyle = "maroon";\n        str += "Red";\n      }\n      str += " Victory!";\n      this.ctx.strokeText(str, View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 1), View.SQUARE_DIM * (board.GRID_HEIGHT / 2 - 0.25));\n      this.ctx.fillText(str, View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 1), View.SQUARE_DIM * (board.GRID_HEIGHT / 2 - 0.25));\n      this.drawPlayAgainButton();\n    };\n  }\n  drawPlayAgainButton() {\n    this.ctx.lineWidth = 2;\n    this.ctx.fillStyle = \'cornflowerblue\';\n    this.ctx.strokeStyle = \'#543000\';\n    this.ctx.fillRect(View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 0.75), View.SQUARE_DIM * Math.floor(board.GRID_HEIGHT / 2), View.SQUARE_DIM * 1.5, View.SQUARE_DIM * 0.5);\n    this.ctx.strokeRect(View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 0.75), View.SQUARE_DIM * Math.floor(board.GRID_HEIGHT / 2), View.SQUARE_DIM * 1.5, View.SQUARE_DIM * 0.5);\n    this.ctx.strokeStyle = \'blue\';\n    this.ctx.font = "24px Copperplate";\n    this.ctx.lineWidth = 1;\n    this.ctx.fillStyle = "white";\n    this.ctx.strokeStyle = "grey";\n    this.ctx.strokeText("Play Again?", View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 0.70), View.SQUARE_DIM * (board.GRID_HEIGHT / 2 + 0.3));\n    this.ctx.fillText("Play Again?", View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 0.70), View.SQUARE_DIM * (board.GRID_HEIGHT / 2 + 0.3));\n  }\n  drawUpgradeConfirmation(pos) {\n    this.ctx.fillStyle = \'lightskyblue\';\n    this.ctx.fillRect(View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.35);\n    this.ctx.strokeStyle = \'cornflowerblue\';\n    this.ctx.strokeRect(View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.35);\n    this.ctx.lineWidth = 1;\n    this.ctx.font = "20px Copperplate";\n    this.ctx.fillStyle = "dimgrey";\n    this.ctx.fillText("Upgrade?", View.SQUARE_DIM * pos.x, View.SQUARE_DIM * (pos.y + 0.25));\n  }\n  drawBarrackSelection(pos) {\n    let newPos = this.adjustMenuPosition(pos);\n    this.team === board.ENEMY_TEAM ? this.ctx.fillStyle = "red" : this.ctx.fillStyle = "blue";\n    let troopSelection = [];\n    this.images.barrack.onload(newPos);\n    this.ctx.font = "30px Copperplate";\n    this.ctx.fillStyle = "white";\n    this.ctx.lineWidth = 3;\n    this.ctx.fillText("Buy New Troop?", View.SQUARE_DIM * (newPos.x + 0.35), View.SQUARE_DIM * (newPos.y + 0.35));\n    let inf = new infantry(this.game.currentPlayer.team, {\n      y: newPos.y + 0.5,\n      x: newPos.x\n    });\n    let arch = new archer(this.game.currentPlayer.team, {\n      y: newPos.y + 0.5,\n      x: newPos.x + 1\n    });\n    let def = new defender(this.game.currentPlayer.team, {\n      y: newPos.y + 0.5,\n      x: newPos.x + 2\n    });\n    inf.board = this.game.board;\n    arch.board = this.game.board;\n    def.board = this.game.board;\n    inf.view = this.game.view;\n    arch.view = this.game.view;\n    def.view = this.game.view;\n    troopSelection.push(inf);\n    troopSelection.push(arch);\n    troopSelection.push(def);\n    troopSelection.forEach(unit => {\n      unit.draw(this.ctx, this.game.currentPlayer);\n    });\n    return troopSelection;\n  }\n  adjustMenuPosition(pos) {\n    let newPos = {};\n    pos.x === 0 ? newPos.x = pos.x + 0.25 : newPos.x = pos.x - 2.25;\n    pos.y === 0 ? newPos.y = pos.y + 0.5 : newPos.y = pos.y - 1;\n    return newPos;\n  }\n  drawOutline(pos) {\n    this.ctx.strokeStyle = \'yellow\';\n    this.ctx.lineWidth = 10;\n    this.ctx.strokeRect(View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM, View.SQUARE_DIM);\n  }\n  drawMoveHighlights(pos) {\n    this.drawGridSquare(pos.x, pos.y, \'seagreen\', "mediumseagreen");\n  }\n  drawAttackHighlights(pos) {\n    this.drawGridSquare(pos.x, pos.y, "cornflowerblue", "lightskyblue");\n  }\n  drawGridElems(pos, unitPos, clickedPos) {\n    let gridSquare = this.game.board.grid.get(pos);\n    for (let i = 0; i < gridSquare.length; i++) {\n      gridSquare[i].draw(this.ctx, this.game.currentPlayer, unitPos, clickedPos);\n    }\n    this.ctx.beginPath();\n  }\n  drawGridSquare(x, y, outlineColor, fillColor) {\n    if (fillColor) {\n      this.ctx.fillStyle = fillColor;\n      this.ctx.globalAlpha = 0.60;\n      this.ctx.fillRect(View.SQUARE_DIM * x, View.SQUARE_DIM * y, View.SQUARE_DIM, View.SQUARE_DIM);\n    }\n    this.ctx.strokeStyle = outlineColor;\n    this.ctx.lineWidth = 2;\n    this.ctx.strokeRect(View.SQUARE_DIM * x, View.SQUARE_DIM * y, View.SQUARE_DIM, View.SQUARE_DIM);\n    this.ctx.globalAlpha = 1;\n  }\n  renderImg() {\n    let pixelWidth = board.GRID_WIDTH * View.SQUARE_DIM;\n    let pixelHeight = (board.GRID_HEIGHT + 1) * View.SQUARE_DIM;\n    this.ctx.canvas.width = pixelWidth;\n    this.ctx.canvas.height = pixelHeight;\n    this.ratio = Math.min(window.innerHeight / this.ctx.canvas.height, window.innerWidth / this.ctx.canvas.width);\n    // this.ctx.scale(this.ratio, this.ratio);\n    let images = {};\n    images.background = new Image();\n    images.background.src = "./resources/grass2.png";\n    images.background.onload = (unitPos, clickedPos) => {\n      this.ctx.drawImage(images.background, 0, 0, pixelWidth, pixelHeight, 0, 0, pixelWidth, pixelHeight);\n      this.ctx.beginPath();\n      this.ctx.stroke();\n      this.drawBoardWithoutOnload(unitPos, clickedPos);\n    };\n    images.barrack = new Image();\n    images.barrack.src = "./resources/wood.png";\n    images.barrack.onload = pos => {\n      this.ctx.drawImage(images.barrack, View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM * 3, View.SQUARE_DIM * 1.5);\n      this.ctx.beginPath();\n      this.ctx.stroke();\n    };\n    return images;\n  }\n\n  // background.classList.add(".movesBackground")\n  // module.classList.add(".noMoreMoves");\n  // button.classList.add(".movesButton");\n\n  bindEvents(ctx) {\n    const button = document.querySelector(".button");\n    button.addEventListener("click", this.handleButton.bind(this));\n    const about = document.querySelector(".about");\n    if (about) {\n      about.addEventListener("click", this.handleAbout.bind(this));\n    }\n    const rules = document.querySelector(".rules");\n    if (rules) {\n      rules.addEventListener("click", this.handleRules.bind(this));\n    }\n    ctx.canvas.addEventListener(\'click\', this.handleClick.bind(this));\n    document.addEventListener("click", this.handleBackground.bind(this));\n    this.bindMovesButton();\n  }\n  bindMovesButton() {\n    const movesBackground = document.querySelector(".movesBackground");\n    if (movesBackground) {\n      movesBackground.addEventListener("click", this.handleMovesBackground.bind(this, movesBackground));\n    }\n    ;\n    const movesButton = document.querySelector(".movesButton");\n    if (movesButton) {\n      movesButton.addEventListener("click", this.handleMovesButton.bind(this, movesBackground));\n    }\n    ;\n    return movesButton;\n  }\n  handleAbout(event) {\n    const e = document.querySelector(".abouttitle");\n    this.invisifyButtons();\n    e.style.visibility = \'visible\';\n  }\n  handleRules(event) {\n    const e = document.querySelector(".rulestitle");\n    this.invisifyButtons();\n    e.style.visibility = \'visible\';\n  }\n  handleButton(event) {\n    const e1 = document.querySelector(".about");\n    const e2 = document.querySelector(".rules");\n    this.invisifyButtons();\n    e1.style.visibility = \'visible\';\n    e2.style.visibility = \'visible\';\n  }\n  handleClick(event) {\n    let x = Math.floor(event.offsetX / (View.SQUARE_DIM * this.ratio));\n    let y = Math.floor(event.offsetY / (View.SQUARE_DIM * this.ratio));\n    let xExact = event.offsetX / (View.SQUARE_DIM * this.ratio);\n    let yExact = event.offsetY / (View.SQUARE_DIM * this.ratio);\n    let pos = {\n      y,\n      x\n    };\n    let posExact = {\n      y: yExact,\n      x: xExact\n    };\n    if (this.game.board.isWon()) {\n      //    this.drawWinningScreen();\n      if (willPlayAgain(posExact)) {\n        this.game.resetGame(this);\n        this.drawBoard();\n      }\n    } else {\n      this.drawBoard();\n      if (isOnBoard(pos)) {\n        this.game.ctx.clickedPos = pos;\n        this.game.ctx.exactPos = posExact;\n        this.game.callStateMachine();\n      } else if (isButton(posExact)) {\n        this.game.switchPlayers();\n        this.drawBoard();\n      }\n    }\n  }\n  handleBackground(event) {\n    if (!document.querySelector(".background").contains(event.target)) {\n      this.drawBoard();\n      this.game.state = "unselected";\n      const movesBackground = document.querySelector(".movesBackground");\n      if (movesBackground) movesBackground.style.visibility = "hidden";\n    }\n  }\n  handleMovesButton(movesBackground, event) {\n    this.game.switchPlayers();\n    movesBackground.style.visibility = "hidden";\n    this.drawBoard();\n  }\n  handleMovesBackground(movesBackground, event) {\n    if (!document.querySelector(".noMoreMoves").contains(event.target)) {\n      movesBackground.style.visibility = "hidden";\n    }\n  }\n}\nview_defineProperty(View, "SQUARE_DIM", 100);\nfunction drawUpgradeButton(unit, ctx, x, y) {\n  unit.team === board.ENEMY_TEAM ? ctx.fillStyle = "red" : ctx.fillStyle = "blue";\n  ctx.beginPath();\n  ctx.arc(View.SQUARE_DIM * x + View.SQUARE_DIM * .15, View.SQUARE_DIM * y + View.SQUARE_DIM * .15, View.SQUARE_DIM * .1, 0, 2.0 * Math.PI);\n  ctx.fill();\n  ctx.fillStyle = "white";\n  ctx.font = "30px Copperplate";\n  ctx.fillText("+", View.SQUARE_DIM * x + View.SQUARE_DIM * 0.06, View.SQUARE_DIM * y + View.SQUARE_DIM * .22);\n}\nfunction drawStats(unit, ctx, x, y) {\n  unit.team === board.ENEMY_TEAM ? ctx.fillStyle = "red" : ctx.fillStyle = "blue";\n  ctx.font = "35px Copperplate";\n  ctx.strokeStyle = \'dimgrey\';\n  ctx.lineWidth = 3;\n  ctx.strokeText("A" + unit.attack.toString(), View.SQUARE_DIM * x + View.SQUARE_DIM * .3, View.SQUARE_DIM * y + View.SQUARE_DIM * .50);\n  ctx.strokeText("D" + unit.defense.toString(), View.SQUARE_DIM * x + View.SQUARE_DIM * .3, View.SQUARE_DIM * y + View.SQUARE_DIM * .75);\n  ctx.fillText("A" + unit.attack.toString(), View.SQUARE_DIM * x + View.SQUARE_DIM * .3, View.SQUARE_DIM * y + View.SQUARE_DIM * .50);\n  ctx.fillText("D" + unit.defense.toString(), View.SQUARE_DIM * x + View.SQUARE_DIM * .3, View.SQUARE_DIM * y + View.SQUARE_DIM * .75);\n}\npieces_barrack.prototype.draw = function (ctx) {\n  this.team === board.ENEMY_TEAM ? ctx.fillStyle = "red" : ctx.fillStyle = "blue";\n  ctx.fillRect(View.SQUARE_DIM * this.pos.x + View.SQUARE_DIM * .10, View.SQUARE_DIM * this.pos.y + View.SQUARE_DIM * .70, View.SQUARE_DIM * .80, View.SQUARE_DIM * .20);\n  this.image.onload = () => {\n    ctx.drawImage(this.image, View.SQUARE_DIM * this.pos.x, View.SQUARE_DIM * this.pos.y, View.SQUARE_DIM, View.SQUARE_DIM);\n    ctx.beginPath();\n    ctx.stroke();\n  };\n  this.image.onload();\n};\nbase.prototype.draw = function (ctx) {\n  this.team === board.ENEMY_TEAM ? ctx.fillStyle = "red" : ctx.fillStyle = "blue";\n  ctx.beginPath();\n  ctx.arc(View.SQUARE_DIM * this.pos.x + View.SQUARE_DIM * .50, View.SQUARE_DIM * this.pos.y + View.SQUARE_DIM * .50, View.SQUARE_DIM * .35, 0, 2.0 * Math.PI);\n  ctx.fill();\n};\ntreasure.prototype.draw = function (ctx) {\n  this.image.onload = () => {\n    ctx.drawImage(this.image, View.SQUARE_DIM * this.pos.x, View.SQUARE_DIM * this.pos.y, View.SQUARE_DIM, View.SQUARE_DIM);\n    ctx.beginPath();\n    ctx.stroke();\n  };\n  this.image.onload();\n};\nfunction drawUpgradeConfirmation(ctx, pos) {\n  ctx.fillStyle = \'lightskyblue\';\n  ctx.fillRect(View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.35);\n  ctx.strokeStyle = \'cornflowerblue\';\n  ctx.strokeRect(View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.35);\n  ctx.lineWidth = 1;\n  ctx.font = "20px Copperplate";\n  ctx.fillStyle = "dimgrey";\n  ctx.fillText("Upgrade?", View.SQUARE_DIM * pos.x, View.SQUARE_DIM * (pos.y + 0.25));\n}\nunit.prototype.draw = function (ctx, currentPlayer, unitPos, clickedPos) {\n  this.team === board.ENEMY_TEAM ? ctx.fillStyle = "red" : ctx.fillStyle = "blue";\n  this.image.onload = () => {\n    ctx.drawImage(this.image, View.SQUARE_DIM * this.pos.x, View.SQUARE_DIM * this.pos.y, View.SQUARE_DIM, View.SQUARE_DIM);\n    ctx.beginPath();\n    ctx.stroke();\n    drawStats(this, ctx, this.pos.x, this.pos.y);\n    if (this.isUpgradable(currentPlayer)) {\n      drawUpgradeButton(this, ctx, this.pos.x, this.pos.y);\n      if (unitPos && clickedPos) {\n        drawUpgradeConfirmation(ctx, unitPos);\n      }\n    }\n  };\n  this.image.onload();\n  // this.image.src = this.image.src;\n};\n\n/* harmony default export */ var src_view = (View);\n;// CONCATENATED MODULE: ./src/player.js\nclass Player {\n  constructor(team, treasure, base) {\n    this.team = team;\n    this.units = [];\n    this.treasure = treasure;\n    this.base;\n  }\n  removeUnit(unit) {\n    let found = false;\n    let i = 0;\n    while (!found && i < this.units.length) {\n      if (this.units[i++].pos.equals(unit.pos)) {\n        found = true;\n      }\n    }\n    this.units.splice(i - 1, 1);\n    // console.log(this.units, u )\n    return this.units;\n  }\n  type() {\n    return this.constructor.name;\n  }\n}\n/* harmony default export */ var player = (Player);\n;// CONCATENATED MODULE: ./src/humanPlayer.js\n\nclass HumanPlayer extends player {\n  constructor(team, treasure) {\n    super(team, treasure);\n  }\n}\n/* harmony default export */ var humanPlayer = (HumanPlayer);\n;// CONCATENATED MODULE: ./src/game.js\n\n\n\nconst MAX_AP = 4;\nconst MAX_UNITS = 8;\nclass Game {\n  constructor() {\n    this.view = null;\n    this.setGame();\n    // this.setConnection();\n  }\n\n  resetGame(view) {\n    this.view = view;\n    this.setGame();\n  }\n  setGame() {\n    this.board = new board();\n    this.state = \'unselected\';\n    this.player = new humanPlayer(board.PLAYER_TEAM, this.board.treasure.player);\n    this.enemy = new humanPlayer(board.ENEMY_TEAM, this.board.treasure.enemy);\n    console.log(this.player);\n    console.log(this.enemy);\n    this.currentPlayer = this.player;\n    this.actionPoints = MAX_AP;\n    this.ctx = {}; //{ clickedPos, selectedSquare }\n  }\n\n  setConnection() {\n    reply = "";\n    conn = new Socket();\n\n    // if (conn.open("http://127.0.0.1:5500/index.html")) {\n    //     console.log("HI");\n    //     // conn.write("GET /index.html HTTP/1.0\\n\\n");\n    //     // reply = conn.read(999999);\n    //     conn.close();\n    // }\n  }\n\n  switchPlayers() {\n    this.board.grid.forEach(col => {\n      col.forEach(row => {\n        row.forEach(e => {\n          if (e.parentType() === \'Unit\') {\n            e.hasMoved = false;\n            e.hasAttacked = false;\n            e.hasUpgraded = false;\n          }\n        });\n      });\n    });\n    this.actionPoints = MAX_AP;\n    this.state = \'unselected\';\n    this.currentPlayer === this.player ? this.currentPlayer = this.enemy : this.currentPlayer = this.player;\n  }\n  callStateMachine() {\n    if (this.currentPlayer.type() === \'HumanPlayer\') this.stateMachine(this.board.grid.get(this.ctx.clickedPos));else this.stateMachine(chooseMove());\n  }\n\n  //ctx -> {clickedPos always set, selectedSquare that will be set in unselected stage}\n  stateMachine(square) {\n    // let square = this.board.grid.get(this.ctx.clickedPos);\n\n    switch (this.state) {\n      case \'unselected\':\n        this.redirectState(square);\n        break;\n      case \'unit\':\n        //if action taken\n        if (this.actionTaken(this.ctx.clickedPos, this.ctx.selectedSquare)) {\n          this.ctx = {};\n          this.state = \'unselected\';\n          // this.view.drawBoard();\n          if (this.board.isWon()) {\n            this.view.drawBoard();\n            this.view.drawWinningScreen();\n          } else {\n            if (this.actionPoints === 0) {\n              this.switchPlayers();\n            }\n            this.view.drawBoard();\n          }\n        } //else if action not taken\n        else {\n          this.redirectState(square);\n        }\n        this.noMoreMovesDisplay();\n        break;\n      case \'barrack\':\n        //if unit is bought\n        if (this.unitBought(this.ctx.exactPos, this.ctx.menu, this.ctx.selectedSquare)) {\n          this.ctx = {};\n          this.state = \'unselected\';\n          if (this.actionPoints === 0) {\n            this.switchPlayers();\n          }\n          this.view.drawBoard();\n        } //else if unit is not bought\n        else {\n          this.redirectState(square);\n        }\n        this.noMoreMovesDisplay();\n        break;\n      case \'upgrade\':\n        //if unit is upgraded\n        if (this.unitUpgraded(this.ctx.exactPos, this.ctx.selectedSquare)) {\n          this.state = \'unselected\';\n          if (this.actionPoints === 0) {\n            this.switchPlayers();\n          }\n          this.view.drawBoard();\n        } else {\n          this.redirectState(square);\n        }\n        this.noMoreMovesDisplay();\n        break;\n      default:\n      // console.log("ERROR: undefined state");\n    }\n  }\n\n  redirectState(square) {\n    this.view.drawBoard();\n    //if unit upgrade is selected\n    if (this.unitUpgradeable(this.ctx.exactPos, square.last())) {\n      this.state = \'upgrade\';\n    } //if unit is selected\n    else if (this.unitSelected(square.last())) {\n      this.state = \'unit\';\n    } //else if barrack is selected\n    else if (this.actionPoints > 1 && this.currentPlayer.units.length < MAX_UNITS && this.barrackSelected(square.first())) {\n      this.ctx.menu = this.view.drawBarrackSelection(square.first().pos);\n      this.state = \'barrack\';\n    } else {\n      this.state = \'unselected\';\n    }\n    this.ctx.selectedSquare = square;\n  }\n  noMoreMovesDisplay() {\n    if (!this.movesAvailable() && this.actionPoints < MAX_AP) {\n      const noMoreMoves = this.view.noMoreMoves.querySelector(".noMoreMoves");\n      const button = noMoreMoves.querySelector(".movesButton");\n      noMoreMoves.innerHTML = this.view.updateNoMoreMovesStr();\n      noMoreMoves.appendChild(button);\n      this.view.noMoreMoves.style.visibility = "visible";\n    }\n  }\n  movesAvailable() {\n    let bool = false;\n    this.currentPlayer.units.forEach(unit => {\n      bool ||= !unit.hasMoved;\n      if (!unit.hasAttacked) {\n        unit.getAttacks();\n      }\n      bool ||= !unit.hasUpgraded && unit.attacks.length > 0;\n      bool ||= this.actionPoints > 1 && unit.isUpgradable(this.currentPlayer);\n      bool ||= this.actionPoints > 1 && this.barracksEmpty();\n    });\n    return bool;\n  }\n  barracksEmpty() {\n    let barracks;\n    if (this.currentPlayer === this.player) {\n      barracks = this.board.barracks.player;\n    } else {\n      barracks = this.board.barracks.enemy;\n    }\n    let res = false;\n    barracks.forEach(b => {\n      let bool = true;\n      const barrackSquare = this.board.grid.get(b.pos);\n      barrackSquare.forEach(unit => {\n        if (unit.parentType() === \'Unit\') bool = false;\n      });\n      res ||= bool;\n    });\n    return res;\n  }\n  unitUpgradeable(pos, unit) {\n    let unitUpgradeable = false;\n    if (this.actionPoints > 1 && unit && unit.parentType() === \'Unit\' && unit.isUpgradable(this.currentPlayer) && isUpgradeButton(unit.pos, pos)) {\n      unitUpgradeable = true;\n      this.view.drawBoard(unit.pos, pos);\n    }\n    return unitUpgradeable;\n  }\n  unitUpgraded(pos, square) {\n    let unitUpgraded = false;\n    let unit = square.last();\n    if (unit && unit.parentType() === \'Unit\' && unit.isUpgradable(this.currentPlayer) && isUpgradeConfirmation(unit.pos, pos)) {\n      unit.upgrades();\n      this.actionPoints -= 2;\n      unitUpgraded = true;\n    }\n    return unitUpgraded;\n  }\n  unitSelected(unit) {\n    let unitSelected = false;\n    if (unit && unit.parentType() === \'Unit\' && unit.team === this.currentPlayer.team) {\n      unit.resetActions(); //reset newly selected unit\'s action squares\n      if (!unit.board) {\n        unit.board = this.board;\n      }\n      if (!unit.view) {\n        unit.view = this.view;\n      }\n      this.unitCallDrawSelected(unit, this.view);\n      unitSelected = true;\n    }\n    return unitSelected;\n  }\n  unitCallDrawSelected(unit, view) {\n    if (!unit.hasMoved) {\n      unit.getMoves().forEach(pos => {\n        view.drawMoveHighlights(pos);\n        view.drawGridElems(pos);\n      });\n    }\n    if (!unit.hasAttacked && !unit.hasUpgraded) {\n      unit.getAttacks().forEach(pos => {\n        view.drawAttackHighlights(pos);\n        view.drawGridElems(pos);\n      });\n    }\n    view.drawOutline(unit.pos);\n  }\n  barrackSelected(barrack) {\n    return barrack && barrack.type() === \'Barrack\' && barrack.team === this.currentPlayer.team;\n  }\n  unitBought(pos, menu, square) {\n    let unitBought = false;\n    let newPos = this.adjustMenuPosition(square.first(), pos);\n    let unit;\n    if (unit = menu.find(e => e.pos.x === newPos.x && e.pos.y === newPos.y)) {\n      unit.pos = square.first().pos;\n      square.push(unit);\n      this.currentPlayer.units.push(unit);\n      this.actionPoints -= 2;\n      unitBought = true;\n    }\n    return unitBought;\n  }\n  adjustMenuPosition(barrack, pos) {\n    let xDifference = barrack.pos.x === 0 ? -0.25 : 0.25;\n    let yDifference = barrack.pos.y === 0 ? -1 : 0.5;\n    let x = Math.floor(pos.x + xDifference);\n    let y = Math.floor(pos.y + yDifference);\n    let newPos = {};\n    newPos.x = barrack.pos.x === 0 ? x + 0.25 : x - 0.25;\n    newPos.y = barrack.pos.y === 0 ? y + 1 : y - 0.5;\n    return newPos;\n  }\n  actionTaken(pos, square) {\n    return this.moveUnit(pos, square) || this.attackUnit(pos, square);\n  }\n  moveUnit(pos, square) {\n    let unitMoved = false;\n    let unit = square.last();\n    if (unit.moves && unit.moves.find(e => e.x === pos.x && e.y === pos.y)) {\n      unit.pos = pos; //reset unit position;\n      if (unit.onHomeTerf()) {\n        unit.downgrade();\n      }\n      square.pop();\n      let treasureIdx = this.getTreasureIdx(square);\n      if (treasureIdx !== null) {\n        square[treasureIdx].pos = pos;\n        this.board.grid.get(pos).push(square[treasureIdx]);\n        square.splice(treasureIdx, 1);\n      }\n      this.board.grid.get(pos).push(unit);\n      this.actionPoints--;\n      unit.hasMoved = true;\n      unitMoved = true;\n    }\n    return unitMoved;\n  }\n  getTreasureIdx(square) {\n    for (let i = 0; i < square.length; i++) {\n      if (square[i].team !== this.currentPlayer.team && square[i].type() === \'Treasure\') {\n        return i;\n      }\n    }\n    return null;\n  }\n  attackUnit(pos, square) {\n    let unitAttacked = false;\n    let unit = square.last();\n    if (unit.attacks && unit.attacks.find(e => e.x === pos.x && e.y === pos.y)) {\n      let attackedSquare = this.board.grid.get(pos);\n      let attackedUnit = attackedSquare.last();\n      attackedUnit.defense -= unit.attack;\n      if (attackedUnit.defense < 1) {\n        attackedSquare.pop();\n        this.currentPlayer.team === this.player.team ? this.enemy.removeUnit(attackedUnit) : this.player.removeUnit(attackedUnit);\n      }\n      this.actionPoints--;\n      unit.hasAttacked = true;\n      unitAttacked = true;\n    }\n    return unitAttacked;\n  }\n}\n/* harmony default export */ var src_game = (Game);\n;// CONCATENATED MODULE: ./src/index.js\n\n\ndocument.addEventListener("DOMContentLoaded", () => {\n  const canvas = document.getElementById(\'treasure-game\');\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n  const ctx = canvas.getContext("2d");\n  const el = document.querySelector(\'.buttons\');\n  const game = new src_game();\n  const view = new src_view(game, ctx, el);\n  game.view = view;\n  view.bindEvents(ctx);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFlBQVk7RUFDdkI7QUFDSjtBQUVBLDZDQUFlckMsSUFBSSxFOztBQ3pVVTtBQUNBO0FBRTdCckksUUFBUSxDQUFDOEYsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsTUFBTTtFQUNoRCxNQUFNdkcsTUFBTSxHQUFHUyxRQUFRLENBQUM2SyxjQUFjLENBQUMsZUFBZSxDQUFDO0VBQ3ZEdEwsTUFBTSxDQUFDQyxLQUFLLEdBQUd3RCxNQUFNLENBQUNPLFVBQVU7RUFDaENoRSxNQUFNLENBQUNFLE1BQU0sR0FBR3VELE1BQU0sQ0FBQ00sV0FBVztFQUNsQyxNQUFNM0UsR0FBRyxHQUFHWSxNQUFNLENBQUN1TCxVQUFVLENBQUMsSUFBSSxDQUFDO0VBQ25DLE1BQU1sTSxFQUFFLEdBQUdvQixRQUFRLENBQUNDLGFBQWEsQ0FBQyxVQUFVLENBQUM7RUFFN0MsTUFBTXZCLElBQUksR0FBRyxJQUFJMkosUUFBSSxFQUFFO0VBQ3ZCLE1BQU1oTSxJQUFJLEdBQUcsSUFBSW9DLFFBQUksQ0FBQ0MsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLEVBQUUsQ0FBQztFQUNwQ0YsSUFBSSxDQUFDckMsSUFBSSxHQUFHQSxJQUFJO0VBRWhCQSxJQUFJLENBQUN3SixVQUFVLENBQUNsSCxHQUFHLENBQUM7QUFDeEIsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1wcm9qZWN0Ly4vc3JjL3BpZWNlLmpzPzZjMWIiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1wcm9qZWN0Ly4vc3JjL3BpZWNlcy9iYXJyYWNrLmpzP2JiNzEiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1wcm9qZWN0Ly4vc3JjL3BpZWNlcy9iYXNlLmpzP2NiOTQiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1wcm9qZWN0Ly4vc3JjL3BpZWNlcy90cmVhc3VyZS5qcz8zMDk1Iiwid2VicGFjazovL2phdmFzY3JpcHQtcHJvamVjdC8uL3NyYy9ib2FyZC5qcz8yM2RiIiwid2VicGFjazovL2phdmFzY3JpcHQtcHJvamVjdC8uL3NyYy91dGlscy5qcz8wMjVlIiwid2VicGFjazovL2phdmFzY3JpcHQtcHJvamVjdC8uL3NyYy9waWVjZXMvdW5pdC5qcz9lNWE1Iiwid2VicGFjazovL2phdmFzY3JpcHQtcHJvamVjdC8uL3NyYy9waWVjZXMvdW5pdHMvYXJjaGVyLmpzP2U2MWYiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1wcm9qZWN0Ly4vc3JjL3BpZWNlcy91bml0cy9kZWZlbmRlci5qcz85ZDQyIiwid2VicGFjazovL2phdmFzY3JpcHQtcHJvamVjdC8uL3NyYy9waWVjZXMvdW5pdHMvaW5mYW50cnkuanM/ODg0ZSIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXByb2plY3QvLi9zcmMvdmlldy5qcz9mMDc4Iiwid2VicGFjazovL2phdmFzY3JpcHQtcHJvamVjdC8uL3NyYy9wbGF5ZXIuanM/YThhMiIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXByb2plY3QvLi9zcmMvaHVtYW5QbGF5ZXIuanM/MDczNyIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXByb2plY3QvLi9zcmMvZ2FtZS5qcz83ZGUwIiwid2VicGFjazovL2phdmFzY3JpcHQtcHJvamVjdC8uL3NyYy9pbmRleC5qcz9iNjM1Il0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFBpZWNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZWFtLCBwb3MsICkge1xuICAgICAgICB0aGlzLnRlYW0gPSB0ZWFtO1xuICAgICAgICB0aGlzLnBvcyA9IHBvc1xuICAgICAgICB0aGlzLmltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgfVxuXG4gICAgcGFyZW50VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzLmNvbnN0cnVjdG9yKS5uYW1lO1xuICAgIH1cblxuICAgIHR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQaWVjZTsiLCJpbXBvcnQgUGllY2UgZnJvbSBcIi4uL3BpZWNlXCI7XG5cbmNsYXNzIEJhcnJhY2sgZXh0ZW5kcyBQaWVjZSB7XG4gICAgY29uc3RydWN0b3IodGVhbSwgcG9zKSB7XG4gICAgICAgIHN1cGVyKHRlYW0sIHBvcyk7XG4gICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCIuL3Jlc291cmNlcy9iYXJyYWNrczIucG5nXCI7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCYXJyYWNrOyIsImltcG9ydCBQaWVjZSBmcm9tIFwiLi4vcGllY2VcIjtcblxuY2xhc3MgQmFzZSBleHRlbmRzIFBpZWNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZWFtLCBwb3MpIHtcbiAgICAgICAgc3VwZXIodGVhbSwgcG9zKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJhc2U7IiwiaW1wb3J0IFBpZWNlIGZyb20gXCIuLi9waWVjZVwiO1xuaW1wb3J0IEJvYXJkIGZyb20gXCIuLi9ib2FyZFwiO1xuXG5jbGFzcyBUcmVhc3VyZSBleHRlbmRzIFBpZWNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZWFtLCBwb3MpIHtcbiAgICAgICAgc3VwZXIodGVhbSwgcG9zKTtcbiAgICAgICAgdGhpcy50ZWFtID09PSBCb2FyZC5QTEFZRVJfVEVBTSA/IHRoaXMuaW1hZ2Uuc3JjID0gXCIuL3Jlc291cmNlcy90cmVhc3VyZWJsdWUucG5nXCIgOiB0aGlzLmltYWdlLnNyYyA9IFwiLi9yZXNvdXJjZXMvdHJlYXN1cmVyZWQucG5nXCI7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUcmVhc3VyZTsiLCJpbXBvcnQgQmFycmFjayBmcm9tIFwiLi9waWVjZXMvYmFycmFja1wiO1xuaW1wb3J0IEJhc2UgZnJvbSBcIi4vcGllY2VzL2Jhc2VcIjtcbmltcG9ydCBUcmVhc3VyZSBmcm9tIFwiLi9waWVjZXMvdHJlYXN1cmVcIjtcblxuY2xhc3MgQm9hcmQge1xuICAgIHN0YXRpYyBHUklEX1dJRFRIID0gNztcbiAgICBzdGF0aWMgR1JJRF9IRUlHSFQgPSA4OyAvLzAsIDAgaXMgdG9wIGxlZnQgY29ybmVyXG4gICAgc3RhdGljIFBMQVlFUl9URUFNID0gMTtcbiAgICBzdGF0aWMgRU5FTVlfVEVBTSA9IDI7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgbGV0IHBvczEgPSB7eTogQm9hcmQuR1JJRF9IRUlHSFQtMSwgeDogTWF0aC5mbG9vcihCb2FyZC5HUklEX1dJRFRILzIpfVxuICAgICAgICBsZXQgcG9zMiA9IHt5OiAwLCB4OiBNYXRoLmZsb29yKEJvYXJkLkdSSURfV0lEVEgvMil9XG4gICAgICAgIHRoaXMudHJlYXN1cmUgPSB7XG4gICAgICAgICAgICBwbGF5ZXI6IG5ldyBUcmVhc3VyZShCb2FyZC5QTEFZRVJfVEVBTSwgcG9zMSksXG4gICAgICAgICAgICBlbmVteTogbmV3IFRyZWFzdXJlKEJvYXJkLkVORU1ZX1RFQU0sIHBvczIpfTtcblxuICAgICAgICBwb3MxID0ge3k6IDAsIHg6IE1hdGguZmxvb3IoQm9hcmQuR1JJRF9XSURUSC8yKX07XG4gICAgICAgIHBvczIgPSB7eTogQm9hcmQuR1JJRF9IRUlHSFQtMSwgeDogTWF0aC5mbG9vcihCb2FyZC5HUklEX1dJRFRILzIpfVxuICAgICAgICB0aGlzLmJhc2UgPSB7XG4gICAgICAgICAgICBwbGF5ZXI6IG5ldyBCYXNlKEJvYXJkLlBMQVlFUl9URUFNLCBwb3MyKSxcbiAgICAgICAgICAgIGVuZW15OiBuZXcgQmFzZShCb2FyZC5FTkVNWV9URUFNLCBwb3MxKX07XG4gICAgICAgIHRoaXMuYmFycmFja3MgPSB7XG4gICAgICAgICAgICBwbGF5ZXI6IFtdLFxuICAgICAgICAgICAgZW5lbXk6IFtdXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ3JpZCA9IEJvYXJkLm1ha2VHcmlkKHRoaXMudHJlYXN1cmUsIHRoaXMuYmFzZSwgdGhpcy5iYXJyYWNrcyk7XG4gICAgfVxuXG4gICAgc3RhdGljIG1ha2VHcmlkKHRyZWFzdXJlLCBiYXNlLCBiYXJyYWNrcykge1xuICAgICAgICBsZXQgZ3JpZCA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGk9MDsgaSA8IEJvYXJkLkdSSURfSEVJR0hUOyBpKyspIHtcbiAgICAgICAgICAgIGdyaWQucHVzaChbXSk7XG4gICAgICAgICAgICBmb3IgKGxldCBqPTA7IGogPCBCb2FyZC5HUklEX1dJRFRIOyBqKyspIHtcbiAgICAgICAgICAgICAgICBncmlkW2ldLnB1c2goW10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBvcyA9IHt5OiAwLCB4OiAwfTtcbiAgICAgICAgbGV0IGJhcnJhY2sgPSBuZXcgQmFycmFjayhCb2FyZC5FTkVNWV9URUFNLCBwb3MpO1xuICAgICAgICBncmlkLmdldChwb3MpLnB1c2goYmFycmFjayk7XG4gICAgICAgIGJhcnJhY2tzLmVuZW15LnB1c2goYmFycmFjayk7XG5cbiAgICAgICAgcG9zID0ge3k6IDAsIHg6IEJvYXJkLkdSSURfV0lEVEgtMX07XG4gICAgICAgIGJhcnJhY2sgPSBuZXcgQmFycmFjayhCb2FyZC5FTkVNWV9URUFNLCBwb3MpO1xuICAgICAgICBncmlkLmdldChwb3MpLnB1c2goYmFycmFjayk7XG4gICAgICAgIGJhcnJhY2tzLmVuZW15LnB1c2goYmFycmFjayk7XG5cbiAgICAgICAgcG9zID0ge3k6IEJvYXJkLkdSSURfSEVJR0hULTEsIHg6IDB9O1xuICAgICAgICBiYXJyYWNrID0gbmV3IEJhcnJhY2soQm9hcmQuUExBWUVSX1RFQU0sIHBvcyk7XG4gICAgICAgIGdyaWQuZ2V0KHBvcykucHVzaChiYXJyYWNrKTtcbiAgICAgICAgYmFycmFja3MucGxheWVyLnB1c2goYmFycmFjayk7XG5cbiAgICAgICAgcG9zID0ge3k6IEJvYXJkLkdSSURfSEVJR0hULTEsIHg6IEJvYXJkLkdSSURfV0lEVEgtMX07XG4gICAgICAgIGJhcnJhY2sgPSBuZXcgQmFycmFjayhCb2FyZC5QTEFZRVJfVEVBTSwgcG9zKTtcbiAgICAgICAgZ3JpZC5nZXQocG9zKS5wdXNoKGJhcnJhY2spO1xuICAgICAgICBiYXJyYWNrcy5wbGF5ZXIucHVzaChiYXJyYWNrKTtcblxuICAgICAgICBncmlkLmdldChiYXNlLmVuZW15LnBvcykucHVzaChiYXNlLmVuZW15KTtcbiAgICAgICAgZ3JpZC5nZXQoYmFzZS5wbGF5ZXIucG9zKS5wdXNoKGJhc2UucGxheWVyKTtcblxuICAgICAgICBncmlkLmdldCh0cmVhc3VyZS5lbmVteS5wb3MpLnB1c2godHJlYXN1cmUuZW5lbXkpO1xuICAgICAgICBncmlkLmdldCh0cmVhc3VyZS5wbGF5ZXIucG9zKS5wdXNoKHRyZWFzdXJlLnBsYXllcik7XG5cbiAgICAgICAgcmV0dXJuIGdyaWQ7XG4gICAgfVxuXG4gICAgaXNXb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyZWFzdXJlLnBsYXllci5wb3MuZXF1YWxzKHRoaXMuYmFzZS5lbmVteS5wb3MpIHx8XG4gICAgICAgICAgICB0aGlzLnRyZWFzdXJlLmVuZW15LnBvcy5lcXVhbHModGhpcy5iYXNlLnBsYXllci5wb3MpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQm9hcmQ7IiwiaW1wb3J0IEJvYXJkIGZyb20gXCIuL2JvYXJkXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09uQm9hcmQocG9zKSB7XG4gICAgcmV0dXJuIHBvcy54ID4gLTEgJiYgcG9zLnggPCBCb2FyZC5HUklEX1dJRFRIICYmIHBvcy55ID4gLTEgJiYgcG9zLnkgPCBCb2FyZC5HUklEX0hFSUdIVDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQnV0dG9uKHBvcykge1xuICAgIHJldHVybiBwb3MueSA+IEJvYXJkLkdSSURfSEVJR0hUICsgMC4yNSAmJlxuICAgICAgICBwb3MueSA8IEJvYXJkLkdSSURfSEVJR0hUICsgMC43NSAmJlxuICAgICAgICBwb3MueCA+IDQgJiYgcG9zLnggPCA1O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2lsbFBsYXlBZ2Fpbihwb3MpIHtcbiAgICAgcmV0dXJuIHBvcy54ID4gQm9hcmQuR1JJRF9XSURUSCAvIDIgLSAwLjc1ICYmXG4gICAgICAgIHBvcy54IDwgQm9hcmQuR1JJRF9XSURUSCAvIDIgKyAwLjc1ICYmXG4gICAgICAgIHBvcy55ID4gTWF0aC5mbG9vcigoQm9hcmQuR1JJRF9IRUlHSFQpIC8gMikgJiZcbiAgICAgICAgcG9zLnkgPCBNYXRoLmZsb29yKChCb2FyZC5HUklEX0hFSUdIVCkgLyAyKSArIDAuNTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVXBncmFkZUJ1dHRvbihzcXVhcmVQb3MsIGNsaWNrUG9zKSB7XG4gICAgbGV0IHggPSBjbGlja1Bvcy54IC0gc3F1YXJlUG9zLng7XG4gICAgbGV0IHkgPSBjbGlja1Bvcy55IC0gc3F1YXJlUG9zLnk7XG5cbiAgICByZXR1cm4geCA+IDAgJiYgeCA8IDAuMjUgJiYgeSA+IDAgJiYgeSA8IDAuMjU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1VwZ3JhZGVDb25maXJtYXRpb24oc3F1YXJlUG9zLCBjbGlja1Bvcykge1xuICAgIGxldCB4ID0gY2xpY2tQb3MueCAtIHNxdWFyZVBvcy54O1xuICAgIGxldCB5ID0gY2xpY2tQb3MueSAtIHNxdWFyZVBvcy55O1xuICAgIHJldHVybiB4ID4gMCAmJiB4IDwgMSAmJiB5ID4gMCAmJiB5IDwgMC4yNTtcbn1cblxuQXJyYXkucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKHBvcykge1xuICAgIHJldHVybiB0aGlzW3Bvcy55XVtwb3MueF07XG59XG5cbkFycmF5LnByb3RvdHlwZS5jb250YWluc1R5cGUgPSBmdW5jdGlvbih0eXBlKSB7XG4gICAgc3F1YXJlLnNvbWUoKVxufVxuXG5BcnJheS5wcm90b3R5cGUubGFzdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzW3RoaXMubGVuZ3RoIC0gMV07XG59XG5cbkFycmF5LnByb3RvdHlwZS5maXJzdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzWzBdO1xufVxuXG5PYmplY3QucHJvdG90eXBlLmxlZnQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge3g6IHRoaXMueC0xLCB5OiB0aGlzLnl9O1xufVxuXG5PYmplY3QucHJvdG90eXBlLnJpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHt4OiB0aGlzLngrMSwgeTogdGhpcy55fVxufVxuXG5PYmplY3QucHJvdG90eXBlLnVwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHt4OiB0aGlzLngsIHk6IHRoaXMueSAtIDF9O1xufVxuXG5PYmplY3QucHJvdG90eXBlLmRvd24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge3g6IHRoaXMueCwgeTogdGhpcy55ICsgMX07XG59XG5cbk9iamVjdC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ocG9zKSB7XG4gICAgcmV0dXJuIHRoaXMueCA9PT0gcG9zLnggJiYgdGhpcy55ID09PSBwb3MueTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQXJyYXk7IiwiaW1wb3J0IEJvYXJkIGZyb20gXCIuLi9ib2FyZFwiO1xuaW1wb3J0IFBpZWNlIGZyb20gXCIuLi9waWVjZVwiO1xuaW1wb3J0IHtpc09uQm9hcmQsIGxlZnQsIHJpZ2h0LCB1cCwgZG93bn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmNsYXNzIFVuaXQgZXh0ZW5kcyBQaWVjZSB7XG4gICAgY29uc3RydWN0b3IodGVhbSwgcG9zKSB7XG4gICAgICAgIHN1cGVyKHRlYW0sIHBvcyk7XG4gICAgICAgIHRoaXMuYXR0YWNrID0gbnVsbDtcbiAgICAgICAgdGhpcy5kZWZlbnNlID0gbnVsbDtcbiAgICAgICAgdGhpcy5wb2ludFN0YW5kYXJkID0gbnVsbDtcbiAgICAgICAgdGhpcy51cGdyYWRlID0gbnVsbDtcbiAgICAgICAgdGhpcy5sZXZlbCA9IDE7XG4gICAgICAgIHRoaXMuYXR0YWNrRGlzdCA9IDE7XG4gICAgICAgIHRoaXMubW92ZXMgPSBudWxsO1xuICAgICAgICB0aGlzLmF0dGFja3MgPSBbXTtcbiAgICAgICAgdGhpcy5oYXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmhhc0F0dGFja2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaGFzVXBncmFkZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ib2FyZCA9IG51bGw7XG4gICAgICAgIHRoaXMudmlldyA9IG51bGw7XG4gICAgfVxuXG4gICAgcmVzZXRBY3Rpb25zKCkge1xuICAgICAgICB0aGlzLm1vdmVzID0gbnVsbDtcbiAgICAgICAgdGhpcy5hdHRhY2tzID0gW107XG4gICAgfVxuXG4gICAgdXBncmFkZXMoKSB7XG4gICAgICAgIHRoaXMubGV2ZWwgPSAyO1xuICAgICAgICB0aGlzLmhhc1VwZ3JhZGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5hdHRhY2sgPSB0aGlzLnVwZ3JhZGUuYXR0YWNrO1xuICAgICAgICB0aGlzLmRlZmVuc2UgPSB0aGlzLnVwZ3JhZGUuZGVmZW5zZTtcbiAgICB9XG5cbiAgICBkb3duZ3JhZGUoKSB7XG4gICAgICAgIHRoaXMubGV2ZWwgPSAxO1xuICAgICAgICB0aGlzLmF0dGFjayA9IHRoaXMucG9pbnRTdGFuZGFyZC5hdHRhY2s7XG4gICAgICAgIHRoaXMuZGVmZW5zZSA9IE1hdGgubWluKHRoaXMucG9pbnRTdGFuZGFyZC5kZWZlbnNlLCB0aGlzLmRlZmVuc2UpO1xuICAgIH1cblxuICAgIGdldE1vdmVzKCkge1xuICAgICAgICB0aGlzLm1vdmVzID0gdGhpcy5nZXRNb3Zlc1NldEJGUygpO1xuICAgICAgICB0aGlzLm1vdmVzLmRlbGV0ZShKU09OLnN0cmluZ2lmeSh0aGlzLnBvcykpO1xuICAgICAgICB0aGlzLm1vdmVzID0gWy4uLnRoaXMubW92ZXNdLm1hcChlbGVtID0+IHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGVsZW0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMubW92ZXM7XG4gICAgfVxuXG4gICAgZ2V0TW92ZXNTZXRERlModmFsaWRWaXNpdGVkID0gbmV3IFNldCgpLCBtYXhEaXN0ID0gMiwgcG9zID0gdGhpcy5wb3MpIHtcbiAgICAgICAgaWYgKG1heERpc3QgPT09IDApIHsgcmV0dXJuIHZhbGlkVmlzaXRlZDsgfVxuXG4gICAgICAgIGZvciAobGV0IHk9cG9zLnktMTsgeSA8PSBwb3MueSArIDE7IHkrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgeD1wb3MueC0xOyB4IDw9IHBvcy54ICsgMTsgeCsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5ld1BvcyA9IHt5OiB5LCB4OiB4fTtcbiAgICAgICAgICAgICAgICBpZiAoaXNPbkJvYXJkKG5ld1BvcykgJiYgIXRoaXMuaGFzVW5pdChuZXdQb3MpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdmFsaWRWaXNpdGVkLmhhcyhKU09OLnN0cmluZ2lmeShuZXdQb3MpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRWaXNpdGVkLmFkZChKU09OLnN0cmluZ2lmeShuZXdQb3MpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YWxpZFZpc2l0ZWQgPSB0aGlzLmdldE1vdmVzU2V0KHZhbGlkVmlzaXRlZCwgbWF4RGlzdC0xLCBuZXdQb3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWxpZFZpc2l0ZWQ7XG4gICAgfVxuICAgIFxuICAgIGdldE1vdmVzU2V0QkZTKHZhbGlkVmlzaXRlZCA9IG5ldyBTZXQoKSwgbWF4RGlzdCA9IDIsIHBvcyA9IHRoaXMucG9zKSB7XG4gICAgICAgIGlmIChtYXhEaXN0ID09PSAwKSB7IHJldHVybiB2YWxpZFZpc2l0ZWQ7IH1cbiAgICAgICAgdmFyIHEgPSBbcG9zXTtcblxuICAgICAgICB3aGlsZSAocS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIGxldCBuZXdQb3MgPSBxLnNoaWZ0KCk7XG4gICAgICAgICAgICB2YWxpZFZpc2l0ZWQuYWRkKEpTT04uc3RyaW5naWZ5KG5ld1BvcykpO1xuXG4gICAgICAgICAgICB0aGlzLmFkZFRvUXVldWUocSwgbmV3UG9zLmxlZnQoKSwgdmFsaWRWaXNpdGVkLCB0aGlzLmlzV2l0aGluRGlzdChwb3MsIG5ld1Bvcy5sZWZ0KCksIG1heERpc3QpKTtcbiAgICAgICAgICAgIHRoaXMuYWRkVG9RdWV1ZShxLCBuZXdQb3MucmlnaHQoKSwgdmFsaWRWaXNpdGVkLCB0aGlzLmlzV2l0aGluRGlzdChwb3MsIG5ld1Bvcy5yaWdodCgpLCBtYXhEaXN0KSk7XG4gICAgICAgICAgICB0aGlzLmFkZFRvUXVldWUocSwgbmV3UG9zLnVwKCksIHZhbGlkVmlzaXRlZCwgdGhpcy5pc1dpdGhpbkRpc3QocG9zLCBuZXdQb3MudXAoKSwgbWF4RGlzdCkpO1xuICAgICAgICAgICAgdGhpcy5hZGRUb1F1ZXVlKHEsIG5ld1Bvcy5kb3duKCksIHZhbGlkVmlzaXRlZCwgdGhpcy5pc1dpdGhpbkRpc3QocG9zLCBuZXdQb3MuZG93bigpLCBtYXhEaXN0KSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsaWRWaXNpdGVkO1xuICAgIH1cblxuICAgIGFkZFRvUXVldWUocSwgcG9zLCB2YWxpZFZpc2l0ZWQsIHdpdGhpbkRpc3QpIHtcbiAgICAgICAgaWYgKGlzT25Cb2FyZChwb3MpICYmIHdpdGhpbkRpc3QgJiYgIXRoaXMuaGFzVW5pdChwb3MpXG4gICAgICAgICAgICAmJiAhdmFsaWRWaXNpdGVkLmhhcyhKU09OLnN0cmluZ2lmeShwb3MpKSlcbiAgICAgICAgICAgIHEucHVzaChwb3MpO1xuICAgIH1cblxuICAgIGlzV2l0aGluRGlzdChwb3MsIG5ld1BvcywgbWF4RGlzdCkge1xuICAgICAgICByZXR1cm4gTWF0aC5hYnMocG9zLnggLSBuZXdQb3MueCkgPD0gbWF4RGlzdCAmJiBNYXRoLmFicyhwb3MueSAtIG5ld1Bvcy55KSA8PSBtYXhEaXN0O1xuICAgIH1cblxuICAgIGdldEF0dGFja3MoKSB7XG4gICAgICAgIGZvciAobGV0IHk9dGhpcy5wb3MueS10aGlzLmF0dGFja0Rpc3Q7IHkgPD0gdGhpcy5wb3MueSArIHRoaXMuYXR0YWNrRGlzdDsgeSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB4PXRoaXMucG9zLngtdGhpcy5hdHRhY2tEaXN0OyB4IDw9IHRoaXMucG9zLnggKyB0aGlzLmF0dGFja0Rpc3Q7IHgrKykge1xuICAgICAgICAgICAgICAgIGxldCBuZXdQb3MgPSB7eTogeSwgeDogeH07XG4gICAgICAgICAgICAgICAgaWYgKGlzT25Cb2FyZChuZXdQb3MpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzcXVhcmUgPSB0aGlzLmJvYXJkLmdyaWQuZ2V0KG5ld1Bvcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc1VuaXQobmV3UG9zKSAmJiBzcXVhcmUubGFzdCgpLnRlYW0gIT09IHRoaXMudGVhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hdHRhY2tzLnB1c2gobmV3UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5hdHRhY2tzO1xuICAgIH1cblxuICAgIGhhc1VuaXQocG9zKSB7XG4gICAgICAgIGxldCBzcXVhcmUgPSB0aGlzLmJvYXJkLmdyaWQuZ2V0KHBvcyk7XG4gICAgICAgIGlmIChzcXVhcmUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IGVsZW1UeXBlID0gc3F1YXJlLmxhc3QoKS5wYXJlbnRUeXBlKCk7XG4gICAgICAgICAgICBpZiAoZWxlbVR5cGUgPT09ICdVbml0Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpc1VwZ3JhZGFibGUoY3VycmVudFBsYXllcikge1xuICAgICAgICByZXR1cm4gdGhpcy50ZWFtID09PSBjdXJyZW50UGxheWVyLnRlYW0gJiZcbiAgICAgICAgICAgIHRoaXMubGV2ZWwgPT0gMSAmJlxuICAgICAgICAgICAgKCh0aGlzLnRlYW0gPT09IEJvYXJkLlBMQVlFUl9URUFNICYmIHRoaXMucG9zLnkgPCBCb2FyZC5HUklEX0hFSUdIVCAvIDIpIHx8XG4gICAgICAgICAgICAodGhpcy50ZWFtID09PSBCb2FyZC5FTkVNWV9URUFNICYmIHRoaXMucG9zLnkgPj0gQm9hcmQuR1JJRF9IRUlHSFQgLyAyKSk7XG4gICAgfVxuXG4gICAgb25Ib21lVGVyZigpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnRlYW0gPT09IEJvYXJkLlBMQVlFUl9URUFNICYmIHRoaXMucG9zLnkgPj0gQm9hcmQuR1JJRF9IRUlHSFQgLyAyKSB8fFxuICAgICAgICAgICAgKHRoaXMudGVhbSA9PT0gQm9hcmQuRU5FTVlfVEVBTSAmJiB0aGlzLnBvcy55IDwgQm9hcmQuR1JJRF9IRUlHSFQgLyAyKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFVuaXQ7IiwiaW1wb3J0IFVuaXQgZnJvbSBcIi4uL3VuaXRcIjtcblxuY2xhc3MgQXJjaGVyIGV4dGVuZHMgVW5pdCB7XG4gICAgY29uc3RydWN0b3IodGVhbSwgcG9zKSB7XG4gICAgICAgIHN1cGVyKHRlYW0sIHBvcyk7XG4gICAgICAgIHRoaXMuYXR0YWNrID0gMTtcbiAgICAgICAgdGhpcy5kZWZlbnNlID0gMTtcbiAgICAgICAgdGhpcy5hdHRhY2tEaXN0ID0gMztcbiAgICAgICAgdGhpcy51cGdyYWRlID0ge2F0dGFjazogMiwgZGVmZW5zZTogMn1cbiAgICAgICAgdGhpcy5wb2ludFN0YW5kYXJkID0ge2F0dGFjazogMSwgZGVmZW5zZTogMX1cbiAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcIi4vcmVzb3VyY2VzL2FyY2hlci5wbmdcIjtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFyY2hlcjsiLCJpbXBvcnQgVW5pdCBmcm9tIFwiLi4vdW5pdFwiO1xuXG5jbGFzcyBEZWZlbmRlciBleHRlbmRzIFVuaXQge1xuICAgIGNvbnN0cnVjdG9yKHRlYW0sIHBvcykge1xuICAgICAgICBzdXBlcih0ZWFtLCBwb3MpO1xuICAgICAgICB0aGlzLmF0dGFjayA9IDE7XG4gICAgICAgIHRoaXMuZGVmZW5zZSA9IDM7XG4gICAgICAgIC8vaWYgYXR0YWNrIGlzIGNoYW5nZWQgdG8gMSwgdW5pdC5pc1VwZ3JhZGFibGUgcmV0dXJucyB0cnVlIHdoZW4gdW5pdCBpcyBhbHJlYWR5IHVwZ3JhZGVkXG4gICAgICAgIC8vYmVjYXVzZSBpdCBjaGVja3MgaWYgdXBncmFkZWQgdXNpbmcgYXR0YWNrIHBvaW50cy4gTmVlZCB0byBpbXBsZW1lbnQgZGlmZmVyZW50IGNoZWNrXG4gICAgICAgIC8vaWYgbWFraW5nIHVwZ3JhZGVkIGF0dGFjayBwb2ludHMgZXF1YWwgdG8gc3RhbmRhcmQgYXR0YWNrIHBvaW50c1xuICAgICAgICB0aGlzLnVwZ3JhZGUgPSB7YXR0YWNrOiAxLCBkZWZlbnNlOiA1fVxuICAgICAgICB0aGlzLnBvaW50U3RhbmRhcmQgPSB7YXR0YWNrOiAxLCBkZWZlbnNlOiAzfVxuICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiLi9yZXNvdXJjZXMvZGVmZW5kZXIucG5nXCI7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEZWZlbmRlcjsiLCJpbXBvcnQgVW5pdCBmcm9tIFwiLi4vdW5pdFwiO1xuXG5jbGFzcyBJbmZhbnRyeSBleHRlbmRzIFVuaXQge1xuICAgIGNvbnN0cnVjdG9yKHRlYW0sIHBvcykge1xuICAgICAgICBzdXBlcih0ZWFtLCBwb3MpO1xuICAgICAgICB0aGlzLmF0dGFjayA9IDI7XG4gICAgICAgIHRoaXMuZGVmZW5zZSA9IDI7XG4gICAgICAgIHRoaXMudXBncmFkZSA9IHthdHRhY2s6IDQsIGRlZmVuc2U6IDN9XG4gICAgICAgIHRoaXMucG9pbnRTdGFuZGFyZCA9IHthdHRhY2s6IDIsIGRlZmVuc2U6IDJ9XG4gICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCIuL3Jlc291cmNlcy9pbmZhbnRyeS5wbmdcIjtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEluZmFudHJ5OyIsImltcG9ydCBCb2FyZCBmcm9tIFwiLi9ib2FyZFwiO1xuaW1wb3J0IEJhcnJhY2sgZnJvbSBcIi4vcGllY2VzL2JhcnJhY2tcIjtcbmltcG9ydCBCYXNlIGZyb20gXCIuL3BpZWNlcy9iYXNlXCI7XG5pbXBvcnQgVHJlYXN1cmUgZnJvbSBcIi4vcGllY2VzL3RyZWFzdXJlXCI7XG5pbXBvcnQgVW5pdCBmcm9tIFwiLi9waWVjZXMvdW5pdFwiO1xuaW1wb3J0IEFyY2hlciBmcm9tIFwiLi9waWVjZXMvdW5pdHMvYXJjaGVyXCI7XG5pbXBvcnQgRGVmZW5kZXIgZnJvbSBcIi4vcGllY2VzL3VuaXRzL2RlZmVuZGVyXCI7XG5pbXBvcnQgSW5mYW50cnkgZnJvbSBcIi4vcGllY2VzL3VuaXRzL2luZmFudHJ5XCI7XG5pbXBvcnQgeyBpc09uQm9hcmQsIGlzQnV0dG9uLCB3aWxsUGxheUFnYWluIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuY2xhc3MgVmlldyB7XG4gICAgc3RhdGljIFNRVUFSRV9ESU0gPSAxMDA7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBjdHgsIGVsKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZWwgPSBlbDtcbiAgICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgICAgIHRoaXMucmF0aW8gPSBudWxsO1xuICAgICAgICB0aGlzLmltYWdlcyA9IHRoaXMucmVuZGVySW1nKCk7XG4gICAgICAgIHRoaXMuZHJhd0JvYXJkKCk7XG4gICAgICAgIHRoaXMuZHJhd01lbnUoe3k6IEJvYXJkLkdSSURfSEVJR0hULCB4OiBCb2FyZC5HUklEX1dJRFRIfSk7XG4gICAgICAgIHRoaXMubm9Nb3JlTW92ZXMgPSB0aGlzLmRyYXdOb01vcmVNb3Zlc01vZHVsZSgpO1xuICAgIH1cblxuICAgIHJlc2V0VmlldyhnYW1lKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMucmF0aW8gPSBudWxsO1xuICAgICAgICB0aGlzLmRyYXdCb2FyZCgpO1xuICAgIH1cblxuICAgIGNsZWFyQm9hcmQoKSB7XG4gICAgICAgIHRoaXMuY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmN0eC5jYW52YXMud2lkdGgsIHRoaXMuY3R4LmNhbnZhcy5oZWlnaHQpO1xuICAgIH1cblxuICAgIGRyYXdCb2FyZCh1bml0UG9zLCBjbGlja2VkUG9zKSB7XG4gICAgICAgIHRoaXMuY2xlYXJCb2FyZCgpO1xuICAgICAgICB0aGlzLmludmlzaWZ5QnV0dG9ucygpO1xuXG4gICAgICAgIHRoaXMuaW1hZ2VzLmJhY2tncm91bmQub25sb2FkKHVuaXRQb3MsIGNsaWNrZWRQb3MpO1xuICAgIH1cblxuICAgIGludmlzaWZ5QnV0dG9ucygpIHtcbiAgICAgICAgY29uc3QgZSA9IFtdO1xuICAgICAgICBlLnB1c2goZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hYm91dFwiKSk7XG4gICAgICAgIGUucHVzaChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJ1bGVzXCIpKTtcbiAgICAgICAgZS5wdXNoKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWJvdXR0aXRsZVwiKSk7XG4gICAgICAgIGUucHVzaChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJ1bGVzdGl0bGVcIikpO1xuXG4gICAgICAgIGUuZm9yRWFjaChlID0+IHtpZiAoZSkge2Uuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nfX0pO1xuICAgIH1cblxuICAgIGRyYXdCb2FyZFdpdGhvdXRPbmxvYWQodW5pdFBvcywgY2xpY2tlZFBvcykge1xuICAgICAgICBmb3IgKGxldCB5PTA7IHkgPCBCb2FyZC5HUklEX0hFSUdIVDsgeSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB4PTA7IHggPCBCb2FyZC5HUklEX1dJRFRIOyB4KyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdHcmlkU3F1YXJlKHgsIHksIFwiZGFya2dyZWVuXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhd0dyaWRFbGVtcyh7eTogeSwgeDogeH0sIHVuaXRQb3MsIGNsaWNrZWRQb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZHJhd01pZGxpbmUoKTtcblxuICAgICAgICB0aGlzLmRyYXdFbmRUdXJuQnV0dG9uKCk7XG5cbiAgICAgICAgdGhpcy5jdHguZm9udCA9IFwiNDBweCBDb3BwZXJwbGF0ZVwiO1xuICAgICAgICB0aGlzLmdhbWUuY3VycmVudFBsYXllci50ZWFtID09PSBCb2FyZC5FTkVNWV9URUFNID8gdGhpcy5jdHguZmlsbFN0eWxlID0gXCJyZWRcIiA6IHRoaXMuY3R4LmZpbGxTdHlsZSA9IFwiYmx1ZVwiO1xuICAgICAgICBsZXQgc3RyID0gXCJBY3Rpb24gUG9pbnRzOiBcIiArIHRoaXMuZ2FtZS5hY3Rpb25Qb2ludHMudG9TdHJpbmcoKTtcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSAnZGltZ3JleSc7XG4gICAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IDM7XG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVRleHQoc3RyLCAxMCwgKEJvYXJkLkdSSURfSEVJR0hUKzAuNSkgKiBWaWV3LlNRVUFSRV9ESU0pO1xuICAgICAgICB0aGlzLmN0eC5maWxsVGV4dChzdHIsIDEwLCAoQm9hcmQuR1JJRF9IRUlHSFQrMC41KSAqIFZpZXcuU1FVQVJFX0RJTSk7XG5cbiAgICAgICAgdGhpcy5jdHguZm9udCA9IFwiMzBweCBDb3BwZXJwbGF0ZVwiO1xuICAgICAgICBzdHIgPSBcIlRyb29wczogXCIgKyB0aGlzLmdhbWUuY3VycmVudFBsYXllci51bml0cy5sZW5ndGgudG9TdHJpbmcoKSArIFwiLzhcIjtcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlVGV4dChzdHIsIDEwLCAoQm9hcmQuR1JJRF9IRUlHSFQrMC43NSkgKiBWaWV3LlNRVUFSRV9ESU0pO1xuICAgICAgICB0aGlzLmN0eC5maWxsVGV4dChzdHIsIDEwLCAoQm9hcmQuR1JJRF9IRUlHSFQrMC43NSkgKiBWaWV3LlNRVUFSRV9ESU0pO1xuICAgIH1cblxuICAgIGRyYXdNaWRsaW5lKCkge1xuICAgICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9ICdsaWdodHNreWJsdWUnOyAgICBcbiAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIHRoaXMuY3R4Lm1vdmVUbygwLCBCb2FyZC5HUklEX0hFSUdIVCAvIDIgKiBWaWV3LlNRVUFSRV9ESU0pO1xuICAgICAgICB0aGlzLmN0eC5saW5lVG8oKEJvYXJkLkdSSURfSEVJR0hULTEpICogVmlldy5TUVVBUkVfRElNLCBCb2FyZC5HUklEX0hFSUdIVCAvIDIgKiBWaWV3LlNRVUFSRV9ESU0pO1xuICAgICAgICB0aGlzLmN0eC5zdHJva2UoKTtcbiAgICB9XG5cbiAgICBkcmF3RW5kVHVybkJ1dHRvbigpIHtcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gJ2xpZ2h0c2t5Ymx1ZSc7ICAgICAgICBcbiAgICAgICAgdGhpcy5jdHguZmlsbFJlY3QoXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiA0LFxuICAgICAgICAgICAgKEJvYXJkLkdSSURfSEVJR0hUKzAuMjUpICogVmlldy5TUVVBUkVfRElNLFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogMSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIDAuNSk7XG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gJ2Nvcm5mbG93ZXJibHVlJztcbiAgICAgICAgdGhpcy5jdHgubGluZVdpZHRoID0gMTtcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlUmVjdChcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIDQsXG4gICAgICAgICAgICAoQm9hcmQuR1JJRF9IRUlHSFQrMC4yNSkgKiBWaWV3LlNRVUFSRV9ESU0sXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAxLFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogMC41KTtcbiAgICAgICAgdGhpcy5jdHguZm9udCA9IFwiMjVweCBDb3BwZXJwbGF0ZVwiO1xuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBcImRpbWdyZXlcIjtcbiAgICAgICAgdGhpcy5jdHgubGluZVdpZHRoID0gMjtcbiAgICAgICAgdGhpcy5jdHguZmlsbFRleHQoXCJFbmRcIiwgNC4yNSAqIFZpZXcuU1FVQVJFX0RJTSwgKEJvYXJkLkdSSURfSEVJR0hUKzAuNDUpICogVmlldy5TUVVBUkVfRElNKTtcbiAgICAgICAgdGhpcy5jdHguZmlsbFRleHQoXCJUdXJuXCIsIDQuMTUgKiBWaWV3LlNRVUFSRV9ESU0sIChCb2FyZC5HUklEX0hFSUdIVCswLjY1KSAqIFZpZXcuU1FVQVJFX0RJTSk7XG4gICAgfVxuXG4gICAgZHJhd01lbnUocG9zKSB7XG4gICAgICAgIGNvbnN0IGdyaWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XG4gICAgICAgIGdyaWQuY2xhc3NMaXN0LmFkZChcImdyaWRcIik7XG5cbiAgICAgICAgZ3JpZC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgZ3JpZC5zdHlsZS5yaWdodCA9IFwiNy41JVwiO1xuICAgICAgICBncmlkLnN0eWxlLmJvdHRvbSA9IFwiY2FsYygwLjIlIC0gMzJweClcIjtcbiAgICAgICAgZ3JpZC5zdHlsZS53aWR0aCA9IFwiY2FsYygxNC4yOSUgLSA0MHB4KVwiO1xuICAgICAgICBncmlkLnN0eWxlLmhlaWdodCA9IFwiNS44NSVcIjtcblxuICAgICAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoXCJtZW51XCIpXG4gICAgICAgIGNlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJsaWdodHNreWJsdWVcIjtcbiAgICAgICAgY2VsbC5zdHlsZS5ib3JkZXIgPSBcIjFweCBzb2xpZCBjb3JuZmxvd2VyYmx1ZVwiO1xuICAgICAgICBjZWxsLnN0eWxlLmhlaWdodCA9IFwiY2FsYygxMDAlIC0gMnB4KVwiO1xuICAgICAgICBjZWxsLnN0eWxlLndpZHRoID0gXCJjYWxjKDEwMCUgLSAycHgpXCI7XG4gICAgICAgIGNlbGwuc3R5bGUubGVmdCA9IFwiMHB4XCI7XG5cbiAgICAgICAgY2VsbC5zdHlsZS5saXN0U3R5bGUgPSBcIm5vbmVcIjtcbiAgICAgICAgY2VsbC5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgY2VsbC5pbm5lckhUTUwgPSBcIk1lbnVcIlxuICAgICAgICBjZWxsLnN0eWxlLmZvbnQgPSAoMjUqdGhpcy5yYXRpbykgKyBcInB4IENvcHBlcnBsYXRlXCJcblxuICAgICAgICBjZWxsLnN0eWxlLmNvbG9yID0gXCJkaW1ncmV5XCJcbiAgICAgICAgY2VsbC5zdHlsZS50ZXh0QWxpZ24gPSBcImNlbnRlclwiXG4gICAgICAgIGNlbGwuc3R5bGUubGluZUhlaWdodCA9IFwiMjAwJVwiXG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcImJ1dHRvblwiKTtcblxuICAgICAgICBncmlkLmFwcGVuZENoaWxkKGNlbGwpO1xuICAgICAgICAvLyB0aGlzLmVsLmFwcGVuZENoaWxkKGdyaWQpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiYmFja2dyb3VuZFwiKVswXS5hcHBlbmRDaGlsZChncmlkKVxuXG4gICAgICAgIHRoaXMuZHJhd01lbnVPcHRpb25zKHBvcywgY2VsbCk7XG4gICAgICAgIGNvbnN0IHJ1bGVCb3ggPSB0aGlzLmRyYXdSdWxlcyhwb3MpO1xuICAgICAgICBjb25zdCBhYm91dEJveCA9IHRoaXMuZHJhd0Fib3V0KHBvcyk7XG5cbiAgICAgICAgY29uc3Qgd2luZG93UmVzaXplID0gd2luZG93Lm9ucmVzaXplO1xuICAgICAgICB3aW5kb3cub25yZXNpemUgPSAoKSA9PiB7XG4gICAgICAgICAgICB3aW5kb3dSZXNpemUoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMucmF0aW8gPCAwLjY3KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yYXRpbyA9IDAuNjc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBydWxlQm94LnN0eWxlLmZvbnQgPSAoMTkqdGhpcy5yYXRpbyAtIDIpICsgXCJweCBDb3BwZXJwbGF0ZVwiXG4gICAgICAgICAgICBydWxlQm94LnN0eWxlLmxpbmVIZWlnaHQgPSBcIjEwMCVcIlxuICAgICAgICAgICAgYWJvdXRCb3guc3R5bGUuZm9udCA9ICgyMCp0aGlzLnJhdGlvIC0gMikgKyBcInB4IENvcHBlcnBsYXRlXCJcbiAgICAgICAgICAgIGFib3V0Qm94LnN0eWxlLmxpbmVIZWlnaHQgPSBcIjM1MCVcIlxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZHJhd01lbnVPcHRpb25zKHBvcywgY2VsbCkge1xuICAgICAgICBjb25zdCBtZW51ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xuICAgICAgICBtZW51LmNsYXNzTGlzdC5hZGQoXCJtZW51XCIpO1xuXG4gICAgICAgIG1lbnUuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgIG1lbnUuc3R5bGUucmlnaHQgPSBcIjcuNSVcIjtcbiAgICAgICAgbWVudS5zdHlsZS5ib3R0b20gPSBcImNhbGMoNS44NSUgLSAxNnB4KVwiO1xuICAgICAgICBtZW51LnN0eWxlLndpZHRoID0gXCJjYWxjKDE0LjI5JSAtIDQycHgpXCI7XG4gICAgICAgIG1lbnUuc3R5bGUuaGVpZ2h0ID0gXCJjYWxjKDUuODUlIC0gMnB4KVwiO1xuICAgIFxuICAgICAgICBjb25zdCBydWxlcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICAgICAgdGhpcy5kcmF3QnV0dG9uKFwiUnVsZXNcIiwgcnVsZXMsIHt4OiBcIjAlXCIsIHk6IFwiMTAwJVwifSk7XG4gICAgICAgIHJ1bGVzLmNsYXNzTGlzdC5hZGQoXCJydWxlc1wiKTtcbiAgICAgICAgY29uc3QgYWJvdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgICAgIHRoaXMuZHJhd0J1dHRvbihcIkFib3V0XCIsIGFib3V0LCB7eDogXCIwJVwiLCB5OiBcIjAlXCJ9KTtcbiAgICAgICAgYWJvdXQuY2xhc3NMaXN0LmFkZChcImFib3V0XCIpO1xuXG4gICAgICAgIHJ1bGVzLnN0eWxlLmZvbnQgPSAyMCp0aGlzLnJhdGlvICsgXCJweCBDb3BwZXJwbGF0ZVwiO1xuICAgICAgICBydWxlcy5zdHlsZS5saW5lSGVpZ2h0ID0gXCIyNTAlXCJcbiAgICAgICAgYWJvdXQuc3R5bGUuZm9udCA9IDIwKnRoaXMucmF0aW8gKyBcInB4IENvcHBlcnBsYXRlXCI7XG4gICAgICAgIGFib3V0LnN0eWxlLmxpbmVIZWlnaHQgPSBcIjI1MCVcIlxuXG4gICAgICAgIG1lbnUuYXBwZW5kQ2hpbGQocnVsZXMpO1xuICAgICAgICBtZW51LmFwcGVuZENoaWxkKGFib3V0KTtcbiAgICAgICAgbWVudS5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbidcblxuICAgICAgICB3aW5kb3cub25yZXNpemUgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJhdGlvID0gTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgd2luZG93LmlubmVySGVpZ2h0IC8gdGhpcy5jdHguY2FudmFzLmhlaWdodCxcbiAgICAgICAgICAgICAgICB3aW5kb3cuaW5uZXJXaWR0aCAvIHRoaXMuY3R4LmNhbnZhcy53aWR0aFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgaWYgKHRoaXMucmF0aW8gPCAwLjY3KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yYXRpbyA9IDAuNjc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjZWxsLnN0eWxlLmZvbnQgPSAoMjUqdGhpcy5yYXRpbykgKyBcInB4IENvcHBlcnBsYXRlXCJcbiAgICAgICAgICAgIGNlbGwuc3R5bGUubGluZUhlaWdodCA9IFwiMjAwJVwiXG5cbiAgICAgICAgICAgIHJ1bGVzLnN0eWxlLmZvbnQgPSAoMjAqdGhpcy5yYXRpbykgKyBcInB4IENvcHBlcnBsYXRlXCJcbiAgICAgICAgICAgIHJ1bGVzLnN0eWxlLmxpbmVIZWlnaHQgPSBcIjI1MCVcIlxuICAgICAgICAgICAgYWJvdXQuc3R5bGUuZm9udCA9ICgyMCp0aGlzLnJhdGlvKSArIFwicHggQ29wcGVycGxhdGVcIlxuICAgICAgICAgICAgYWJvdXQuc3R5bGUubGluZUhlaWdodCA9IFwiMjUwJVwiXG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGlzLmVsLmFwcGVuZENoaWxkKG1lbnUpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiYmFja2dyb3VuZFwiKVswXS5hcHBlbmRDaGlsZChtZW51KVxuICAgIH1cblxuICAgIGRyYXdSdWxlcyhwb3MpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XG4gICAgICAgIHRpdGxlLmNsYXNzTGlzdC5hZGQoXCJydWxlc3RpdGxlXCIpO1xuICAgICAgICB0aGlzLmRyYXdNZW51RGlzcGxheUJveChcIkhvdyBUbyBQbGF5Jm5ic3A7Jm5ic3A7Jm5ic3A7XCIsIHRpdGxlLCB0aXRsZSk7XG4gICAgXG4gICAgICAgIGNvbnN0IHJ1bGVzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgICAgICB0aGlzLmRyYXdNZW51SW5uZXJEaXNwbGF5Qm94KFwiU3RlYWwgdGhlIGVuZW15J3MgdHJlYXN1cmUgJiBicmluZyBpdCBiYWNrIHRvIHlvdXIgYmFzZSE8cD5CVVlJTkcgfCBTZWxlY3QgdGhlIGJhcnJhY2tzIHRvIGJ1eSB0cm9vcHMuIEFsbCB1bml0cyBjYW4gbW92ZSB1cCB0byAyIHNwYWNlcyBpbiBhbnkgZGlyZWN0aW9uLiBUaGVyZSBhcmUgMyB0eXBlcyBvZiB0cm9vcHM6PC9wPi1JbmZhbnRyeTogRGVmZW5zZSAyLCBBdHRhY2sgMSwgUmFuZ2UgMTxicj4tQXJjaGVyOiBEZWZlbnNlIDEsIEF0dGFjayAxLCBSYW5nZSAzPGJyPi1EZWZlbmRlcjogRGVmZW5zZSAzLCBBdHRhY2sgMSwgUmFuZ2UgMTxicj48cD5VUEdSQURJTkcgfCBXaGVuIGluIGVuZW15IHRlcnJpdG9yeSwgdW5pdHMgY2FuIGJlIHVncmFkZWQgYXMgZm9sbG93czo8L3A+LUluZmFudHJ5OiBEZWZlbnNlICsxLCBBdHRhY2sgKzI8YnI+LUFyY2hlcjogRGVmZW5zZSArMSwgQXR0YWNrICsxPGJyPi1EZWZlbmRlcjogRGVmZW5zZSArMiwgQXR0YWNrICswPGJyPjxwPlVuaXRzIGNhbm5vdCBhdHRhY2sgYWZ0ZXIgdXBncmFkaW5nIHVudGlsIHRoZSBuZXh0IHJvdW5kLiBTdGF0cyByZXR1cm4gdG8gbm9ybWFsIG9uY2UgcmV0dXJuaW5nIHRvIGZyaWVuZGx5IHRlcnJpdG9yeS48L3A+PHA+VFJFQVNVUkUgfCBQaWNrIHVwIHRoZSB0cmVhc3VyZSBieSBtb3ZpbmcgYSB1bml0IG9udG8gdGhlIHNxdWFyZSBjb250YWluaW5nIGl0LiAoWW91IGNhbiBvbmx5IHBpY2sgdXAgZW5lbXkgdHJlYXN1cmUuKTwvcD48cD5QUklDRSBDSEFSVDxicj5Nb3Zpbmcgb3IgQXR0YWNraW5nOiAxIEFjdGlvbiBQb2ludDxicj5CdXlpbmcgb3IgVXBncmFkaW5nOiAyIEFjdGlvbiBQb2ludHM8L3A+XCIsXG4gICAgICAgIHJ1bGVzLCB0aXRsZSk7XG4gICAgICAgIHJ1bGVzLnN0eWxlLmZvbnQgPSBcIjEycHggQ29wcGVycGxhdGVcIjtcbiAgICAgICAgaWYgKHRoaXMucmF0aW8gPCAwLjY3KSB7XG4gICAgICAgICAgICB0aGlzLnJhdGlvID0gMC42NztcbiAgICAgICAgfVxuICAgICAgICBydWxlcy5zdHlsZS5mb250ID0gKDE5KnRoaXMucmF0aW8gLSAyKSArIFwicHggQ29wcGVycGxhdGVcIlxuICAgICAgICBydWxlcy5zdHlsZS5saW5lSGVpZ2h0ID0gXCIxMDAlXCI7XG4gICAgICAgIHJ1bGVzLmNsYXNzTGlzdC5hZGQoXCJydWxlc2JveFwiKTtcblxuICAgICAgICB0aXRsZS5hcHBlbmRDaGlsZChydWxlcyk7XG4gICAgICAgIC8vIHRpdGxlLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJ1xuICAgICAgICAvLyB0aGlzLmVsLmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImJhY2tncm91bmRcIilbMF0uYXBwZW5kQ2hpbGQodGl0bGUpXG4gICAgICAgIHJldHVybiBydWxlcztcbiAgICB9XG5cbiAgICBkcmF3QWJvdXQocG9zKSB7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xuICAgICAgICB0aXRsZS5jbGFzc0xpc3QuYWRkKFwiYWJvdXR0aXRsZVwiKTtcblxuICAgICAgICB0aGlzLmRyYXdNZW51RGlzcGxheUJveChcIkFib3V0Jm5ic3A7Jm5ic3A7Jm5ic3A7XCIsIHRpdGxlLCB0aXRsZSk7XG4gICAgXG4gICAgICAgIGNvbnN0IGFib3V0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgICAgICB0aGlzLmRyYXdNZW51SW5uZXJEaXNwbGF5Qm94KFwiPGJyPjxicj48cD5HYW1lIGRldmVsb3BlZCBieSA8YSBocmVmPSdodHRwczovL3d3dy5saW5rZWRpbi5jb20vaW4vamRpcmtzZW4vJz5KYXNtaW5lIEtvYmF0YTwvYT48L3A+PHA+PGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL0phc21pbmVLb2JhdGEvSmF2YXNjcmlwdC1Qcm9qZWN0Jz5UcmVhc3VyZSBXYXJzISBHaXRIdWIgUmVwbzwvcD48cD48YSBocmVmPSdodHRwczovL3d3dy5hcHBhY2FkZW15LmlvLyc+QXBwIEFjYWRlbXk8L2E+IEphdmFzY3JpcHQgUHJvamVjdDwvcD5cIiwgYWJvdXQsIHRpdGxlKTtcbiAgICAgICAgaWYgKHRoaXMucmF0aW8gPCAwLjY3KSB7XG4gICAgICAgICAgICB0aGlzLnJhdGlvID0gMC42NztcbiAgICAgICAgfVxuICAgICAgICBhYm91dC5zdHlsZS5mb250ID0gKDIwKnRoaXMucmF0aW8gLSAyKSArIFwicHggQ29wcGVycGxhdGVcIjtcbiAgICAgICAgYWJvdXQuc3R5bGUubGluZUhlaWdodCA9IFwiMzUwJVwiXG4gICAgICAgIGFib3V0LmNsYXNzTGlzdC5hZGQoXCJhYm91dGJveFwiKTtcblxuICAgICAgICB0aXRsZS5hcHBlbmRDaGlsZChhYm91dCk7XG4gICAgICAgIHRpdGxlLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJ1xuICAgICAgICAvLyB0aGlzLmVsLmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImJhY2tncm91bmRcIilbMF0uYXBwZW5kQ2hpbGQodGl0bGUpXG4gICAgICAgIHJldHVybiBhYm91dDtcbiAgICB9XG5cbiAgICBkcmF3TWVudURpc3BsYXlCb3goc3RyLCBib3gsIHRpdGxlKSB7XG4gICAgICAgIGJveC5zdHlsZS53aWR0aCA9IFwiY2FsYyg3NSUgLSA0MnB4KVwiXG4gICAgICAgIGJveC5zdHlsZS5oZWlnaHQgPSBcImNhbGMoNzUlIC0gMnB4KVwiXG4gICAgICAgIGJveC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImxpZ2h0c2t5Ymx1ZVwiO1xuICAgICAgICBib3guc3R5bGUuYm9yZGVyID0gXCIxcHggc29saWQgY29ybmZsb3dlcmJsdWVcIjtcbiAgICAgICAgYm94LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICBib3guc3R5bGUubGVmdCA9IFwiNTAlXCI7XG4gICAgICAgIGJveC5zdHlsZS50b3AgPSBcIjQ1JVwiO1xuICAgICAgICBib3guc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoLTUwJSwgLTUwJSlcIjtcbiAgICAgICAgYm94LnN0eWxlLm1hcmdpbiA9IFwiMHB4XCJcbiAgICAgICAgYm94LnN0eWxlLmxpc3RTdHlsZSA9IFwibm9uZVwiO1xuICAgICAgICBib3guc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XG4gICAgICAgIGJveC5pbm5lckhUTUwgPSBzdHI7XG4gICAgICAgIGlmICh0aGlzLnJhdGlvIDwgMC42Nykge1xuICAgICAgICAgICAgdGhpcy5yYXRpbyA9IDAuNjc7XG4gICAgICAgIH1cbiAgICAgICAgYm94LnN0eWxlLmZvbnQgPSAoMzAqdGhpcy5yYXRpbyAtIDIpICsgXCJweCBDb3BwZXJwbGF0ZVwiXG4gICAgICAgIGJveC5zdHlsZS5jb2xvciA9IFwiZGltZ3JleVwiXG4gICAgICAgIGJveC5zdHlsZS50ZXh0QWxpZ24gPSBcImNlbnRlclwiXG4gICAgICAgIGJveC5zdHlsZS5saW5lSGVpZ2h0ID0gXCIyNTAlXCI7XG5cbiAgICAgICAgY29uc3Qgd2luZG93UmVzaXplID0gd2luZG93Lm9ucmVzaXplO1xuICAgICAgICB3aW5kb3cub25yZXNpemUgPSAoKSA9PiB7XG4gICAgICAgICAgICB3aW5kb3dSZXNpemUoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMucmF0aW8gPCAwLjY3KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yYXRpbyA9IDAuNjc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBib3guc3R5bGUuZm9udCA9ICgzMCp0aGlzLnJhdGlvIC0gMikgKyBcInB4IENvcHBlcnBsYXRlXCJcbiAgICAgICAgICAgIGJveC5zdHlsZS5saW5lSGVpZ2h0ID0gXCIyNTAlXCI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkcmF3TWVudUlubmVyRGlzcGxheUJveChzdHIsIGJveCwgdGl0bGUpIHtcbiAgICAgICAgYm94LnN0eWxlLndpZHRoID0gXCJjYWxjKDgwJSAtIDQycHgpXCJcbiAgICAgICAgYm94LnN0eWxlLmhlaWdodCA9IFwiY2FsYyg4MCUgLSAycHgpXCJcbiAgICAgICAgYm94LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiY29ybmZsb3dlcmJsdWVcIjtcbiAgICAgICAgYm94LnN0eWxlLmJvcmRlciA9IFwiMXB4IHNvbGlkIGNvcm5mbG93ZXJibHVlXCI7XG4gICAgICAgIGJveC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgYm94LnN0eWxlLmxlZnQgPSBcIjUwJVwiO1xuICAgICAgICBib3guc3R5bGUudG9wID0gXCI1MCVcIjtcbiAgICAgICAgYm94LnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKC01MCUsIC01MCUpXCI7XG4gICAgICAgIC8vIGJveC5zdHlsZS5tYXJnaW4gPSBcIjBweFwiO1xuICAgICAgICBib3guc3R5bGUubGlzdFN0eWxlID0gXCJub25lXCI7XG4gICAgICAgIGJveC5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgYm94LmlubmVySFRNTCA9IHN0cjtcbiAgICAgICAgYm94LnN0eWxlLmZvbnQgPSBcIjI1cHggQ29wcGVycGxhdGVcIlxuICAgICAgICBib3guc3R5bGUuY29sb3IgPSBcIndoaXRlXCJcbiAgICB9XG5cbiAgICBkcmF3QnV0dG9uKHN0ciwgY2VsbCwgcG9zKSB7XG4gICAgICAgIGNlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJsaWdodHNreWJsdWVcIjtcbiAgICAgICAgY2VsbC5zdHlsZS5ib3JkZXIgPSBcIjFweCBzb2xpZCBjb3JuZmxvd2VyYmx1ZVwiO1xuICAgICAgICBjZWxsLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gICAgICAgIGNlbGwuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG4gICAgICAgIGNlbGwuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgIGNlbGwuc3R5bGUucmlnaHQgPSBwb3MueDtcbiAgICAgICAgY2VsbC5zdHlsZS5ib3R0b20gPSBwb3MueTtcbiAgICAgICAgY2VsbC5zdHlsZS5tYXJnaW4gPSBcIjBweFwiXG4gICAgICAgIGNlbGwuc3R5bGUubGlzdFN0eWxlID0gXCJub25lXCI7XG4gICAgICAgIGNlbGwuc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XG4gICAgICAgIGNlbGwuaW5uZXJIVE1MID0gc3RyXG4gICAgICAgIGNlbGwuc3R5bGUuY29sb3IgPSBcImRpbWdyZXlcIlxuICAgICAgICBjZWxsLnN0eWxlLnRleHRBbGlnbiA9IFwiY2VudGVyXCJcbiAgICB9XG5cbiAgICB1cGRhdGVOb01vcmVNb3Zlc1N0cigpIHtcbiAgICAgICAgbGV0IHN0ciA9IFwiPGJyPk5vIE1vdmVzIExlZnQhPC9icj5cIjtcbiAgICAgICAgc3RyICs9IHRoaXMuZ2FtZS5jdXJyZW50UGxheWVyLnRlYW0gPT09IEJvYXJkLlBMQVlFUl9URUFNID8gXCJSZWRcIiA6IFwiQmx1ZVwiO1xuICAgICAgICBzdHIgKz0gXCIncyBUdXJuP1wiXG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgZHJhd05vTW9yZU1vdmVzTW9kdWxlKCkge1xuICAgICAgICBjb25zdCBiYWNrZ3JvdW5kID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgYmFja2dyb3VuZC5jbGFzc0xpc3QuYWRkKFwibW92ZXNCYWNrZ3JvdW5kXCIpXG4gICAgICAgIGJhY2tncm91bmQuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgICAgICAgYmFja2dyb3VuZC5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcbiAgICAgICAgYmFja2dyb3VuZC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgYmFja2dyb3VuZC5zdHlsZS50b3AgPSBcIjBweFwiO1xuICAgICAgICBiYWNrZ3JvdW5kLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuXG4gICAgICAgIGNvbnN0IG1vZHVsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiKTtcbiAgICAgICAgbW9kdWxlLmNsYXNzTGlzdC5hZGQoXCJub01vcmVNb3Zlc1wiKTtcblxuICAgICAgICBtb2R1bGUuc3R5bGUud2lkdGggPSBcImNhbGMoNDAlIC0gNDJweClcIlxuICAgICAgICBtb2R1bGUuc3R5bGUuaGVpZ2h0ID0gXCJjYWxjKDE4JSAtIDJweClcIlxuICAgICAgICBtb2R1bGUuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJsaWdodHNreWJsdWVcIjtcbiAgICAgICAgbW9kdWxlLnN0eWxlLmJvcmRlciA9IFwiMXB4IHNvbGlkIGNvcm5mbG93ZXJibHVlXCI7XG4gICAgICAgIG1vZHVsZS5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgbW9kdWxlLnN0eWxlLmxlZnQgPSBcIjUwJVwiO1xuICAgICAgICBtb2R1bGUuc3R5bGUudG9wID0gXCI0NSVcIjtcbiAgICAgICAgbW9kdWxlLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKC01MCUsIC01MCUpXCI7XG4gICAgICAgIG1vZHVsZS5zdHlsZS5tYXJnaW4gPSBcIjBweFwiXG4gICAgICAgIG1vZHVsZS5zdHlsZS5wYWRkaW5nTGVmdCA9IFwiMTBweFwiO1xuICAgICAgICBtb2R1bGUuc3R5bGUucGFkZGluZ1JpZ2h0ID0gbW9kdWxlLnN0eWxlLnBhZGRpbmdMZWZ0O1xuICAgICAgICBtb2R1bGUuc3R5bGUubGlzdFN0eWxlID0gXCJub25lXCI7XG4gICAgICAgIG1vZHVsZS5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgbW9kdWxlLnN0eWxlLmZvbnQgPSAoMjcqdGhpcy5yYXRpbyAtIDIpICsgXCJweCBDb3BwZXJwbGF0ZVwiXG4gICAgICAgIG1vZHVsZS5zdHlsZS5jb2xvciA9IFwiZGltZ3JleVwiXG4gICAgICAgIG1vZHVsZS5zdHlsZS50ZXh0QWxpZ24gPSBcImNlbnRlclwiXG4gICAgICAgIFxuICAgICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwibW92ZXNCdXR0b25cIik7XG4gICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBcIk9LXCJcbiAgICAgICAgYnV0dG9uLnN0eWxlLndpZHRoID0gXCI1MCVcIlxuICAgICAgICBidXR0b24uc3R5bGUuaGVpZ2h0ID0gXCJjYWxjKDE4JSAtIDJweClcIlxuICAgICAgICBidXR0b24uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJjb3JuZmxvd2VyYmx1ZVwiO1xuICAgICAgICBidXR0b24uc3R5bGUuYm9yZGVyID0gXCIxcHggc29saWQgY29ybmZsb3dlcmJsdWVcIjtcbiAgICAgICAgYnV0dG9uLnN0eWxlLm1hcmdpbkxlZnQgPSBcImF1dG9cIjtcbiAgICAgICAgYnV0dG9uLnN0eWxlLm1hcmdpblJpZ2h0ID0gXCJhdXRvXCI7XG4gICAgICAgIGJ1dHRvbi5zdHlsZS5tYXJnaW5Ub3AgPSBcIjExJVwiXG4gICAgICAgIGJ1dHRvbi5zdHlsZS5jb2xvciA9IFwid2hpdGVcIlxuXG4gICAgICAgIGNvbnN0IHdpbmRvd1Jlc2l6ZSA9IHdpbmRvdy5vbnJlc2l6ZTtcbiAgICAgICAgd2luZG93Lm9ucmVzaXplID0gKCkgPT4ge1xuICAgICAgICAgICAgd2luZG93UmVzaXplKCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnJhdGlvIDwgMC42Nykge1xuICAgICAgICAgICAgICAgIHRoaXMucmF0aW8gPSAwLjY3O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbW9kdWxlLnN0eWxlLmZvbnQgPSAoMjcqdGhpcy5yYXRpbyAtIDIpICsgXCJweCBDb3BwZXJwbGF0ZVwiXG4gICAgICAgICAgICAvLyBydWxlQm94LnN0eWxlLmxpbmVIZWlnaHQgPSBcIjEwMCVcIlxuICAgICAgICB9XG5cbiAgICAgICAgbW9kdWxlLmFwcGVuZENoaWxkKGJ1dHRvbik7XG4gICAgICAgIGJhY2tncm91bmQuYXBwZW5kQ2hpbGQobW9kdWxlKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImJhY2tncm91bmRcIilbMF0uYXBwZW5kQ2hpbGQoYmFja2dyb3VuZClcblxuICAgICAgICAvLyB0aGlzLmJpbmRNb3Zlc0J1dHRvbigpO1xuICAgICAgICByZXR1cm4gYmFja2dyb3VuZDtcbiAgICB9XG5cbiAgICBkcmF3V2lubmluZ1NjcmVlbigpIHtcbiAgICAgICAgbGV0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBpbWcuc3JjID0gJy4vcmVzb3VyY2VzL3dvb2QucG5nJztcbiAgICAgICAgaW1nLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY3R4LmRyYXdJbWFnZShcbiAgICAgICAgICAgICAgICBpbWcsXG4gICAgICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogTWF0aC5mbG9vcigoQm9hcmQuR1JJRF9XSURUSC0yKSAvIDIpLFxuICAgICAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIChNYXRoLmZsb29yKChCb2FyZC5HUklEX0hFSUdIVC0yKSAvIDIpKzAuMjUpLFxuICAgICAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIDMsIFZpZXcuU1FVQVJFX0RJTSAqIDEuNSk7XG4gICAgICAgICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpO1xuXG4gICAgICAgICAgICB0aGlzLmN0eC5mb250ID0gXCIzMHB4IENvcHBlcnBsYXRlXCI7XG4gICAgICAgICAgICB0aGlzLmN0eC5saW5lV2lkdGggPSAzO1xuICAgICAgICAgICAgbGV0IHN0ciA9IFwiXCI7XG4gICAgICAgICAgICBpZiAodGhpcy5nYW1lLmN1cnJlbnRQbGF5ZXIudGVhbSA9PT0gQm9hcmQuUExBWUVSX1RFQU0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBcImJsdWVcIjtcbiAgICAgICAgICAgICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9IFwiZGFya2JsdWVcIjtcbiAgICAgICAgICAgICAgICBzdHIgKz0gXCJCbHVlXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IFwicmVkXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSBcIm1hcm9vblwiO1xuICAgICAgICAgICAgICAgIHN0ciArPSBcIlJlZFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RyICs9IFwiIFZpY3RvcnkhXCJcbiAgICAgICAgICAgIHRoaXMuY3R4LnN0cm9rZVRleHQoc3RyLFxuICAgICAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIChCb2FyZC5HUklEX1dJRFRIIC8gMiAtIDEpLFxuICAgICAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIChCb2FyZC5HUklEX0hFSUdIVCAvIDIgLSAwLjI1KSk7XG4gICAgICAgICAgICB0aGlzLmN0eC5maWxsVGV4dChzdHIsXG4gICAgICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogKEJvYXJkLkdSSURfV0lEVEggLyAyIC0gMSksXG4gICAgICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogKEJvYXJkLkdSSURfSEVJR0hUIC8gMiAtIDAuMjUpKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5kcmF3UGxheUFnYWluQnV0dG9uKCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZHJhd1BsYXlBZ2FpbkJ1dHRvbigpIHtcbiAgICAgICAgdGhpcy5jdHgubGluZVdpZHRoID0gMjtcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gJ2Nvcm5mbG93ZXJibHVlJzsgIFxuICAgICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9ICcjNTQzMDAwJzsgICAgICBcbiAgICAgICAgdGhpcy5jdHguZmlsbFJlY3QoXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAoQm9hcmQuR1JJRF9XSURUSCAvIDIgLSAwLjc1KSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIChNYXRoLmZsb29yKChCb2FyZC5HUklEX0hFSUdIVCkgLyAyKSksXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAxLjUsXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAwLjUpO1xuICAgICAgICB0aGlzLmN0eC5zdHJva2VSZWN0KFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogKEJvYXJkLkdSSURfV0lEVEggLyAyIC0gMC43NSksXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAoTWF0aC5mbG9vcigoQm9hcmQuR1JJRF9IRUlHSFQpIC8gMikpLFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogMS41LFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogMC41KTtcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSAnYmx1ZSc7XG4gICAgICAgIHRoaXMuY3R4LmZvbnQgPSBcIjI0cHggQ29wcGVycGxhdGVcIjtcbiAgICAgICAgdGhpcy5jdHgubGluZVdpZHRoID0gMTtcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xuICAgICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9IFwiZ3JleVwiXG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVRleHQoXCJQbGF5IEFnYWluP1wiLFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogKEJvYXJkLkdSSURfV0lEVEggLyAyIC0gMC43MCksXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAoQm9hcmQuR1JJRF9IRUlHSFQgLyAyICsgMC4zKSk7XG4gICAgICAgIHRoaXMuY3R4LmZpbGxUZXh0KFwiUGxheSBBZ2Fpbj9cIixcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIChCb2FyZC5HUklEX1dJRFRIIC8gMiAtIDAuNzApLFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogKEJvYXJkLkdSSURfSEVJR0hUIC8gMiArIDAuMykpO1xuICAgIH1cblxuICAgIGRyYXdVcGdyYWRlQ29uZmlybWF0aW9uKHBvcykge1xuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSAnbGlnaHRza3libHVlJzsgICAgICAgIFxuICAgICAgICB0aGlzLmN0eC5maWxsUmVjdChcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHBvcy54LFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogcG9zLnksXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAxLFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogMC4zNSk7XG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gJ2Nvcm5mbG93ZXJibHVlJztcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlUmVjdChcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHBvcy54LFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogcG9zLnksXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAxLFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogMC4zNSk7XG4gICAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IDE7XG4gICAgICAgIHRoaXMuY3R4LmZvbnQgPSBcIjIwcHggQ29wcGVycGxhdGVcIjtcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gXCJkaW1ncmV5XCI7XG4gICAgICAgIHRoaXMuY3R4LmZpbGxUZXh0KFwiVXBncmFkZT9cIixcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHBvcy54LFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogKHBvcy55ICsgMC4yNSkpO1xuICAgIH1cblxuICAgIGRyYXdCYXJyYWNrU2VsZWN0aW9uKHBvcykge1xuICAgICAgICBsZXQgbmV3UG9zID0gdGhpcy5hZGp1c3RNZW51UG9zaXRpb24ocG9zKTtcbiAgICAgICAgdGhpcy50ZWFtID09PSBCb2FyZC5FTkVNWV9URUFNID8gdGhpcy5jdHguZmlsbFN0eWxlID0gXCJyZWRcIiA6IHRoaXMuY3R4LmZpbGxTdHlsZSA9IFwiYmx1ZVwiO1xuICAgICAgICBsZXQgdHJvb3BTZWxlY3Rpb24gPSBbXTtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzLmJhcnJhY2sub25sb2FkKG5ld1Bvcyk7XG5cbiAgICAgICAgdGhpcy5jdHguZm9udCA9IFwiMzBweCBDb3BwZXJwbGF0ZVwiO1xuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBcIndoaXRlXCI7XG4gICAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IDM7XG4gICAgICAgIHRoaXMuY3R4LmZpbGxUZXh0KFwiQnV5IE5ldyBUcm9vcD9cIixcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIChuZXdQb3MueCArIDAuMzUpLFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogKG5ld1Bvcy55ICsgMC4zNSkpO1xuICAgIFxuICAgICAgICBsZXQgaW5mID0gbmV3IEluZmFudHJ5KHRoaXMuZ2FtZS5jdXJyZW50UGxheWVyLnRlYW0sIHt5OiBuZXdQb3MueSswLjUsIHg6IG5ld1Bvcy54fSk7XG4gICAgICAgIGxldCBhcmNoID0gbmV3IEFyY2hlcih0aGlzLmdhbWUuY3VycmVudFBsYXllci50ZWFtLCB7eTogbmV3UG9zLnkrMC41LCB4OiBuZXdQb3MueCsxfSk7XG4gICAgICAgIGxldCBkZWYgPSBuZXcgRGVmZW5kZXIodGhpcy5nYW1lLmN1cnJlbnRQbGF5ZXIudGVhbSwge3k6IG5ld1Bvcy55KzAuNSwgeDogbmV3UG9zLngrMn0pO1xuICAgICAgICBpbmYuYm9hcmQgPSB0aGlzLmdhbWUuYm9hcmQ7XG4gICAgICAgIGFyY2guYm9hcmQgPSB0aGlzLmdhbWUuYm9hcmQ7XG4gICAgICAgIGRlZi5ib2FyZCA9IHRoaXMuZ2FtZS5ib2FyZDtcbiAgICAgICAgaW5mLnZpZXcgPSB0aGlzLmdhbWUudmlldztcbiAgICAgICAgYXJjaC52aWV3ID0gdGhpcy5nYW1lLnZpZXc7XG4gICAgICAgIGRlZi52aWV3ID0gdGhpcy5nYW1lLnZpZXc7XG4gICAgICAgIHRyb29wU2VsZWN0aW9uLnB1c2goaW5mKTtcbiAgICAgICAgdHJvb3BTZWxlY3Rpb24ucHVzaChhcmNoKTtcbiAgICAgICAgdHJvb3BTZWxlY3Rpb24ucHVzaChkZWYpO1xuICAgICAgICB0cm9vcFNlbGVjdGlvbi5mb3JFYWNoKCAodW5pdCkgPT4ge1xuICAgICAgICAgICAgdW5pdC5kcmF3KHRoaXMuY3R4LCB0aGlzLmdhbWUuY3VycmVudFBsYXllcik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJvb3BTZWxlY3Rpb247XG4gICAgfVxuXG4gICAgYWRqdXN0TWVudVBvc2l0aW9uKHBvcykge1xuICAgICAgICBsZXQgbmV3UG9zID0ge307XG4gICAgICAgIHBvcy54ID09PSAwID8gbmV3UG9zLnggPSBwb3MueCArIDAuMjUgOiBuZXdQb3MueCA9IHBvcy54IC0gMi4yNTtcbiAgICAgICAgcG9zLnkgPT09IDAgPyBuZXdQb3MueSA9IHBvcy55ICsgMC41IDogbmV3UG9zLnkgPSBwb3MueSAtIDE7XG4gICAgICAgIHJldHVybiBuZXdQb3M7XG4gICAgfVxuXG4gICAgZHJhd091dGxpbmUocG9zKSB7XG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gJ3llbGxvdyc7XG4gICAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IDEwO1xuICAgICAgICB0aGlzLmN0eC5zdHJva2VSZWN0KFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogcG9zLngsXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiBwb3MueSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTVxuICAgICAgICApXG4gICAgfVxuXG4gICAgZHJhd01vdmVIaWdobGlnaHRzKHBvcykge1xuICAgICAgICB0aGlzLmRyYXdHcmlkU3F1YXJlKHBvcy54LCBwb3MueSwgJ3NlYWdyZWVuJywgXCJtZWRpdW1zZWFncmVlblwiKTtcbiAgICB9XG5cbiAgICBkcmF3QXR0YWNrSGlnaGxpZ2h0cyhwb3MpIHtcbiAgICAgICAgdGhpcy5kcmF3R3JpZFNxdWFyZShwb3MueCwgcG9zLnksIFwiY29ybmZsb3dlcmJsdWVcIiwgXCJsaWdodHNreWJsdWVcIilcbiAgICB9XG5cbiAgICBkcmF3R3JpZEVsZW1zKHBvcywgdW5pdFBvcywgY2xpY2tlZFBvcykge1xuICAgICAgICBsZXQgZ3JpZFNxdWFyZSA9IHRoaXMuZ2FtZS5ib2FyZC5ncmlkLmdldChwb3MpO1xuICAgICAgICBmb3IgKGxldCBpPTA7IGkgPCBncmlkU3F1YXJlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBncmlkU3F1YXJlW2ldLmRyYXcodGhpcy5jdHgsIHRoaXMuZ2FtZS5jdXJyZW50UGxheWVyLCB1bml0UG9zLCBjbGlja2VkUG9zKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcbiAgICB9XG5cbiAgICBkcmF3R3JpZFNxdWFyZSh4LCB5LCBvdXRsaW5lQ29sb3IsIGZpbGxDb2xvcikge1xuICAgICAgICBpZiAoZmlsbENvbG9yKSB7XG4gICAgICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBmaWxsQ29sb3I7XG4gICAgICAgICAgICB0aGlzLmN0eC5nbG9iYWxBbHBoYSA9IDAuNjA7XG4gICAgICAgICAgICB0aGlzLmN0eC5maWxsUmVjdChcbiAgICAgICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB4LFxuICAgICAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHksXG4gICAgICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNLFxuICAgICAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTVxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gb3V0bGluZUNvbG9yO1xuICAgICAgICB0aGlzLmN0eC5saW5lV2lkdGggPSAyO1xuICAgICAgICB0aGlzLmN0eC5zdHJva2VSZWN0KFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogeCxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHksXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0sXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU1cbiAgICAgICAgKVxuICAgICAgICB0aGlzLmN0eC5nbG9iYWxBbHBoYSA9IDE7XG4gICAgfVxuXG4gICAgcmVuZGVySW1nKCkge1xuICAgICAgICBsZXQgcGl4ZWxXaWR0aCA9IEJvYXJkLkdSSURfV0lEVEggKiBWaWV3LlNRVUFSRV9ESU07XG4gICAgICAgIGxldCBwaXhlbEhlaWdodCA9IChCb2FyZC5HUklEX0hFSUdIVCsxKSAqIFZpZXcuU1FVQVJFX0RJTTtcbiAgICAgICAgdGhpcy5jdHguY2FudmFzLndpZHRoID0gcGl4ZWxXaWR0aDtcbiAgICAgICAgdGhpcy5jdHguY2FudmFzLmhlaWdodCA9IHBpeGVsSGVpZ2h0O1xuICAgICAgICB0aGlzLnJhdGlvID0gTWF0aC5taW4oXG4gICAgICAgICAgICB3aW5kb3cuaW5uZXJIZWlnaHQgLyB0aGlzLmN0eC5jYW52YXMuaGVpZ2h0LFxuICAgICAgICAgICAgd2luZG93LmlubmVyV2lkdGggLyB0aGlzLmN0eC5jYW52YXMud2lkdGhcbiAgICAgICAgKVxuICAgICAgICAvLyB0aGlzLmN0eC5zY2FsZSh0aGlzLnJhdGlvLCB0aGlzLnJhdGlvKTtcbiAgICAgICAgbGV0IGltYWdlcyA9IHt9O1xuICAgICAgICBpbWFnZXMuYmFja2dyb3VuZCA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBpbWFnZXMuYmFja2dyb3VuZC5zcmMgPSBcIi4vcmVzb3VyY2VzL2dyYXNzMi5wbmdcIjtcbiAgICAgICAgaW1hZ2VzLmJhY2tncm91bmQub25sb2FkID0gKHVuaXRQb3MsIGNsaWNrZWRQb3MpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY3R4LmRyYXdJbWFnZShcbiAgICAgICAgICAgICAgICBpbWFnZXMuYmFja2dyb3VuZCwgMCwgMCxcbiAgICAgICAgICAgICAgIHBpeGVsV2lkdGgsIHBpeGVsSGVpZ2h0LFxuICAgICAgICAgICAgICAgMCwgMCxcbiAgICAgICAgICAgICAgIHBpeGVsV2lkdGgsIHBpeGVsSGVpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgdGhpcy5jdHguc3Ryb2tlKCk7XG4gICAgICAgICAgICB0aGlzLmRyYXdCb2FyZFdpdGhvdXRPbmxvYWQodW5pdFBvcywgY2xpY2tlZFBvcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpbWFnZXMuYmFycmFjayA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBpbWFnZXMuYmFycmFjay5zcmMgPSBcIi4vcmVzb3VyY2VzL3dvb2QucG5nXCI7XG4gICAgICAgIGltYWdlcy5iYXJyYWNrLm9ubG9hZCA9IChwb3MpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY3R4LmRyYXdJbWFnZShcbiAgICAgICAgICAgICAgICBpbWFnZXMuYmFycmFjayxcbiAgICAgICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiBwb3MueCxcbiAgICAgICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiBwb3MueSxcbiAgICAgICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAzLCBWaWV3LlNRVUFSRV9ESU0gKiAxLjUpO1xuICAgICAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICB0aGlzLmN0eC5zdHJva2UoKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gaW1hZ2VzO1xuICAgIH1cblxuICAgIC8vIGJhY2tncm91bmQuY2xhc3NMaXN0LmFkZChcIi5tb3Zlc0JhY2tncm91bmRcIilcbiAgICAvLyBtb2R1bGUuY2xhc3NMaXN0LmFkZChcIi5ub01vcmVNb3Zlc1wiKTtcbiAgICAvLyBidXR0b24uY2xhc3NMaXN0LmFkZChcIi5tb3Zlc0J1dHRvblwiKTtcblxuICAgIGJpbmRFdmVudHMoY3R4KSB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYnV0dG9uXCIpO1xuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuaGFuZGxlQnV0dG9uLmJpbmQodGhpcykpO1xuICAgICAgICBjb25zdCBhYm91dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWJvdXRcIik7XG4gICAgICAgIGlmIChhYm91dCkge2Fib3V0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhhbmRsZUFib3V0LmJpbmQodGhpcykpO31cbiAgICAgICAgY29uc3QgcnVsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJ1bGVzXCIpO1xuICAgICAgICBpZiAocnVsZXMpIHtydWxlcy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVSdWxlcy5iaW5kKHRoaXMpKTt9XG4gICAgICAgIGN0eC5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZUNsaWNrLmJpbmQodGhpcykpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVCYWNrZ3JvdW5kLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmJpbmRNb3Zlc0J1dHRvbigpO1xuICAgIH1cblxuICAgIGJpbmRNb3Zlc0J1dHRvbigpIHtcbiAgICAgICAgY29uc3QgbW92ZXNCYWNrZ3JvdW5kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb3Zlc0JhY2tncm91bmRcIik7XG4gICAgICAgIGlmIChtb3Zlc0JhY2tncm91bmQpIHtcbiAgICAgICAgICAgIG1vdmVzQmFja2dyb3VuZC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVNb3Zlc0JhY2tncm91bmQuYmluZCh0aGlzLCBtb3Zlc0JhY2tncm91bmQpKVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBtb3Zlc0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW92ZXNCdXR0b25cIik7XG4gICAgICAgIGlmIChtb3Zlc0J1dHRvbikge1xuICAgICAgICAgICAgbW92ZXNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuaGFuZGxlTW92ZXNCdXR0b24uYmluZCh0aGlzLCBtb3Zlc0JhY2tncm91bmQpKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbW92ZXNCdXR0b247XG4gICAgfVxuXG4gICAgaGFuZGxlQWJvdXQoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWJvdXR0aXRsZVwiKTtcbiAgICAgICAgdGhpcy5pbnZpc2lmeUJ1dHRvbnMoKTtcbiAgICAgICAgZS5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgIH1cblxuICAgIGhhbmRsZVJ1bGVzKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJ1bGVzdGl0bGVcIik7XG4gICAgICAgIHRoaXMuaW52aXNpZnlCdXR0b25zKCk7XG4gICAgICAgIGUuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICB9XG5cbiAgICBoYW5kbGVCdXR0b24oZXZlbnQpIHtcbiAgICAgICAgY29uc3QgZTEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFib3V0XCIpXG4gICAgICAgIGNvbnN0IGUyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5ydWxlc1wiKVxuXG4gICAgICAgIHRoaXMuaW52aXNpZnlCdXR0b25zKCk7XG4gICAgICAgIGUxLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgICAgIGUyLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgfVxuXG4gICAgaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgbGV0IHggPSBNYXRoLmZsb29yKGV2ZW50Lm9mZnNldFggLyAoVmlldy5TUVVBUkVfRElNICogdGhpcy5yYXRpbykpXG4gICAgICAgIGxldCB5ID0gTWF0aC5mbG9vcihldmVudC5vZmZzZXRZIC8gKFZpZXcuU1FVQVJFX0RJTSAqIHRoaXMucmF0aW8pKVxuICAgICAgICBsZXQgeEV4YWN0ID0gZXZlbnQub2Zmc2V0WCAvIChWaWV3LlNRVUFSRV9ESU0gKiB0aGlzLnJhdGlvKTtcbiAgICAgICAgbGV0IHlFeGFjdCA9IGV2ZW50Lm9mZnNldFkgLyAoVmlldy5TUVVBUkVfRElNICogdGhpcy5yYXRpbyk7XG4gICAgICAgIGxldCBwb3MgPSB7eSwgeH07XG4gICAgICAgIGxldCBwb3NFeGFjdCA9IHt5OiB5RXhhY3QsIHg6IHhFeGFjdH07XG5cbiAgICAgICAgaWYgKHRoaXMuZ2FtZS5ib2FyZC5pc1dvbigpKSB7XG4gICAgICAgIC8vICAgIHRoaXMuZHJhd1dpbm5pbmdTY3JlZW4oKTtcbiAgICAgICAgICAgIGlmICh3aWxsUGxheUFnYWluKHBvc0V4YWN0KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5yZXNldEdhbWUodGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3Qm9hcmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd0JvYXJkKCk7XG4gICAgICAgICAgICBpZiAoaXNPbkJvYXJkKHBvcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUuY3R4LmNsaWNrZWRQb3MgPSBwb3NcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUuY3R4LmV4YWN0UG9zID0gcG9zRXhhY3Q7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLmNhbGxTdGF0ZU1hY2hpbmUoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNCdXR0b24ocG9zRXhhY3QpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLnN3aXRjaFBsYXllcnMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdCb2FyZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlQmFja2dyb3VuZChldmVudCkge1xuICAgICAgICBpZiAoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYmFja2dyb3VuZFwiKS5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdCb2FyZCgpO1xuICAgICAgICAgICAgdGhpcy5nYW1lLnN0YXRlID0gXCJ1bnNlbGVjdGVkXCI7XG4gICAgICAgICAgICBjb25zdCBtb3Zlc0JhY2tncm91bmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vdmVzQmFja2dyb3VuZFwiKTtcbiAgICAgICAgICAgIGlmIChtb3Zlc0JhY2tncm91bmQpIG1vdmVzQmFja2dyb3VuZC5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZU1vdmVzQnV0dG9uKG1vdmVzQmFja2dyb3VuZCwgZXZlbnQpIHtcbiAgICAgICAgdGhpcy5nYW1lLnN3aXRjaFBsYXllcnMoKTtcbiAgICAgICAgbW92ZXNCYWNrZ3JvdW5kLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgICAgICB0aGlzLmRyYXdCb2FyZCgpO1xuICAgIH1cblxuICAgIGhhbmRsZU1vdmVzQmFja2dyb3VuZChtb3Zlc0JhY2tncm91bmQsIGV2ZW50KSB7XG4gICAgICAgIGlmICghZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5ub01vcmVNb3Zlc1wiKS5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgICBtb3Zlc0JhY2tncm91bmQuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYXdVcGdyYWRlQnV0dG9uKHVuaXQsIGN0eCwgeCwgeSkge1xuICAgIHVuaXQudGVhbSA9PT0gQm9hcmQuRU5FTVlfVEVBTSA/IGN0eC5maWxsU3R5bGUgPSBcInJlZFwiIDogY3R4LmZpbGxTdHlsZSA9IFwiYmx1ZVwiO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHguYXJjKFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB4ICsgVmlldy5TUVVBUkVfRElNICogLjE1LFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB5ICsgVmlldy5TUVVBUkVfRElNICogLjE1LFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAuMSxcbiAgICAgICAgMCwgMi4wICogTWF0aC5QSSk7XG4gICAgY3R4LmZpbGwoKTtcblxuICAgIGN0eC5maWxsU3R5bGUgPSBcIndoaXRlXCI7XG4gICAgY3R4LmZvbnQgPSBcIjMwcHggQ29wcGVycGxhdGVcIjtcbiAgICBjdHguZmlsbFRleHQoXCIrXCIsIFZpZXcuU1FVQVJFX0RJTSAqIHggKyBWaWV3LlNRVUFSRV9ESU0gKiAwLjA2LFxuICAgIFZpZXcuU1FVQVJFX0RJTSAqIHkgKyBWaWV3LlNRVUFSRV9ESU0gKiAuMjIpO1xufVxuXG5mdW5jdGlvbiBkcmF3U3RhdHModW5pdCwgY3R4LCB4LCB5KSB7XG4gICAgdW5pdC50ZWFtID09PSBCb2FyZC5FTkVNWV9URUFNID8gY3R4LmZpbGxTdHlsZSA9IFwicmVkXCIgOiBjdHguZmlsbFN0eWxlID0gXCJibHVlXCI7XG4gICAgY3R4LmZvbnQgPSBcIjM1cHggQ29wcGVycGxhdGVcIjtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSAnZGltZ3JleSc7XG4gICAgY3R4LmxpbmVXaWR0aCA9IDM7XG4gICAgY3R4LnN0cm9rZVRleHQoXG4gICAgICAgIFwiQVwiK3VuaXQuYXR0YWNrLnRvU3RyaW5nKCksXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHggKyBWaWV3LlNRVUFSRV9ESU0gKiAuMyxcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogeSArIFZpZXcuU1FVQVJFX0RJTSAqIC41MCk7XG4gICAgY3R4LnN0cm9rZVRleHQoXG4gICAgICAgIFwiRFwiK3VuaXQuZGVmZW5zZS50b1N0cmluZygpLFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB4ICsgVmlldy5TUVVBUkVfRElNICogLjMsXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHkgKyBWaWV3LlNRVUFSRV9ESU0gKiAuNzUpO1xuICAgIGN0eC5maWxsVGV4dChcbiAgICAgICAgXCJBXCIrdW5pdC5hdHRhY2sudG9TdHJpbmcoKSxcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogeCArIFZpZXcuU1FVQVJFX0RJTSAqIC4zLFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB5ICsgVmlldy5TUVVBUkVfRElNICogLjUwKTtcbiAgICBjdHguZmlsbFRleHQoXG4gICAgICAgIFwiRFwiK3VuaXQuZGVmZW5zZS50b1N0cmluZygpLFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB4ICsgVmlldy5TUVVBUkVfRElNICogLjMsXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHkgKyBWaWV3LlNRVUFSRV9ESU0gKiAuNzUpO1xufVxuXG5CYXJyYWNrLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oY3R4KSB7XG4gICAgdGhpcy50ZWFtID09PSBCb2FyZC5FTkVNWV9URUFNID8gY3R4LmZpbGxTdHlsZSA9IFwicmVkXCIgOiBjdHguZmlsbFN0eWxlID0gXCJibHVlXCI7XG4gICAgY3R4LmZpbGxSZWN0KFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB0aGlzLnBvcy54ICsgVmlldy5TUVVBUkVfRElNICogLjEwLFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB0aGlzLnBvcy55ICsgVmlldy5TUVVBUkVfRElNICogLjcwLFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAuODAsXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIC4yMCk7XG5cbiAgICB0aGlzLmltYWdlLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgY3R4LmRyYXdJbWFnZShcbiAgICAgICAgICAgIHRoaXMuaW1hZ2UsXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB0aGlzLnBvcy54LFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogdGhpcy5wb3MueSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSwgVmlldy5TUVVBUkVfRElNKTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfTtcbiAgICB0aGlzLmltYWdlLm9ubG9hZCgpO1xufVxuXG5CYXNlLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oY3R4KSB7XG4gICAgdGhpcy50ZWFtID09PSBCb2FyZC5FTkVNWV9URUFNID8gY3R4LmZpbGxTdHlsZSA9IFwicmVkXCIgOiBjdHguZmlsbFN0eWxlID0gXCJibHVlXCI7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5hcmMoXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHRoaXMucG9zLnggKyBWaWV3LlNRVUFSRV9ESU0gKiAuNTAsXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHRoaXMucG9zLnkgKyBWaWV3LlNRVUFSRV9ESU0gKiAuNTAsXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIC4zNSxcbiAgICAgICAgMCwgMi4wICogTWF0aC5QSSk7XG4gICAgY3R4LmZpbGwoKTtcbn1cblxuVHJlYXN1cmUucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihjdHgpIHtcbiAgICB0aGlzLmltYWdlLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgY3R4LmRyYXdJbWFnZShcbiAgICAgICAgICAgIHRoaXMuaW1hZ2UsXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB0aGlzLnBvcy54LFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogdGhpcy5wb3MueSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSwgVmlldy5TUVVBUkVfRElNKTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfTtcbiAgICB0aGlzLmltYWdlLm9ubG9hZCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZHJhd1VwZ3JhZGVDb25maXJtYXRpb24oY3R4LCBwb3MpIHtcbiAgICBjdHguZmlsbFN0eWxlID0gJ2xpZ2h0c2t5Ymx1ZSc7ICAgICAgICBcbiAgICBjdHguZmlsbFJlY3QoXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHBvcy54LFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiBwb3MueSxcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogMSxcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogMC4zNSk7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gJ2Nvcm5mbG93ZXJibHVlJztcbiAgICBjdHguc3Ryb2tlUmVjdChcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogcG9zLngsXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHBvcy55LFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAxLFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAwLjM1KTtcbiAgICBjdHgubGluZVdpZHRoID0gMTtcbiAgICBjdHguZm9udCA9IFwiMjBweCBDb3BwZXJwbGF0ZVwiO1xuICAgIGN0eC5maWxsU3R5bGUgPSBcImRpbWdyZXlcIjtcbiAgICBjdHguZmlsbFRleHQoXCJVcGdyYWRlP1wiLFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiBwb3MueCxcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogKHBvcy55ICsgMC4yNSkpO1xufVxuXG5Vbml0LnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oY3R4LCBjdXJyZW50UGxheWVyLCB1bml0UG9zLCBjbGlja2VkUG9zKSB7XG4gICAgdGhpcy50ZWFtID09PSBCb2FyZC5FTkVNWV9URUFNID8gY3R4LmZpbGxTdHlsZSA9IFwicmVkXCIgOiBjdHguZmlsbFN0eWxlID0gXCJibHVlXCI7XG5cbiAgICB0aGlzLmltYWdlLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgY3R4LmRyYXdJbWFnZShcbiAgICAgICAgICAgIHRoaXMuaW1hZ2UsXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB0aGlzLnBvcy54LFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogdGhpcy5wb3MueSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSwgVmlldy5TUVVBUkVfRElNKTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIGRyYXdTdGF0cyh0aGlzLCBjdHgsIHRoaXMucG9zLngsIHRoaXMucG9zLnkpO1xuICAgICAgICBpZiAodGhpcy5pc1VwZ3JhZGFibGUoY3VycmVudFBsYXllcikpIHtcbiAgICAgICAgICAgIGRyYXdVcGdyYWRlQnV0dG9uKHRoaXMsIGN0eCwgdGhpcy5wb3MueCwgdGhpcy5wb3MueSk7XG4gICAgICAgICAgICBpZiAodW5pdFBvcyAmJiBjbGlja2VkUG9zKSB7XG4gICAgICAgICAgICAgICAgZHJhd1VwZ3JhZGVDb25maXJtYXRpb24oY3R4LCB1bml0UG9zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5pbWFnZS5vbmxvYWQoKTtcbiAgICAvLyB0aGlzLmltYWdlLnNyYyA9IHRoaXMuaW1hZ2Uuc3JjO1xufVxuXG5leHBvcnQgZGVmYXVsdCBWaWV3OyIsImNsYXNzIFBsYXllciB7XG4gICAgY29uc3RydWN0b3IodGVhbSwgdHJlYXN1cmUsIGJhc2UpIHtcbiAgICAgICAgdGhpcy50ZWFtID0gdGVhbTtcbiAgICAgICAgdGhpcy51bml0cyA9IFtdO1xuICAgICAgICB0aGlzLnRyZWFzdXJlID0gdHJlYXN1cmU7XG4gICAgICAgIHRoaXMuYmFzZTtcbiAgICB9XG5cbiAgICByZW1vdmVVbml0KHVuaXQpIHtcbiAgICAgICAgbGV0IGZvdW5kID0gZmFsc2U7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgd2hpbGUgKCFmb3VuZCAmJiBpIDwgdGhpcy51bml0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnVuaXRzW2krK10ucG9zLmVxdWFscyh1bml0LnBvcykpIHtcbiAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51bml0cy5zcGxpY2UoaS0xLCAxKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy51bml0cywgdSApXG4gICAgICAgIHJldHVybiB0aGlzLnVuaXRzO1xuICAgIH1cblxuICAgIHR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQbGF5ZXI7IiwiaW1wb3J0IFBsYXllciBmcm9tIFwiLi9wbGF5ZXJcIjtcblxuY2xhc3MgSHVtYW5QbGF5ZXIgZXh0ZW5kcyBQbGF5ZXIge1xuICAgIGNvbnN0cnVjdG9yKHRlYW0sIHRyZWFzdXJlKSB7XG4gICAgICAgIHN1cGVyKHRlYW0sIHRyZWFzdXJlKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEh1bWFuUGxheWVyOyIsImltcG9ydCBCb2FyZCBmcm9tIFwiLi9ib2FyZFwiO1xuaW1wb3J0IEh1bWFuUGxheWVyIGZyb20gXCIuL2h1bWFuUGxheWVyXCI7XG5pbXBvcnQgeyBpc1VwZ3JhZGVCdXR0b24sIGlzVXBncmFkZUNvbmZpcm1hdGlvbiB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmNvbnN0IE1BWF9BUCA9IDQ7XG5jb25zdCBNQVhfVU5JVFMgPSA4O1xuXG5jbGFzcyBHYW1lIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy52aWV3ID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZXRHYW1lKCk7XG4gICAgICAgIC8vIHRoaXMuc2V0Q29ubmVjdGlvbigpO1xuICAgIH1cblxuICAgIHJlc2V0R2FtZSh2aWV3KSB7XG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICAgIHRoaXMuc2V0R2FtZSgpO1xuICAgIH1cblxuICAgIHNldEdhbWUoKSB7XG4gICAgICAgIHRoaXMuYm9hcmQgPSBuZXcgQm9hcmQoKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9ICd1bnNlbGVjdGVkJztcbiAgICAgICAgdGhpcy5wbGF5ZXIgPSBuZXcgSHVtYW5QbGF5ZXIoQm9hcmQuUExBWUVSX1RFQU0sIHRoaXMuYm9hcmQudHJlYXN1cmUucGxheWVyKTtcbiAgICAgICAgdGhpcy5lbmVteSA9IG5ldyBIdW1hblBsYXllcihCb2FyZC5FTkVNWV9URUFNLCB0aGlzLmJvYXJkLnRyZWFzdXJlLmVuZW15KTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5wbGF5ZXIpO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmVuZW15KTtcbiAgICAgICAgdGhpcy5jdXJyZW50UGxheWVyID0gdGhpcy5wbGF5ZXI7XG4gICAgICAgIHRoaXMuYWN0aW9uUG9pbnRzID0gTUFYX0FQO1xuICAgICAgICB0aGlzLmN0eCA9IHt9OyAvL3sgY2xpY2tlZFBvcywgc2VsZWN0ZWRTcXVhcmUgfVxuICAgIH1cblxuICAgIHNldENvbm5lY3Rpb24oKSB7XG4gICAgICAgIHJlcGx5ID0gXCJcIjtcbiAgICAgICAgY29ubiA9IG5ldyBTb2NrZXQ7XG5cbiAgICAgICAgLy8gaWYgKGNvbm4ub3BlbihcImh0dHA6Ly8xMjcuMC4wLjE6NTUwMC9pbmRleC5odG1sXCIpKSB7XG4gICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhcIkhJXCIpO1xuICAgICAgICAvLyAgICAgLy8gY29ubi53cml0ZShcIkdFVCAvaW5kZXguaHRtbCBIVFRQLzEuMFxcblxcblwiKTtcbiAgICAgICAgLy8gICAgIC8vIHJlcGx5ID0gY29ubi5yZWFkKDk5OTk5OSk7XG4gICAgICAgIC8vICAgICBjb25uLmNsb3NlKCk7XG4gICAgICAgIC8vIH1cbiAgICB9XG5cbiAgICBzd2l0Y2hQbGF5ZXJzKCkge1xuICAgICAgICB0aGlzLmJvYXJkLmdyaWQuZm9yRWFjaCgoY29sKSA9PiB7XG4gICAgICAgICAgICBjb2wuZm9yRWFjaCgocm93KSA9PiB7XG4gICAgICAgICAgICAgICAgcm93LmZvckVhY2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUucGFyZW50VHlwZSgpID09PSAnVW5pdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuaGFzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuaGFzQXR0YWNrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuaGFzVXBncmFkZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgICB0aGlzLmFjdGlvblBvaW50cyA9IE1BWF9BUDtcbiAgICAgICAgdGhpcy5zdGF0ZSA9ICd1bnNlbGVjdGVkJztcbiAgICAgICAgdGhpcy5jdXJyZW50UGxheWVyID09PSB0aGlzLnBsYXllciA/IHRoaXMuY3VycmVudFBsYXllciA9IHRoaXMuZW5lbXkgOiB0aGlzLmN1cnJlbnRQbGF5ZXIgPSB0aGlzLnBsYXllcjtcbiAgICB9XG5cbiAgICBjYWxsU3RhdGVNYWNoaW5lKCkge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50UGxheWVyLnR5cGUoKSA9PT0gJ0h1bWFuUGxheWVyJylcbiAgICAgICAgICAgIHRoaXMuc3RhdGVNYWNoaW5lKHRoaXMuYm9hcmQuZ3JpZC5nZXQodGhpcy5jdHguY2xpY2tlZFBvcykpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLnN0YXRlTWFjaGluZShjaG9vc2VNb3ZlKCkpO1xuICAgIH1cblxuICAgIC8vY3R4IC0+IHtjbGlja2VkUG9zIGFsd2F5cyBzZXQsIHNlbGVjdGVkU3F1YXJlIHRoYXQgd2lsbCBiZSBzZXQgaW4gdW5zZWxlY3RlZCBzdGFnZX1cbiAgICBzdGF0ZU1hY2hpbmUoc3F1YXJlKSB7XG4gICAgICAgIC8vIGxldCBzcXVhcmUgPSB0aGlzLmJvYXJkLmdyaWQuZ2V0KHRoaXMuY3R4LmNsaWNrZWRQb3MpO1xuICAgICAgICBcbiAgICAgICAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlICd1bnNlbGVjdGVkJzpcbiAgICAgICAgICAgICAgICB0aGlzLnJlZGlyZWN0U3RhdGUoc3F1YXJlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3VuaXQnOlxuICAgICAgICAgICAgICAgIC8vaWYgYWN0aW9uIHRha2VuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uVGFrZW4odGhpcy5jdHguY2xpY2tlZFBvcywgdGhpcy5jdHguc2VsZWN0ZWRTcXVhcmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4ID0ge307XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAndW5zZWxlY3RlZCc7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMudmlldy5kcmF3Qm9hcmQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYm9hcmQuaXNXb24oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3LmRyYXdCb2FyZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3LmRyYXdXaW5uaW5nU2NyZWVuKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hY3Rpb25Qb2ludHMgPT09IDApIHsgdGhpcy5zd2l0Y2hQbGF5ZXJzKCk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5kcmF3Qm9hcmQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gLy9lbHNlIGlmIGFjdGlvbiBub3QgdGFrZW5cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWRpcmVjdFN0YXRlKHNxdWFyZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMubm9Nb3JlTW92ZXNEaXNwbGF5KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdiYXJyYWNrJzpcbiAgICAgICAgICAgICAgICAvL2lmIHVuaXQgaXMgYm91Z2h0XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudW5pdEJvdWdodCh0aGlzLmN0eC5leGFjdFBvcywgdGhpcy5jdHgubWVudSwgdGhpcy5jdHguc2VsZWN0ZWRTcXVhcmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4ID0ge307XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAndW5zZWxlY3RlZCc7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGlvblBvaW50cyA9PT0gMCkgeyB0aGlzLnN3aXRjaFBsYXllcnMoKTsgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXcuZHJhd0JvYXJkKCk7XG4gICAgICAgICAgICAgICAgfSAvL2Vsc2UgaWYgdW5pdCBpcyBub3QgYm91Z2h0XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVkaXJlY3RTdGF0ZShzcXVhcmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm5vTW9yZU1vdmVzRGlzcGxheSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndXBncmFkZSc6XG4gICAgICAgICAgICAgICAgLy9pZiB1bml0IGlzIHVwZ3JhZGVkXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudW5pdFVwZ3JhZGVkKHRoaXMuY3R4LmV4YWN0UG9zLCB0aGlzLmN0eC5zZWxlY3RlZFNxdWFyZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9ICd1bnNlbGVjdGVkJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uUG9pbnRzID09PSAwKSB7IHRoaXMuc3dpdGNoUGxheWVycygpOyB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5kcmF3Qm9hcmQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVkaXJlY3RTdGF0ZShzcXVhcmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm5vTW9yZU1vdmVzRGlzcGxheSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkVSUk9SOiB1bmRlZmluZWQgc3RhdGVcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWRpcmVjdFN0YXRlKHNxdWFyZSkge1xuICAgICAgICB0aGlzLnZpZXcuZHJhd0JvYXJkKCk7XG4gICAgICAgIC8vaWYgdW5pdCB1cGdyYWRlIGlzIHNlbGVjdGVkXG4gICAgICAgIGlmICh0aGlzLnVuaXRVcGdyYWRlYWJsZSh0aGlzLmN0eC5leGFjdFBvcywgc3F1YXJlLmxhc3QoKSkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAndXBncmFkZSc7XG4gICAgICAgIH0gLy9pZiB1bml0IGlzIHNlbGVjdGVkXG4gICAgICAgIGVsc2UgaWYgKHRoaXMudW5pdFNlbGVjdGVkKHNxdWFyZS5sYXN0KCkpKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gJ3VuaXQnO1xuICAgICAgICB9IC8vZWxzZSBpZiBiYXJyYWNrIGlzIHNlbGVjdGVkXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuYWN0aW9uUG9pbnRzID4gMSAmJiB0aGlzLmN1cnJlbnRQbGF5ZXIudW5pdHMubGVuZ3RoIDwgTUFYX1VOSVRTXG4gICAgICAgICAgICAmJiB0aGlzLmJhcnJhY2tTZWxlY3RlZChzcXVhcmUuZmlyc3QoKSkpIHtcbiAgICAgICAgICAgIHRoaXMuY3R4Lm1lbnUgPSB0aGlzLnZpZXcuZHJhd0JhcnJhY2tTZWxlY3Rpb24oc3F1YXJlLmZpcnN0KCkucG9zKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAnYmFycmFjayc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gJ3Vuc2VsZWN0ZWQnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3R4LnNlbGVjdGVkU3F1YXJlID0gc3F1YXJlO1xuICAgIH1cblxuICAgIG5vTW9yZU1vdmVzRGlzcGxheSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1vdmVzQXZhaWxhYmxlKCkgJiYgdGhpcy5hY3Rpb25Qb2ludHMgPCBNQVhfQVApIHtcbiAgICAgICAgICAgIGNvbnN0IG5vTW9yZU1vdmVzID0gdGhpcy52aWV3Lm5vTW9yZU1vdmVzLnF1ZXJ5U2VsZWN0b3IoXCIubm9Nb3JlTW92ZXNcIik7XG4gICAgICAgICAgICBjb25zdCBidXR0b24gPSBub01vcmVNb3Zlcy5xdWVyeVNlbGVjdG9yKFwiLm1vdmVzQnV0dG9uXCIpXG4gICAgICAgIFxuICAgICAgICAgICAgbm9Nb3JlTW92ZXMuaW5uZXJIVE1MID0gdGhpcy52aWV3LnVwZGF0ZU5vTW9yZU1vdmVzU3RyKCk7XG4gICAgICAgICAgICBub01vcmVNb3Zlcy5hcHBlbmRDaGlsZChidXR0b24pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnZpZXcubm9Nb3JlTW92ZXMuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBtb3Zlc0F2YWlsYWJsZSgpIHtcbiAgICAgICAgbGV0IGJvb2wgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jdXJyZW50UGxheWVyLnVuaXRzLmZvckVhY2godW5pdCA9PiB7XG4gICAgICAgICAgICBib29sIHx8PSAhdW5pdC5oYXNNb3ZlZDtcbiAgICAgICAgICAgIGlmICghdW5pdC5oYXNBdHRhY2tlZCkge1xuICAgICAgICAgICAgICAgIHVuaXQuZ2V0QXR0YWNrcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYm9vbCB8fD0gIXVuaXQuaGFzVXBncmFkZWQgJiYgdW5pdC5hdHRhY2tzLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICBib29sIHx8PSB0aGlzLmFjdGlvblBvaW50cyA+IDEgJiYgdW5pdC5pc1VwZ3JhZGFibGUodGhpcy5jdXJyZW50UGxheWVyKTtcbiAgICAgICAgICAgIGJvb2wgfHw9IHRoaXMuYWN0aW9uUG9pbnRzID4gMSAmJiB0aGlzLmJhcnJhY2tzRW1wdHkoKTtcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIGJvb2w7XG4gICAgfVxuXG4gICAgYmFycmFja3NFbXB0eSgpIHtcbiAgICAgICAgbGV0IGJhcnJhY2tzO1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50UGxheWVyID09PSB0aGlzLnBsYXllcikge1xuICAgICAgICAgICAgYmFycmFja3MgPSB0aGlzLmJvYXJkLmJhcnJhY2tzLnBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJhcnJhY2tzID0gdGhpcy5ib2FyZC5iYXJyYWNrcy5lbmVteTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXMgPSBmYWxzZTtcbiAgICAgICAgYmFycmFja3MuZm9yRWFjaChiID0+IHtcbiAgICAgICAgICAgIGxldCBib29sID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnN0IGJhcnJhY2tTcXVhcmUgPSB0aGlzLmJvYXJkLmdyaWQuZ2V0KGIucG9zKVxuICAgICAgICAgICAgYmFycmFja1NxdWFyZS5mb3JFYWNoKHVuaXQgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh1bml0LnBhcmVudFR5cGUoKSA9PT0gJ1VuaXQnKSBib29sID0gZmFsc2U7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgcmVzIHx8PSBib29sO1xuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIHVuaXRVcGdyYWRlYWJsZShwb3MsIHVuaXQpIHtcbiAgICAgICAgbGV0IHVuaXRVcGdyYWRlYWJsZSA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5hY3Rpb25Qb2ludHMgPiAxICYmIHVuaXQgJiYgdW5pdC5wYXJlbnRUeXBlKCkgPT09ICdVbml0JyAmJlxuICAgICAgICAgICAgdW5pdC5pc1VwZ3JhZGFibGUodGhpcy5jdXJyZW50UGxheWVyKSAmJiBpc1VwZ3JhZGVCdXR0b24odW5pdC5wb3MsIHBvcykpIHtcbiAgICAgICAgICAgICAgICB1bml0VXBncmFkZWFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMudmlldy5kcmF3Qm9hcmQodW5pdC5wb3MsIHBvcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuaXRVcGdyYWRlYWJsZTtcbiAgICB9XG5cbiAgICB1bml0VXBncmFkZWQocG9zLCBzcXVhcmUpIHtcbiAgICAgICAgbGV0IHVuaXRVcGdyYWRlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgdW5pdCA9IHNxdWFyZS5sYXN0KCk7XG4gICAgICAgIGlmICh1bml0ICYmIHVuaXQucGFyZW50VHlwZSgpID09PSAnVW5pdCcgJiZcbiAgICAgICAgICAgIHVuaXQuaXNVcGdyYWRhYmxlKHRoaXMuY3VycmVudFBsYXllcikgJiYgaXNVcGdyYWRlQ29uZmlybWF0aW9uKHVuaXQucG9zLCBwb3MpKSB7XG4gICAgICAgICAgICAgICAgdW5pdC51cGdyYWRlcygpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uUG9pbnRzIC09IDI7XG4gICAgICAgICAgICAgICAgdW5pdFVwZ3JhZGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5pdFVwZ3JhZGVkO1xuICAgIH1cblxuICAgIHVuaXRTZWxlY3RlZCh1bml0KSB7XG4gICAgICAgIGxldCB1bml0U2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHVuaXQgJiYgdW5pdC5wYXJlbnRUeXBlKCkgPT09ICdVbml0JyAmJiB1bml0LnRlYW0gPT09IHRoaXMuY3VycmVudFBsYXllci50ZWFtKSB7XG4gICAgICAgICAgICB1bml0LnJlc2V0QWN0aW9ucygpOyAvL3Jlc2V0IG5ld2x5IHNlbGVjdGVkIHVuaXQncyBhY3Rpb24gc3F1YXJlc1xuICAgICAgICAgICAgaWYgKCF1bml0LmJvYXJkKSB7IHVuaXQuYm9hcmQgPSB0aGlzLmJvYXJkOyB9XG4gICAgICAgICAgICBpZiAoIXVuaXQudmlldykgeyB1bml0LnZpZXcgPSB0aGlzLnZpZXc7IH1cblxuICAgICAgICAgICAgdGhpcy51bml0Q2FsbERyYXdTZWxlY3RlZCh1bml0LCB0aGlzLnZpZXcpO1xuICAgICAgICAgICAgdW5pdFNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5pdFNlbGVjdGVkO1xuICAgIH1cblxuICAgIHVuaXRDYWxsRHJhd1NlbGVjdGVkKHVuaXQsIHZpZXcpIHtcbiAgICAgICAgaWYgKCF1bml0Lmhhc01vdmVkKSB7XG4gICAgICAgICAgICB1bml0LmdldE1vdmVzKCkuZm9yRWFjaCgocG9zKSA9PiB7XG4gICAgICAgICAgICAgICAgdmlldy5kcmF3TW92ZUhpZ2hsaWdodHMocG9zKTtcbiAgICAgICAgICAgICAgICB2aWV3LmRyYXdHcmlkRWxlbXMocG9zKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF1bml0Lmhhc0F0dGFja2VkICYmICF1bml0Lmhhc1VwZ3JhZGVkKSB7XG4gICAgICAgICAgICB1bml0LmdldEF0dGFja3MoKS5mb3JFYWNoKChwb3MpID0+IHtcbiAgICAgICAgICAgICAgICB2aWV3LmRyYXdBdHRhY2tIaWdobGlnaHRzKHBvcyk7XG4gICAgICAgICAgICAgICAgdmlldy5kcmF3R3JpZEVsZW1zKHBvcyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHZpZXcuZHJhd091dGxpbmUodW5pdC5wb3MpO1xuICAgIH1cblxuICAgIGJhcnJhY2tTZWxlY3RlZChiYXJyYWNrKSB7XG4gICAgICAgIHJldHVybiBiYXJyYWNrICYmIGJhcnJhY2sudHlwZSgpID09PSAnQmFycmFjaycgJiYgYmFycmFjay50ZWFtID09PSB0aGlzLmN1cnJlbnRQbGF5ZXIudGVhbTtcbiAgICB9XG5cbiAgICB1bml0Qm91Z2h0KHBvcywgbWVudSwgc3F1YXJlKSB7XG4gICAgICAgIGxldCB1bml0Qm91Z2h0ID0gZmFsc2U7XG4gICAgICAgIGxldCBuZXdQb3MgPSB0aGlzLmFkanVzdE1lbnVQb3NpdGlvbihzcXVhcmUuZmlyc3QoKSwgcG9zKTtcbiAgICAgICAgbGV0IHVuaXQ7XG4gICAgICAgIGlmICh1bml0ID0gbWVudS5maW5kKGUgPT4gZS5wb3MueCA9PT0gbmV3UG9zLnggJiYgZS5wb3MueSA9PT0gbmV3UG9zLnkpKSB7XG4gICAgICAgICAgICB1bml0LnBvcyA9IHNxdWFyZS5maXJzdCgpLnBvcztcbiAgICAgICAgICAgIHNxdWFyZS5wdXNoKHVuaXQpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGxheWVyLnVuaXRzLnB1c2godW5pdCk7XG4gICAgICAgICAgICB0aGlzLmFjdGlvblBvaW50cyAtPSAyO1xuICAgICAgICAgICAgdW5pdEJvdWdodCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5pdEJvdWdodDtcbiAgICB9XG5cbiAgICBhZGp1c3RNZW51UG9zaXRpb24oYmFycmFjaywgcG9zKSB7XG4gICAgICAgIGxldCB4RGlmZmVyZW5jZSA9IGJhcnJhY2sucG9zLnggPT09IDAgPyAtMC4yNSA6IDAuMjU7XG4gICAgICAgIGxldCB5RGlmZmVyZW5jZSA9IGJhcnJhY2sucG9zLnkgPT09IDAgPyAtMSA6IDAuNTtcbiAgICAgICAgbGV0IHggPSBNYXRoLmZsb29yKChwb3MueCArIHhEaWZmZXJlbmNlKSk7XG4gICAgICAgIGxldCB5ID0gTWF0aC5mbG9vcigocG9zLnkgKyB5RGlmZmVyZW5jZSkpO1xuICAgICAgICBsZXQgbmV3UG9zID0ge307XG4gICAgICAgIG5ld1Bvcy54ID0gYmFycmFjay5wb3MueCA9PT0gMCA/IHggKyAwLjI1IDogeCAtIDAuMjU7XG4gICAgICAgIG5ld1Bvcy55ID0gYmFycmFjay5wb3MueSA9PT0gMCA/IHkgKyAxIDogeSAtIDAuNTtcbiAgICAgICAgcmV0dXJuIG5ld1BvcztcbiAgICB9XG5cbiAgICBhY3Rpb25UYWtlbihwb3MsIHNxdWFyZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb3ZlVW5pdChwb3MsIHNxdWFyZSkgfHwgdGhpcy5hdHRhY2tVbml0KHBvcywgc3F1YXJlKTtcbiAgICB9XG5cbiAgICBtb3ZlVW5pdChwb3MsIHNxdWFyZSkge1xuICAgICAgICBsZXQgdW5pdE1vdmVkID0gZmFsc2U7XG4gICAgICAgIGxldCB1bml0ID0gc3F1YXJlLmxhc3QoKTtcblxuICAgICAgICBpZiAodW5pdC5tb3ZlcyAmJiB1bml0Lm1vdmVzLmZpbmQoZSA9PiBlLnggPT09IHBvcy54ICYmIGUueSA9PT0gcG9zLnkpKSB7XG4gICAgICAgICAgICB1bml0LnBvcyA9IHBvczsgLy9yZXNldCB1bml0IHBvc2l0aW9uO1xuICAgICAgICAgICAgaWYgKHVuaXQub25Ib21lVGVyZigpKSB7XG4gICAgICAgICAgICAgICAgdW5pdC5kb3duZ3JhZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNxdWFyZS5wb3AoKTtcbiAgICAgICAgICAgIGxldCB0cmVhc3VyZUlkeCA9IHRoaXMuZ2V0VHJlYXN1cmVJZHgoc3F1YXJlKTtcbiAgICAgICAgICAgIGlmICh0cmVhc3VyZUlkeCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNxdWFyZVt0cmVhc3VyZUlkeF0ucG9zID0gcG9zO1xuICAgICAgICAgICAgICAgIHRoaXMuYm9hcmQuZ3JpZC5nZXQocG9zKS5wdXNoKHNxdWFyZVt0cmVhc3VyZUlkeF0pO1xuICAgICAgICAgICAgICAgIHNxdWFyZS5zcGxpY2UodHJlYXN1cmVJZHgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ib2FyZC5ncmlkLmdldChwb3MpLnB1c2godW5pdCk7XG5cbiAgICAgICAgICAgIHRoaXMuYWN0aW9uUG9pbnRzLS07XG4gICAgICAgICAgICB1bml0Lmhhc01vdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHVuaXRNb3ZlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuaXRNb3ZlZDtcbiAgICB9XG5cbiAgICBnZXRUcmVhc3VyZUlkeChzcXVhcmUpIHtcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPHNxdWFyZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHNxdWFyZVtpXS50ZWFtICE9PSB0aGlzLmN1cnJlbnRQbGF5ZXIudGVhbVxuICAgICAgICAgICAgICAgICYmIHNxdWFyZVtpXS50eXBlKCkgPT09ICdUcmVhc3VyZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGF0dGFja1VuaXQocG9zLCBzcXVhcmUpIHtcbiAgICAgICAgbGV0IHVuaXRBdHRhY2tlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgdW5pdCA9IHNxdWFyZS5sYXN0KCk7XG4gICAgICAgIGlmICh1bml0LmF0dGFja3MgJiYgdW5pdC5hdHRhY2tzLmZpbmQoZSA9PiBlLnggPT09IHBvcy54ICYmIGUueSA9PT0gcG9zLnkpKSB7XG4gICAgICAgICAgICBsZXQgYXR0YWNrZWRTcXVhcmUgPSB0aGlzLmJvYXJkLmdyaWQuZ2V0KHBvcyk7XG4gICAgICAgICAgICBsZXQgYXR0YWNrZWRVbml0ID0gYXR0YWNrZWRTcXVhcmUubGFzdCgpO1xuICAgICAgICAgICAgYXR0YWNrZWRVbml0LmRlZmVuc2UgLT0gdW5pdC5hdHRhY2s7XG4gICAgICAgICAgICBpZiAoYXR0YWNrZWRVbml0LmRlZmVuc2UgPCAxKSB7XG4gICAgICAgICAgICAgICAgYXR0YWNrZWRTcXVhcmUucG9wKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGxheWVyLnRlYW0gPT09IHRoaXMucGxheWVyLnRlYW0gPyB0aGlzLmVuZW15LnJlbW92ZVVuaXQoYXR0YWNrZWRVbml0KSA6IHRoaXMucGxheWVyLnJlbW92ZVVuaXQoYXR0YWNrZWRVbml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWN0aW9uUG9pbnRzLS07XG4gICAgICAgICAgICB1bml0Lmhhc0F0dGFja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHVuaXRBdHRhY2tlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuaXRBdHRhY2tlZDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdhbWU7IiwiaW1wb3J0IFZpZXcgZnJvbSAnLi92aWV3LmpzJztcbmltcG9ydCBHYW1lIGZyb20gJy4vZ2FtZS5qcyc7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IHtcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHJlYXN1cmUtZ2FtZScpO1xuICAgIGNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5idXR0b25zJyk7XG5cbiAgICBjb25zdCBnYW1lID0gbmV3IEdhbWUoKTtcbiAgICBjb25zdCB2aWV3ID0gbmV3IFZpZXcoZ2FtZSwgY3R4LCBlbCk7XG4gICAgZ2FtZS52aWV3ID0gdmlldztcblxuICAgIHZpZXcuYmluZEV2ZW50cyhjdHgpO1xufSk7Il0sIm5hbWVzIjpbIlBpZWNlIiwiY29uc3RydWN0b3IiLCJ0ZWFtIiwicG9zIiwiaW1hZ2UiLCJJbWFnZSIsInBhcmVudFR5cGUiLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsIm5hbWUiLCJ0eXBlIiwiQmFycmFjayIsInNyYyIsIkJhc2UiLCJCb2FyZCIsIlRyZWFzdXJlIiwiUExBWUVSX1RFQU0iLCJwb3MxIiwieSIsIkdSSURfSEVJR0hUIiwieCIsIk1hdGgiLCJmbG9vciIsIkdSSURfV0lEVEgiLCJwb3MyIiwidHJlYXN1cmUiLCJwbGF5ZXIiLCJlbmVteSIsIkVORU1ZX1RFQU0iLCJiYXNlIiwiYmFycmFja3MiLCJncmlkIiwibWFrZUdyaWQiLCJpIiwicHVzaCIsImoiLCJiYXJyYWNrIiwiZ2V0IiwiaXNXb24iLCJlcXVhbHMiLCJpc09uQm9hcmQiLCJpc0J1dHRvbiIsIndpbGxQbGF5QWdhaW4iLCJpc1VwZ3JhZGVCdXR0b24iLCJzcXVhcmVQb3MiLCJjbGlja1BvcyIsImlzVXBncmFkZUNvbmZpcm1hdGlvbiIsIkFycmF5IiwicHJvdG90eXBlIiwiY29udGFpbnNUeXBlIiwic3F1YXJlIiwic29tZSIsImxhc3QiLCJsZW5ndGgiLCJmaXJzdCIsImxlZnQiLCJyaWdodCIsInVwIiwiZG93biIsIlVuaXQiLCJhdHRhY2siLCJkZWZlbnNlIiwicG9pbnRTdGFuZGFyZCIsInVwZ3JhZGUiLCJsZXZlbCIsImF0dGFja0Rpc3QiLCJtb3ZlcyIsImF0dGFja3MiLCJoYXNNb3ZlZCIsImhhc0F0dGFja2VkIiwiaGFzVXBncmFkZWQiLCJib2FyZCIsInZpZXciLCJyZXNldEFjdGlvbnMiLCJ1cGdyYWRlcyIsImRvd25ncmFkZSIsIm1pbiIsImdldE1vdmVzIiwiZ2V0TW92ZXNTZXRCRlMiLCJkZWxldGUiLCJKU09OIiwic3RyaW5naWZ5IiwibWFwIiwiZWxlbSIsInBhcnNlIiwiZ2V0TW92ZXNTZXRERlMiLCJ2YWxpZFZpc2l0ZWQiLCJTZXQiLCJtYXhEaXN0IiwibmV3UG9zIiwiaGFzVW5pdCIsImhhcyIsImFkZCIsImdldE1vdmVzU2V0IiwicSIsInNoaWZ0IiwiYWRkVG9RdWV1ZSIsImlzV2l0aGluRGlzdCIsIndpdGhpbkRpc3QiLCJhYnMiLCJnZXRBdHRhY2tzIiwiZWxlbVR5cGUiLCJpc1VwZ3JhZGFibGUiLCJjdXJyZW50UGxheWVyIiwib25Ib21lVGVyZiIsIkFyY2hlciIsIkRlZmVuZGVyIiwiSW5mYW50cnkiLCJWaWV3IiwiZ2FtZSIsImN0eCIsImVsIiwicmF0aW8iLCJpbWFnZXMiLCJyZW5kZXJJbWciLCJkcmF3Qm9hcmQiLCJkcmF3TWVudSIsIm5vTW9yZU1vdmVzIiwiZHJhd05vTW9yZU1vdmVzTW9kdWxlIiwicmVzZXRWaWV3IiwiY2xlYXJCb2FyZCIsImNsZWFyUmVjdCIsImNhbnZhcyIsIndpZHRoIiwiaGVpZ2h0IiwidW5pdFBvcyIsImNsaWNrZWRQb3MiLCJpbnZpc2lmeUJ1dHRvbnMiLCJiYWNrZ3JvdW5kIiwib25sb2FkIiwiZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImZvckVhY2giLCJzdHlsZSIsInZpc2liaWxpdHkiLCJkcmF3Qm9hcmRXaXRob3V0T25sb2FkIiwiZHJhd0dyaWRTcXVhcmUiLCJkcmF3R3JpZEVsZW1zIiwiZHJhd01pZGxpbmUiLCJkcmF3RW5kVHVybkJ1dHRvbiIsImZvbnQiLCJmaWxsU3R5bGUiLCJzdHIiLCJhY3Rpb25Qb2ludHMiLCJ0b1N0cmluZyIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwic3Ryb2tlVGV4dCIsIlNRVUFSRV9ESU0iLCJmaWxsVGV4dCIsInVuaXRzIiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlIiwiZmlsbFJlY3QiLCJzdHJva2VSZWN0IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsInBvc2l0aW9uIiwiYm90dG9tIiwiY2VsbCIsImJhY2tncm91bmRDb2xvciIsImJvcmRlciIsImxpc3RTdHlsZSIsImN1cnNvciIsImlubmVySFRNTCIsImNvbG9yIiwidGV4dEFsaWduIiwibGluZUhlaWdodCIsImFwcGVuZENoaWxkIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImRyYXdNZW51T3B0aW9ucyIsInJ1bGVCb3giLCJkcmF3UnVsZXMiLCJhYm91dEJveCIsImRyYXdBYm91dCIsIndpbmRvd1Jlc2l6ZSIsIndpbmRvdyIsIm9ucmVzaXplIiwibWVudSIsInJ1bGVzIiwiZHJhd0J1dHRvbiIsImFib3V0IiwiaW5uZXJIZWlnaHQiLCJpbm5lcldpZHRoIiwidGl0bGUiLCJkcmF3TWVudURpc3BsYXlCb3giLCJkcmF3TWVudUlubmVyRGlzcGxheUJveCIsImJveCIsInRvcCIsInRyYW5zZm9ybSIsIm1hcmdpbiIsInVwZGF0ZU5vTW9yZU1vdmVzU3RyIiwibW9kdWxlIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJidXR0b24iLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Ub3AiLCJkcmF3V2lubmluZ1NjcmVlbiIsImltZyIsImRyYXdJbWFnZSIsImRyYXdQbGF5QWdhaW5CdXR0b24iLCJkcmF3VXBncmFkZUNvbmZpcm1hdGlvbiIsImRyYXdCYXJyYWNrU2VsZWN0aW9uIiwiYWRqdXN0TWVudVBvc2l0aW9uIiwidHJvb3BTZWxlY3Rpb24iLCJpbmYiLCJhcmNoIiwiZGVmIiwidW5pdCIsImRyYXciLCJkcmF3T3V0bGluZSIsImRyYXdNb3ZlSGlnaGxpZ2h0cyIsImRyYXdBdHRhY2tIaWdobGlnaHRzIiwiZ3JpZFNxdWFyZSIsIm91dGxpbmVDb2xvciIsImZpbGxDb2xvciIsImdsb2JhbEFscGhhIiwicGl4ZWxXaWR0aCIsInBpeGVsSGVpZ2h0IiwiYmluZEV2ZW50cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVCdXR0b24iLCJiaW5kIiwiaGFuZGxlQWJvdXQiLCJoYW5kbGVSdWxlcyIsImhhbmRsZUNsaWNrIiwiaGFuZGxlQmFja2dyb3VuZCIsImJpbmRNb3Zlc0J1dHRvbiIsIm1vdmVzQmFja2dyb3VuZCIsImhhbmRsZU1vdmVzQmFja2dyb3VuZCIsIm1vdmVzQnV0dG9uIiwiaGFuZGxlTW92ZXNCdXR0b24iLCJldmVudCIsImUxIiwiZTIiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInhFeGFjdCIsInlFeGFjdCIsInBvc0V4YWN0IiwicmVzZXRHYW1lIiwiZXhhY3RQb3MiLCJjYWxsU3RhdGVNYWNoaW5lIiwic3dpdGNoUGxheWVycyIsImNvbnRhaW5zIiwidGFyZ2V0Iiwic3RhdGUiLCJkcmF3VXBncmFkZUJ1dHRvbiIsImFyYyIsIlBJIiwiZmlsbCIsImRyYXdTdGF0cyIsIlBsYXllciIsInJlbW92ZVVuaXQiLCJmb3VuZCIsInNwbGljZSIsIkh1bWFuUGxheWVyIiwiTUFYX0FQIiwiTUFYX1VOSVRTIiwiR2FtZSIsInNldEdhbWUiLCJjb25zb2xlIiwibG9nIiwic2V0Q29ubmVjdGlvbiIsInJlcGx5IiwiY29ubiIsIlNvY2tldCIsImNvbCIsInJvdyIsInN0YXRlTWFjaGluZSIsImNob29zZU1vdmUiLCJyZWRpcmVjdFN0YXRlIiwiYWN0aW9uVGFrZW4iLCJzZWxlY3RlZFNxdWFyZSIsIm5vTW9yZU1vdmVzRGlzcGxheSIsInVuaXRCb3VnaHQiLCJ1bml0VXBncmFkZWQiLCJ1bml0VXBncmFkZWFibGUiLCJ1bml0U2VsZWN0ZWQiLCJiYXJyYWNrU2VsZWN0ZWQiLCJtb3Zlc0F2YWlsYWJsZSIsImJvb2wiLCJiYXJyYWNrc0VtcHR5IiwicmVzIiwiYiIsImJhcnJhY2tTcXVhcmUiLCJ1bml0Q2FsbERyYXdTZWxlY3RlZCIsImZpbmQiLCJ4RGlmZmVyZW5jZSIsInlEaWZmZXJlbmNlIiwibW92ZVVuaXQiLCJhdHRhY2tVbml0IiwidW5pdE1vdmVkIiwicG9wIiwidHJlYXN1cmVJZHgiLCJnZXRUcmVhc3VyZUlkeCIsInVuaXRBdHRhY2tlZCIsImF0dGFja2VkU3F1YXJlIiwiYXR0YWNrZWRVbml0IiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRDb250ZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///627\n')},37:function(){eval("// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcuanMiLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXByb2plY3QvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///37\n")}};__webpack_modules__[627]();var __webpack_exports__={};__webpack_modules__[37]()})();