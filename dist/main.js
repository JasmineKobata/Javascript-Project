(function(){"use strict";var __webpack_modules__={627:function(){eval('\n;// CONCATENATED MODULE: ./src/piece.js\nclass Piece {\n  constructor(team, pos) {\n    this.team = team;\n    this.pos = pos;\n    this.image = new Image();\n  }\n  parentType() {\n    return Object.getPrototypeOf(this.constructor).name;\n  }\n  type() {\n    return this.constructor.name;\n  }\n}\n/* harmony default export */ var piece = (Piece);\n;// CONCATENATED MODULE: ./src/pieces/barrack.js\n\nclass Barrack extends piece {\n  constructor(team, pos) {\n    super(team, pos);\n    this.image.src = "./resources/barracks2.png";\n  }\n}\n/* harmony default export */ var pieces_barrack = (Barrack);\n;// CONCATENATED MODULE: ./src/pieces/base.js\n\nclass Base extends piece {\n  constructor(team, pos) {\n    super(team, pos);\n  }\n}\n/* harmony default export */ var base = (Base);\n;// CONCATENATED MODULE: ./src/pieces/treasure.js\n\n\nclass Treasure extends piece {\n  constructor(team, pos) {\n    super(team, pos);\n    this.team === board.PLAYER_TEAM ? this.image.src = "./resources/treasureblue.png" : this.image.src = "./resources/treasurered.png";\n  }\n}\n/* harmony default export */ var treasure = (Treasure);\n;// CONCATENATED MODULE: ./src/board.js\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\nclass Board {\n  //0, 0 is top left corner\n\n  constructor() {\n    let pos1 = {\n      y: Board.GRID_HEIGHT - 1,\n      x: Math.floor(Board.GRID_WIDTH / 2)\n    };\n    let pos2 = {\n      y: 0,\n      x: Math.floor(Board.GRID_WIDTH / 2)\n    };\n    this.treasure = {\n      player: new treasure(Board.PLAYER_TEAM, pos1),\n      enemy: new treasure(Board.ENEMY_TEAM, pos2)\n    };\n    pos1 = {\n      y: 0,\n      x: Math.floor(Board.GRID_WIDTH / 2)\n    };\n    pos2 = {\n      y: Board.GRID_HEIGHT - 1,\n      x: Math.floor(Board.GRID_WIDTH / 2)\n    };\n    this.base = {\n      player: new base(Board.PLAYER_TEAM, pos2),\n      enemy: new base(Board.ENEMY_TEAM, pos1)\n    };\n    this.barracks = {\n      player: [],\n      enemy: []\n    };\n    this.grid = Board.makeGrid(this.treasure, this.base, this.barracks);\n  }\n  static makeGrid(treasure, base, barracks) {\n    let grid = [];\n    for (let i = 0; i < Board.GRID_HEIGHT; i++) {\n      grid.push([]);\n      for (let j = 0; j < Board.GRID_WIDTH; j++) {\n        grid[i].push([]);\n      }\n    }\n    let pos = {\n      y: 0,\n      x: 0\n    };\n    let barrack = new pieces_barrack(Board.ENEMY_TEAM, pos);\n    grid.get(pos).push(barrack);\n    barracks.enemy.push(barrack);\n    pos = {\n      y: 0,\n      x: Board.GRID_WIDTH - 1\n    };\n    barrack = new pieces_barrack(Board.ENEMY_TEAM, pos);\n    grid.get(pos).push(barrack);\n    barracks.enemy.push(barrack);\n    pos = {\n      y: Board.GRID_HEIGHT - 1,\n      x: 0\n    };\n    barrack = new pieces_barrack(Board.PLAYER_TEAM, pos);\n    grid.get(pos).push(barrack);\n    barracks.player.push(barrack);\n    pos = {\n      y: Board.GRID_HEIGHT - 1,\n      x: Board.GRID_WIDTH - 1\n    };\n    barrack = new pieces_barrack(Board.PLAYER_TEAM, pos);\n    grid.get(pos).push(barrack);\n    barracks.player.push(barrack);\n    grid.get(base.enemy.pos).push(base.enemy);\n    grid.get(base.player.pos).push(base.player);\n    grid.get(treasure.enemy.pos).push(treasure.enemy);\n    grid.get(treasure.player.pos).push(treasure.player);\n    return grid;\n  }\n  isWon() {\n    return this.treasure.player.pos.equals(this.base.enemy.pos) || this.treasure.enemy.pos.equals(this.base.player.pos);\n  }\n}\n_defineProperty(Board, "GRID_WIDTH", 7);\n_defineProperty(Board, "GRID_HEIGHT", 8);\n_defineProperty(Board, "PLAYER_TEAM", 1);\n_defineProperty(Board, "ENEMY_TEAM", 2);\n/* harmony default export */ var board = (Board);\n;// CONCATENATED MODULE: ./src/utils.js\n\nfunction isOnBoard(pos) {\n  return pos.x > -1 && pos.x < board.GRID_WIDTH && pos.y > -1 && pos.y < board.GRID_HEIGHT;\n}\nfunction isButton(pos) {\n  return pos.y > board.GRID_HEIGHT + 0.25 && pos.y < board.GRID_HEIGHT + 0.75 && pos.x > 4 && pos.x < 5;\n}\nfunction willPlayAgain(pos) {\n  return pos.x > board.GRID_WIDTH / 2 - 0.75 && pos.x < board.GRID_WIDTH / 2 + 0.75 && pos.y > Math.floor(board.GRID_HEIGHT / 2) && pos.y < Math.floor(board.GRID_HEIGHT / 2) + 0.5;\n}\nfunction isUpgradeButton(squarePos, clickPos) {\n  let x = clickPos.x - squarePos.x;\n  let y = clickPos.y - squarePos.y;\n  return x > 0 && x < 0.25 && y > 0 && y < 0.25;\n}\nfunction isUpgradeConfirmation(squarePos, clickPos) {\n  let x = clickPos.x - squarePos.x;\n  let y = clickPos.y - squarePos.y;\n  return x > 0 && x < 1 && y > 0 && y < 0.25;\n}\nArray.prototype.get = function (pos) {\n  return this[pos.y][pos.x];\n};\nArray.prototype.containsType = function (type) {\n  square.some();\n};\nArray.prototype.last = function () {\n  return this[this.length - 1];\n};\nArray.prototype.first = function () {\n  return this[0];\n};\nObject.prototype.equals = function (pos) {\n  return this.x === pos.x && this.y === pos.y;\n};\n/* harmony default export */ var utils = (Array);\n;// CONCATENATED MODULE: ./src/pieces/unit.js\n\n\n\nclass Unit extends piece {\n  constructor(team, pos) {\n    super(team, pos);\n    this.attack = null;\n    this.defense = null;\n    this.pointStandard = null;\n    this.upgrade = null;\n    this.level = 1;\n    this.attackDist = 1;\n    this.moves = null;\n    this.attacks = [];\n    this.hasMoved = false;\n    this.hasAttacked = false;\n    this.hasUpgraded = false;\n    this.board = null;\n    this.view = null;\n  }\n  resetActions() {\n    this.moves = null;\n    this.attacks = [];\n  }\n  upgrades() {\n    this.level = 2;\n    this.hasUpgraded = true;\n    this.attack = this.upgrade.attack;\n    this.defense = this.upgrade.defense;\n  }\n  downgrade() {\n    this.level = 1;\n    this.attack = this.pointStandard.attack;\n    this.defense = Math.min(this.pointStandard.defense, this.defense);\n  }\n  getMoves() {\n    this.moves = this.getMovesSet();\n    this.moves.delete(JSON.stringify(this.pos));\n    this.moves = [...this.moves].map(elem => {\n      return JSON.parse(elem);\n    });\n    return this.moves;\n  }\n  getMovesSet() {\n    let validVisited = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Set();\n    let maxDist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    let pos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.pos;\n    if (maxDist === 0) {\n      return validVisited;\n    }\n    for (let y = pos.y - 1; y <= pos.y + 1; y++) {\n      for (let x = pos.x - 1; x <= pos.x + 1; x++) {\n        let newPos = {\n          y: y,\n          x: x\n        };\n        if (isOnBoard(newPos) && !this.hasUnit(newPos)) {\n          if (!validVisited.has(JSON.stringify(newPos))) {\n            validVisited.add(JSON.stringify(newPos));\n          }\n          validVisited = this.getMovesSet(validVisited, maxDist - 1, newPos);\n        }\n      }\n    }\n    return validVisited;\n  }\n  getAttacks() {\n    for (let y = this.pos.y - this.attackDist; y <= this.pos.y + this.attackDist; y++) {\n      for (let x = this.pos.x - this.attackDist; x <= this.pos.x + this.attackDist; x++) {\n        let newPos = {\n          y: y,\n          x: x\n        };\n        if (isOnBoard(newPos)) {\n          let square = this.board.grid.get(newPos);\n          if (this.hasUnit(newPos) && square.last().team !== this.team) {\n            this.attacks.push(newPos);\n          }\n        }\n      }\n    }\n    return this.attacks;\n  }\n  hasUnit(pos) {\n    let square = this.board.grid.get(pos);\n    if (square.length > 0) {\n      let elemType = square.last().parentType();\n      if (elemType === \'Unit\') {\n        return true;\n      }\n    }\n    return false;\n  }\n  isUpgradable(currentPlayer) {\n    return this.team === currentPlayer.team && this.level == 1 && (this.team === board.PLAYER_TEAM && this.pos.y < board.GRID_HEIGHT / 2 || this.team === board.ENEMY_TEAM && this.pos.y >= board.GRID_HEIGHT / 2);\n  }\n  onHomeTerf() {\n    return this.team === board.PLAYER_TEAM && this.pos.y >= board.GRID_HEIGHT / 2 || this.team === board.ENEMY_TEAM && this.pos.y < board.GRID_HEIGHT / 2;\n  }\n}\n/* harmony default export */ var unit = (Unit);\n;// CONCATENATED MODULE: ./src/pieces/units/archer.js\n\nclass Archer extends unit {\n  constructor(team, pos) {\n    super(team, pos);\n    this.attack = 1;\n    this.defense = 1;\n    this.attackDist = 2;\n    this.upgrade = {\n      attack: 2,\n      defense: 2\n    };\n    this.pointStandard = {\n      attack: 1,\n      defense: 1\n    };\n    this.image.src = "./resources/archer.png";\n  }\n}\n/* harmony default export */ var archer = (Archer);\n;// CONCATENATED MODULE: ./src/pieces/units/defender.js\n\nclass Defender extends unit {\n  constructor(team, pos) {\n    super(team, pos);\n    this.attack = 1;\n    this.defense = 3;\n    //if attack is changed to 1, unit.isUpgradable returns true when unit is already upgraded\n    //because it checks if upgraded using attack points. Need to implement different check\n    //if making upgraded attack points equal to standard attack points\n    this.upgrade = {\n      attack: 1,\n      defense: 5\n    };\n    this.pointStandard = {\n      attack: 1,\n      defense: 3\n    };\n    this.image.src = "./resources/defender.png";\n  }\n}\n/* harmony default export */ var defender = (Defender);\n;// CONCATENATED MODULE: ./src/pieces/units/infantry.js\n\nclass Infantry extends unit {\n  constructor(team, pos) {\n    super(team, pos);\n    this.attack = 2;\n    this.defense = 2;\n    this.upgrade = {\n      attack: 4,\n      defense: 3\n    };\n    this.pointStandard = {\n      attack: 2,\n      defense: 2\n    };\n    this.image.src = "./resources/infantry.png";\n  }\n}\n/* harmony default export */ var infantry = (Infantry);\n;// CONCATENATED MODULE: ./src/view.js\nfunction view_defineProperty(obj, key, value) { key = view_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction view_toPropertyKey(arg) { var key = view_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }\nfunction view_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n\n\n\n\n\nclass View {\n  constructor(game, ctx, el) {\n    this.game = game;\n    this.el = el;\n    this.ctx = ctx;\n    this.ratio = null;\n    this.images = this.renderImg();\n    this.drawBoard();\n    this.drawMenu({\n      y: board.GRID_HEIGHT,\n      x: board.GRID_WIDTH\n    });\n    this.noMoreMoves = this.drawNoMoreMovesModule();\n  }\n  resetView(game) {\n    this.game = game;\n    this.ratio = null;\n    this.drawBoard();\n  }\n  clearBoard() {\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n  }\n  drawBoard(unitPos, clickedPos) {\n    this.clearBoard();\n    this.invisifyButtons();\n    this.images.background.onload(unitPos, clickedPos);\n  }\n  invisifyButtons() {\n    const e = [];\n    e.push(document.querySelector(".about"));\n    e.push(document.querySelector(".rules"));\n    e.push(document.querySelector(".abouttitle"));\n    e.push(document.querySelector(".rulestitle"));\n    e.forEach(e => {\n      if (e) {\n        e.style.visibility = \'hidden\';\n      }\n    });\n  }\n  drawBoardWithoutOnload(unitPos, clickedPos) {\n    for (let y = 0; y < board.GRID_HEIGHT; y++) {\n      for (let x = 0; x < board.GRID_WIDTH; x++) {\n        this.drawGridSquare(x, y, "darkgreen");\n        this.drawGridElems({\n          y: y,\n          x: x\n        }, unitPos, clickedPos);\n      }\n    }\n    this.drawMidline();\n    this.drawEndTurnButton();\n    this.ctx.font = "40px Copperplate";\n    this.game.currentPlayer.team === board.ENEMY_TEAM ? this.ctx.fillStyle = "red" : this.ctx.fillStyle = "blue";\n    let str = "Action Points: " + this.game.actionPoints.toString();\n    this.ctx.strokeStyle = \'dimgrey\';\n    this.ctx.lineWidth = 3;\n    this.ctx.strokeText(str, 10, (board.GRID_HEIGHT + 0.5) * View.SQUARE_DIM);\n    this.ctx.fillText(str, 10, (board.GRID_HEIGHT + 0.5) * View.SQUARE_DIM);\n    this.ctx.font = "30px Copperplate";\n    str = "Troops: " + this.game.currentPlayer.units.length.toString() + "/8";\n    this.ctx.strokeText(str, 10, (board.GRID_HEIGHT + 0.75) * View.SQUARE_DIM);\n    this.ctx.fillText(str, 10, (board.GRID_HEIGHT + 0.75) * View.SQUARE_DIM);\n  }\n  drawMidline() {\n    this.ctx.strokeStyle = \'lightskyblue\';\n    this.ctx.beginPath();\n    this.ctx.moveTo(0, board.GRID_HEIGHT / 2 * View.SQUARE_DIM);\n    this.ctx.lineTo((board.GRID_HEIGHT - 1) * View.SQUARE_DIM, board.GRID_HEIGHT / 2 * View.SQUARE_DIM);\n    this.ctx.stroke();\n  }\n  drawEndTurnButton() {\n    this.ctx.fillStyle = \'lightskyblue\';\n    this.ctx.fillRect(View.SQUARE_DIM * 4, (board.GRID_HEIGHT + 0.25) * View.SQUARE_DIM, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.5);\n    this.ctx.strokeStyle = \'cornflowerblue\';\n    this.ctx.lineWidth = 1;\n    this.ctx.strokeRect(View.SQUARE_DIM * 4, (board.GRID_HEIGHT + 0.25) * View.SQUARE_DIM, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.5);\n    this.ctx.font = "25px Copperplate";\n    this.ctx.fillStyle = "dimgrey";\n    this.ctx.lineWidth = 2;\n    this.ctx.fillText("End", 4.25 * View.SQUARE_DIM, (board.GRID_HEIGHT + 0.45) * View.SQUARE_DIM);\n    this.ctx.fillText("Turn", 4.15 * View.SQUARE_DIM, (board.GRID_HEIGHT + 0.65) * View.SQUARE_DIM);\n  }\n  drawMenu(pos) {\n    const grid = document.createElement("ul");\n    grid.classList.add("grid");\n    grid.style.position = "absolute";\n    grid.style.right = "7.5%";\n    grid.style.bottom = "calc(0.2% - 32px)";\n    grid.style.width = "calc(14.29% - 40px)";\n    grid.style.height = "5.85%";\n    const cell = document.createElement("li");\n    cell.classList.add("menu");\n    cell.style.backgroundColor = "lightskyblue";\n    cell.style.border = "1px solid cornflowerblue";\n    cell.style.height = "calc(100% - 2px)";\n    cell.style.width = "calc(100% - 2px)";\n    cell.style.left = "0px";\n    cell.style.listStyle = "none";\n    cell.style.cursor = "pointer";\n    cell.innerHTML = "Menu";\n    cell.style.font = 25 * this.ratio + "px Copperplate";\n    cell.style.color = "dimgrey";\n    cell.style.textAlign = "center";\n    cell.style.lineHeight = "200%";\n    cell.classList.add("button");\n    grid.appendChild(cell);\n    // this.el.appendChild(grid);\n    document.getElementsByClassName("background")[0].appendChild(grid);\n    this.drawMenuOptions(pos, cell);\n    const ruleBox = this.drawRules(pos);\n    const aboutBox = this.drawAbout(pos);\n    const windowResize = window.onresize;\n    window.onresize = () => {\n      windowResize();\n      if (this.ratio < 0.67) {\n        this.ratio = 0.67;\n      }\n      ruleBox.style.font = 19 * this.ratio - 2 + "px Copperplate";\n      ruleBox.style.lineHeight = "100%";\n      aboutBox.style.font = 20 * this.ratio - 2 + "px Copperplate";\n      aboutBox.style.lineHeight = "350%";\n    };\n  }\n  drawMenuOptions(pos, cell) {\n    const menu = document.createElement("ul");\n    menu.classList.add("menu");\n    menu.style.position = "absolute";\n    menu.style.right = "7.5%";\n    menu.style.bottom = "calc(5.85% - 16px)";\n    menu.style.width = "calc(14.29% - 42px)";\n    menu.style.height = "calc(5.85% - 2px)";\n    const rules = document.createElement("li");\n    this.drawButton("Rules", rules, {\n      x: "0%",\n      y: "100%"\n    });\n    rules.classList.add("rules");\n    const about = document.createElement("li");\n    this.drawButton("About", about, {\n      x: "0%",\n      y: "0%"\n    });\n    about.classList.add("about");\n    rules.style.font = 20 * this.ratio + "px Copperplate";\n    rules.style.lineHeight = "250%";\n    about.style.font = 20 * this.ratio + "px Copperplate";\n    about.style.lineHeight = "250%";\n    menu.appendChild(rules);\n    menu.appendChild(about);\n    menu.style.visibility = \'hidden\';\n    window.onresize = () => {\n      this.ratio = Math.min(window.innerHeight / this.ctx.canvas.height, window.innerWidth / this.ctx.canvas.width);\n      if (this.ratio < 0.67) {\n        this.ratio = 0.67;\n      }\n      cell.style.font = 25 * this.ratio + "px Copperplate";\n      cell.style.lineHeight = "200%";\n      rules.style.font = 20 * this.ratio + "px Copperplate";\n      rules.style.lineHeight = "250%";\n      about.style.font = 20 * this.ratio + "px Copperplate";\n      about.style.lineHeight = "250%";\n    };\n\n    // this.el.appendChild(menu);\n    document.getElementsByClassName("background")[0].appendChild(menu);\n  }\n  drawRules(pos) {\n    const title = document.createElement("ul");\n    title.classList.add("rulestitle");\n    this.drawMenuDisplayBox("How To Play&nbsp;&nbsp;&nbsp;", title, title);\n    const rules = document.createElement("li");\n    this.drawMenuInnerDisplayBox("Steal the enemy\'s treasure & bring it back to your base!<p>BUYING | Select the barracks to buy troops. All units can move up to 2 spaces in any direction. There are 3 types of troops:</p>-Infantry: Defense 2, Attack 1, Range 1<br>-Archer: Defense 1, Attack 1, Range 2<br>-Defender: Defense 3, Attack 1, Range 1<br><p>UPGRADING | When in enemy territory, units can be ugraded as follows:</p>-Infantry: Defense +1, Attack +2<br>-Archer: Defense +1, Attack +1<br>-Defender: Defense +2, Attack +1<br><p>Units cannot attack after upgrading until the next round. Stats return to normal once returning to friendly territory.</p><p>TREASURE | Pick up the treasure by moving a unit onto the square containing it. (You can only pick up enemy treasure.)</p><p>PRICE CHART<br>Moving or Attacking: 1 Action Point<br>Buying or Upgrading: 2 Action Points</p>", rules, title);\n    rules.style.font = "12px Copperplate";\n    if (this.ratio < 0.67) {\n      this.ratio = 0.67;\n    }\n    rules.style.font = 19 * this.ratio - 2 + "px Copperplate";\n    rules.style.lineHeight = "100%";\n    rules.classList.add("rulesbox");\n    title.appendChild(rules);\n    // title.style.visibility = \'hidden\'\n    // this.el.appendChild(title);\n    document.getElementsByClassName("background")[0].appendChild(title);\n    return rules;\n  }\n  drawAbout(pos) {\n    const title = document.createElement("ul");\n    title.classList.add("abouttitle");\n    this.drawMenuDisplayBox("About&nbsp;&nbsp;&nbsp;", title, title);\n    const about = document.createElement("li");\n    this.drawMenuInnerDisplayBox("<br><br><p>Game developed by <a href=\'https://www.linkedin.com/in/jdirksen/\'>Jasmine Kobata</a></p><p><a href=\'https://github.com/JasmineKobata/Javascript-Project\'>Treasure Wars! GitHub Repo</p><p><a href=\'https://www.appacademy.io/\'>App Academy</a> Javascript Project</p>", about, title);\n    if (this.ratio < 0.67) {\n      this.ratio = 0.67;\n    }\n    about.style.font = 20 * this.ratio - 2 + "px Copperplate";\n    about.style.lineHeight = "350%";\n    about.classList.add("aboutbox");\n    title.appendChild(about);\n    title.style.visibility = \'hidden\';\n    // this.el.appendChild(title);\n    document.getElementsByClassName("background")[0].appendChild(title);\n    return about;\n  }\n  drawMenuDisplayBox(str, box, title) {\n    box.style.width = "calc(75% - 42px)";\n    box.style.height = "calc(75% - 2px)";\n    box.style.backgroundColor = "lightskyblue";\n    box.style.border = "1px solid cornflowerblue";\n    box.style.position = "absolute";\n    box.style.left = "50%";\n    box.style.top = "45%";\n    box.style.transform = "translate(-50%, -50%)";\n    box.style.margin = "0px";\n    box.style.listStyle = "none";\n    box.style.cursor = "pointer";\n    box.innerHTML = str;\n    if (this.ratio < 0.67) {\n      this.ratio = 0.67;\n    }\n    box.style.font = 30 * this.ratio - 2 + "px Copperplate";\n    box.style.color = "dimgrey";\n    box.style.textAlign = "center";\n    box.style.lineHeight = "250%";\n    const windowResize = window.onresize;\n    window.onresize = () => {\n      windowResize();\n      if (this.ratio < 0.67) {\n        this.ratio = 0.67;\n      }\n      box.style.font = 30 * this.ratio - 2 + "px Copperplate";\n      box.style.lineHeight = "250%";\n    };\n  }\n  drawMenuInnerDisplayBox(str, box, title) {\n    box.style.width = "calc(80% - 42px)";\n    box.style.height = "calc(80% - 2px)";\n    box.style.backgroundColor = "cornflowerblue";\n    box.style.border = "1px solid cornflowerblue";\n    box.style.position = "absolute";\n    box.style.left = "50%";\n    box.style.top = "50%";\n    box.style.transform = "translate(-50%, -50%)";\n    // box.style.margin = "0px";\n    box.style.listStyle = "none";\n    box.style.cursor = "pointer";\n    box.innerHTML = str;\n    box.style.font = "25px Copperplate";\n    box.style.color = "white";\n  }\n  drawButton(str, cell, pos) {\n    cell.style.backgroundColor = "lightskyblue";\n    cell.style.border = "1px solid cornflowerblue";\n    cell.style.width = "100%";\n    cell.style.height = "100%";\n    cell.style.position = "absolute";\n    cell.style.right = pos.x;\n    cell.style.bottom = pos.y;\n    cell.style.margin = "0px";\n    cell.style.listStyle = "none";\n    cell.style.cursor = "pointer";\n    cell.innerHTML = str;\n    cell.style.color = "dimgrey";\n    cell.style.textAlign = "center";\n  }\n  updateNoMoreMovesStr() {\n    let str = "<br>No Moves Left!</br>";\n    str += this.game.currentPlayer.team === board.PLAYER_TEAM ? "Red" : "Blue";\n    str += "\'s Turn?";\n    return str;\n  }\n  drawNoMoreMovesModule() {\n    const background = document.createElement("div");\n    background.classList.add("movesBackground");\n    background.style.width = "100%";\n    background.style.height = "100%";\n    background.style.position = "absolute";\n    background.style.top = "0px";\n    background.style.visibility = "hidden";\n    const module = document.createElement("ul");\n    module.classList.add("noMoreMoves");\n    module.style.width = "calc(40% - 42px)";\n    module.style.height = "calc(18% - 2px)";\n    module.style.backgroundColor = "lightskyblue";\n    module.style.border = "1px solid cornflowerblue";\n    module.style.position = "absolute";\n    module.style.left = "50%";\n    module.style.top = "45%";\n    module.style.transform = "translate(-50%, -50%)";\n    module.style.margin = "0px";\n    module.style.paddingLeft = "10px";\n    module.style.paddingRight = module.style.paddingLeft;\n    module.style.listStyle = "none";\n    module.style.cursor = "pointer";\n    module.style.font = 27 * this.ratio - 2 + "px Copperplate";\n    module.style.color = "dimgrey";\n    module.style.textAlign = "center";\n    const button = document.createElement("li");\n    button.classList.add("movesButton");\n    button.innerHTML = "OK";\n    button.style.width = "50%";\n    button.style.height = "calc(18% - 2px)";\n    button.style.backgroundColor = "cornflowerblue";\n    button.style.border = "1px solid cornflowerblue";\n    button.style.marginLeft = "auto";\n    button.style.marginRight = "auto";\n    button.style.marginTop = "11%";\n    button.style.color = "white";\n    const windowResize = window.onresize;\n    window.onresize = () => {\n      windowResize();\n      if (this.ratio < 0.67) {\n        this.ratio = 0.67;\n      }\n      module.style.font = 27 * this.ratio - 2 + "px Copperplate";\n      // ruleBox.style.lineHeight = "100%"\n    };\n\n    module.appendChild(button);\n    background.appendChild(module);\n    document.getElementsByClassName("background")[0].appendChild(background);\n\n    // this.bindMovesButton();\n    return background;\n  }\n  drawWinningScreen() {\n    let img = new Image();\n    img.src = \'./resources/wood.png\';\n    img.onload = () => {\n      this.ctx.drawImage(img, View.SQUARE_DIM * Math.floor((board.GRID_WIDTH - 2) / 2), View.SQUARE_DIM * (Math.floor((board.GRID_HEIGHT - 2) / 2) + 0.25), View.SQUARE_DIM * 3, View.SQUARE_DIM * 1.5);\n      this.ctx.beginPath();\n      this.ctx.stroke();\n      this.ctx.font = "30px Copperplate";\n      this.ctx.lineWidth = 3;\n      let str = "";\n      if (this.game.currentPlayer.team === board.PLAYER_TEAM) {\n        this.ctx.fillStyle = "blue";\n        this.ctx.strokeStyle = "darkblue";\n        str += "Blue";\n      } else {\n        this.ctx.fillStyle = "red";\n        this.ctx.strokeStyle = "maroon";\n        str += "Red";\n      }\n      str += " Victory!";\n      this.ctx.strokeText(str, View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 1), View.SQUARE_DIM * (board.GRID_HEIGHT / 2 - 0.25));\n      this.ctx.fillText(str, View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 1), View.SQUARE_DIM * (board.GRID_HEIGHT / 2 - 0.25));\n      this.drawPlayAgainButton();\n    };\n  }\n  drawPlayAgainButton() {\n    this.ctx.lineWidth = 2;\n    this.ctx.fillStyle = \'cornflowerblue\';\n    this.ctx.strokeStyle = \'#543000\';\n    this.ctx.fillRect(View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 0.75), View.SQUARE_DIM * Math.floor(board.GRID_HEIGHT / 2), View.SQUARE_DIM * 1.5, View.SQUARE_DIM * 0.5);\n    this.ctx.strokeRect(View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 0.75), View.SQUARE_DIM * Math.floor(board.GRID_HEIGHT / 2), View.SQUARE_DIM * 1.5, View.SQUARE_DIM * 0.5);\n    this.ctx.strokeStyle = \'blue\';\n    this.ctx.font = "24px Copperplate";\n    this.ctx.lineWidth = 1;\n    this.ctx.fillStyle = "white";\n    this.ctx.strokeStyle = "grey";\n    this.ctx.strokeText("Play Again?", View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 0.70), View.SQUARE_DIM * (board.GRID_HEIGHT / 2 + 0.3));\n    this.ctx.fillText("Play Again?", View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 0.70), View.SQUARE_DIM * (board.GRID_HEIGHT / 2 + 0.3));\n  }\n  drawUpgradeConfirmation(pos) {\n    this.ctx.fillStyle = \'lightskyblue\';\n    this.ctx.fillRect(View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.35);\n    this.ctx.strokeStyle = \'cornflowerblue\';\n    this.ctx.strokeRect(View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.35);\n    this.ctx.lineWidth = 1;\n    this.ctx.font = "20px Copperplate";\n    this.ctx.fillStyle = "dimgrey";\n    this.ctx.fillText("Upgrade?", View.SQUARE_DIM * pos.x, View.SQUARE_DIM * (pos.y + 0.25));\n  }\n  drawBarrackSelection(pos) {\n    let newPos = this.adjustMenuPosition(pos);\n    this.team === board.ENEMY_TEAM ? this.ctx.fillStyle = "red" : this.ctx.fillStyle = "blue";\n    let troopSelection = [];\n    this.images.barrack.onload(newPos);\n    this.ctx.font = "30px Copperplate";\n    this.ctx.fillStyle = "white";\n    this.ctx.lineWidth = 3;\n    this.ctx.fillText("Buy New Troop?", View.SQUARE_DIM * (newPos.x + 0.35), View.SQUARE_DIM * (newPos.y + 0.35));\n    let inf = new infantry(this.game.currentPlayer.team, {\n      y: newPos.y + 0.5,\n      x: newPos.x\n    });\n    let arch = new archer(this.game.currentPlayer.team, {\n      y: newPos.y + 0.5,\n      x: newPos.x + 1\n    });\n    let def = new defender(this.game.currentPlayer.team, {\n      y: newPos.y + 0.5,\n      x: newPos.x + 2\n    });\n    inf.board = this.game.board;\n    arch.board = this.game.board;\n    def.board = this.game.board;\n    inf.view = this.game.view;\n    arch.view = this.game.view;\n    def.view = this.game.view;\n    troopSelection.push(inf);\n    troopSelection.push(arch);\n    troopSelection.push(def);\n    troopSelection.forEach(unit => {\n      unit.draw(this.ctx, this.game.currentPlayer);\n    });\n    return troopSelection;\n  }\n  adjustMenuPosition(pos) {\n    let newPos = {};\n    pos.x === 0 ? newPos.x = pos.x + 0.25 : newPos.x = pos.x - 2.25;\n    pos.y === 0 ? newPos.y = pos.y + 0.5 : newPos.y = pos.y - 1;\n    return newPos;\n  }\n  drawOutline(pos) {\n    this.ctx.strokeStyle = \'yellow\';\n    this.ctx.lineWidth = 10;\n    this.ctx.strokeRect(View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM, View.SQUARE_DIM);\n  }\n  drawMoveHighlights(pos) {\n    this.drawGridSquare(pos.x, pos.y, \'seagreen\', "mediumseagreen");\n  }\n  drawAttackHighlights(pos) {\n    this.drawGridSquare(pos.x, pos.y, "cornflowerblue", "lightskyblue");\n  }\n  drawGridElems(pos, unitPos, clickedPos) {\n    let gridSquare = this.game.board.grid.get(pos);\n    for (let i = 0; i < gridSquare.length; i++) {\n      gridSquare[i].draw(this.ctx, this.game.currentPlayer, unitPos, clickedPos);\n    }\n    this.ctx.beginPath();\n  }\n  drawGridSquare(x, y, outlineColor, fillColor) {\n    if (fillColor) {\n      this.ctx.fillStyle = fillColor;\n      this.ctx.globalAlpha = 0.60;\n      this.ctx.fillRect(View.SQUARE_DIM * x, View.SQUARE_DIM * y, View.SQUARE_DIM, View.SQUARE_DIM);\n    }\n    this.ctx.strokeStyle = outlineColor;\n    this.ctx.lineWidth = 2;\n    this.ctx.strokeRect(View.SQUARE_DIM * x, View.SQUARE_DIM * y, View.SQUARE_DIM, View.SQUARE_DIM);\n    this.ctx.globalAlpha = 1;\n  }\n  renderImg() {\n    let pixelWidth = board.GRID_WIDTH * View.SQUARE_DIM;\n    let pixelHeight = (board.GRID_HEIGHT + 1) * View.SQUARE_DIM;\n    this.ctx.canvas.width = pixelWidth;\n    this.ctx.canvas.height = pixelHeight;\n    this.ratio = Math.min(window.innerHeight / this.ctx.canvas.height, window.innerWidth / this.ctx.canvas.width);\n    // this.ctx.scale(this.ratio, this.ratio);\n    let images = {};\n    images.background = new Image();\n    images.background.src = "./resources/grass2.png";\n    images.background.onload = (unitPos, clickedPos) => {\n      this.ctx.drawImage(images.background, 0, 0, pixelWidth, pixelHeight, 0, 0, pixelWidth, pixelHeight);\n      this.ctx.beginPath();\n      this.ctx.stroke();\n      this.drawBoardWithoutOnload(unitPos, clickedPos);\n    };\n    images.barrack = new Image();\n    images.barrack.src = "./resources/wood.png";\n    images.barrack.onload = pos => {\n      this.ctx.drawImage(images.barrack, View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM * 3, View.SQUARE_DIM * 1.5);\n      this.ctx.beginPath();\n      this.ctx.stroke();\n    };\n    return images;\n  }\n\n  // background.classList.add(".movesBackground")\n  // module.classList.add(".noMoreMoves");\n  // button.classList.add(".movesButton");\n\n  bindEvents(ctx) {\n    const button = document.querySelector(".button");\n    button.addEventListener("click", this.handleButton.bind(this));\n    const about = document.querySelector(".about");\n    if (about) {\n      about.addEventListener("click", this.handleAbout.bind(this));\n    }\n    const rules = document.querySelector(".rules");\n    if (rules) {\n      rules.addEventListener("click", this.handleRules.bind(this));\n    }\n    ctx.canvas.addEventListener(\'click\', this.handleClick.bind(this));\n    document.addEventListener("click", this.handleBackground.bind(this));\n    this.bindMovesButton();\n  }\n  bindMovesButton() {\n    const movesBackground = document.querySelector(".movesBackground");\n    if (movesBackground) {\n      movesBackground.addEventListener("click", this.handleMovesBackground.bind(this, movesBackground));\n    }\n    ;\n    const movesButton = document.querySelector(".movesButton");\n    if (movesButton) {\n      movesButton.addEventListener("click", this.handleMovesButton.bind(this, movesBackground));\n    }\n    ;\n    return movesButton;\n  }\n  handleAbout(event) {\n    const e = document.querySelector(".abouttitle");\n    this.invisifyButtons();\n    e.style.visibility = \'visible\';\n  }\n  handleRules(event) {\n    const e = document.querySelector(".rulestitle");\n    this.invisifyButtons();\n    e.style.visibility = \'visible\';\n  }\n  handleButton(event) {\n    const e1 = document.querySelector(".about");\n    const e2 = document.querySelector(".rules");\n    this.invisifyButtons();\n    e1.style.visibility = \'visible\';\n    e2.style.visibility = \'visible\';\n  }\n  handleClick(event) {\n    let x = Math.floor(event.offsetX / (View.SQUARE_DIM * this.ratio));\n    let y = Math.floor(event.offsetY / (View.SQUARE_DIM * this.ratio));\n    let xExact = event.offsetX / (View.SQUARE_DIM * this.ratio);\n    let yExact = event.offsetY / (View.SQUARE_DIM * this.ratio);\n    let pos = {\n      y,\n      x\n    };\n    let posExact = {\n      y: yExact,\n      x: xExact\n    };\n    if (this.game.board.isWon()) {\n      //    this.drawWinningScreen();\n      if (willPlayAgain(posExact)) {\n        this.game.resetGame(this);\n        this.drawBoard();\n      }\n    } else {\n      this.drawBoard();\n      if (isOnBoard(pos)) {\n        this.game.ctx.clickedPos = pos;\n        this.game.ctx.exactPos = posExact;\n        this.game.stateMachine();\n      } else if (isButton(posExact)) {\n        this.game.switchPlayers();\n        this.drawBoard();\n      }\n    }\n  }\n  handleBackground(event) {\n    if (!document.querySelector(".background").contains(event.target)) {\n      this.drawBoard();\n      this.game.state = "unselected";\n      const movesBackground = document.querySelector(".movesBackground");\n      if (movesBackground) movesBackground.style.visibility = "hidden";\n    }\n  }\n  handleMovesButton(movesBackground, event) {\n    this.game.switchPlayers();\n    movesBackground.style.visibility = "hidden";\n    this.drawBoard();\n  }\n  handleMovesBackground(movesBackground, event) {\n    if (!document.querySelector(".noMoreMoves").contains(event.target)) {\n      movesBackground.style.visibility = "hidden";\n    }\n  }\n}\nview_defineProperty(View, "SQUARE_DIM", 100);\nfunction drawUpgradeButton(unit, ctx, x, y) {\n  unit.team === board.ENEMY_TEAM ? ctx.fillStyle = "red" : ctx.fillStyle = "blue";\n  ctx.beginPath();\n  ctx.arc(View.SQUARE_DIM * x + View.SQUARE_DIM * .15, View.SQUARE_DIM * y + View.SQUARE_DIM * .15, View.SQUARE_DIM * .1, 0, 2.0 * Math.PI);\n  ctx.fill();\n  ctx.fillStyle = "white";\n  ctx.font = "30px Copperplate";\n  ctx.fillText("+", View.SQUARE_DIM * x + View.SQUARE_DIM * 0.06, View.SQUARE_DIM * y + View.SQUARE_DIM * .22);\n}\nfunction drawStats(unit, ctx, x, y) {\n  unit.team === board.ENEMY_TEAM ? ctx.fillStyle = "red" : ctx.fillStyle = "blue";\n  ctx.font = "35px Copperplate";\n  ctx.strokeStyle = \'dimgrey\';\n  ctx.lineWidth = 3;\n  ctx.strokeText("A" + unit.attack.toString(), View.SQUARE_DIM * x + View.SQUARE_DIM * .3, View.SQUARE_DIM * y + View.SQUARE_DIM * .50);\n  ctx.strokeText("D" + unit.defense.toString(), View.SQUARE_DIM * x + View.SQUARE_DIM * .3, View.SQUARE_DIM * y + View.SQUARE_DIM * .75);\n  ctx.fillText("A" + unit.attack.toString(), View.SQUARE_DIM * x + View.SQUARE_DIM * .3, View.SQUARE_DIM * y + View.SQUARE_DIM * .50);\n  ctx.fillText("D" + unit.defense.toString(), View.SQUARE_DIM * x + View.SQUARE_DIM * .3, View.SQUARE_DIM * y + View.SQUARE_DIM * .75);\n}\npieces_barrack.prototype.draw = function (ctx) {\n  this.team === board.ENEMY_TEAM ? ctx.fillStyle = "red" : ctx.fillStyle = "blue";\n  ctx.fillRect(View.SQUARE_DIM * this.pos.x + View.SQUARE_DIM * .10, View.SQUARE_DIM * this.pos.y + View.SQUARE_DIM * .70, View.SQUARE_DIM * .80, View.SQUARE_DIM * .20);\n  this.image.onload = () => {\n    ctx.drawImage(this.image, View.SQUARE_DIM * this.pos.x, View.SQUARE_DIM * this.pos.y, View.SQUARE_DIM, View.SQUARE_DIM);\n    ctx.beginPath();\n    ctx.stroke();\n  };\n  this.image.onload();\n};\nbase.prototype.draw = function (ctx) {\n  this.team === board.ENEMY_TEAM ? ctx.fillStyle = "red" : ctx.fillStyle = "blue";\n  ctx.beginPath();\n  ctx.arc(View.SQUARE_DIM * this.pos.x + View.SQUARE_DIM * .50, View.SQUARE_DIM * this.pos.y + View.SQUARE_DIM * .50, View.SQUARE_DIM * .35, 0, 2.0 * Math.PI);\n  ctx.fill();\n};\ntreasure.prototype.draw = function (ctx) {\n  this.image.onload = () => {\n    ctx.drawImage(this.image, View.SQUARE_DIM * this.pos.x, View.SQUARE_DIM * this.pos.y, View.SQUARE_DIM, View.SQUARE_DIM);\n    ctx.beginPath();\n    ctx.stroke();\n  };\n  this.image.onload();\n};\nfunction drawUpgradeConfirmation(ctx, pos) {\n  ctx.fillStyle = \'lightskyblue\';\n  ctx.fillRect(View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.35);\n  ctx.strokeStyle = \'cornflowerblue\';\n  ctx.strokeRect(View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.35);\n  ctx.lineWidth = 1;\n  ctx.font = "20px Copperplate";\n  ctx.fillStyle = "dimgrey";\n  ctx.fillText("Upgrade?", View.SQUARE_DIM * pos.x, View.SQUARE_DIM * (pos.y + 0.25));\n}\nunit.prototype.draw = function (ctx, currentPlayer, unitPos, clickedPos) {\n  this.team === board.ENEMY_TEAM ? ctx.fillStyle = "red" : ctx.fillStyle = "blue";\n  this.image.onload = () => {\n    ctx.drawImage(this.image, View.SQUARE_DIM * this.pos.x, View.SQUARE_DIM * this.pos.y, View.SQUARE_DIM, View.SQUARE_DIM);\n    ctx.beginPath();\n    ctx.stroke();\n    drawStats(this, ctx, this.pos.x, this.pos.y);\n    if (this.isUpgradable(currentPlayer)) {\n      drawUpgradeButton(this, ctx, this.pos.x, this.pos.y);\n      if (unitPos && clickedPos) {\n        drawUpgradeConfirmation(ctx, unitPos);\n      }\n    }\n  };\n  this.image.onload();\n  // this.image.src = this.image.src;\n};\n\n/* harmony default export */ var src_view = (View);\n;// CONCATENATED MODULE: ./src/player.js\nclass Player {\n  constructor(team, treasure, base) {\n    this.team = team;\n    this.units = [];\n    this.treasure = treasure;\n    this.base;\n  }\n  removeUnit(unit) {\n    let found = false;\n    let i = 0;\n    while (!found && i < this.units.length) {\n      if (this.units[i++].pos.equals(unit.pos)) {\n        found = true;\n      }\n    }\n    let u = this.units.splice(i - 1, 1);\n    // console.log(this.units, u )\n    return this.units;\n  }\n}\n/* harmony default export */ var player = (Player);\n;// CONCATENATED MODULE: ./src/humanPlayer.js\n\nclass HumanPlayer extends player {\n  constructor(team) {\n    super(team);\n  }\n}\n/* harmony default export */ var humanPlayer = (HumanPlayer);\n;// CONCATENATED MODULE: ./src/game.js\n\n\n\nconst MAX_AP = 4;\nconst MAX_UNITS = 8;\nclass Game {\n  constructor() {\n    this.board = new board();\n    this.view = null;\n    this.state = \'unselected\';\n    this.player = new humanPlayer(board.PLAYER_TEAM);\n    this.enemy = new humanPlayer(board.ENEMY_TEAM);\n    this.currentPlayer = this.player;\n    this.actionPoints = MAX_AP;\n    this.ctx = {}; //{ clickedPos, selectedSquare }\n  }\n\n  resetGame(view) {\n    this.board = new board();\n    this.view = view;\n    this.state = \'unselected\';\n    this.player = new humanPlayer(board.PLAYER_TEAM);\n    this.enemy = new humanPlayer(board.ENEMY_TEAM);\n    this.currentPlayer = this.player;\n    this.actionPoints = MAX_AP;\n    this.ctx = {};\n  }\n  switchPlayers() {\n    this.board.grid.forEach(col => {\n      col.forEach(row => {\n        row.forEach(e => {\n          if (e.parentType() === \'Unit\') {\n            e.hasMoved = false;\n            e.hasAttacked = false;\n            e.hasUpgraded = false;\n          }\n        });\n      });\n    });\n    this.actionPoints = MAX_AP;\n    this.state = \'unselected\';\n    this.currentPlayer === this.player ? this.currentPlayer = this.enemy : this.currentPlayer = this.player;\n  }\n\n  //ctx -> {clickedPos always set, selectedSquare that will be set in unselected stage}\n  stateMachine() {\n    let square = this.board.grid.get(this.ctx.clickedPos);\n    switch (this.state) {\n      case \'unselected\':\n        this.redirectState(square);\n        break;\n      case \'unit\':\n        //if action taken\n        if (this.actionTaken(this.ctx.clickedPos, this.ctx.selectedSquare)) {\n          this.ctx = {};\n          this.state = \'unselected\';\n          // this.view.drawBoard();\n          if (this.board.isWon()) {\n            this.view.drawBoard();\n            this.view.drawWinningScreen();\n          } else {\n            if (this.actionPoints === 0) {\n              this.switchPlayers();\n            }\n            this.view.drawBoard();\n          }\n        } //else if action not taken\n        else {\n          this.redirectState(square);\n        }\n        this.noMoreMovesDisplay();\n        break;\n      case \'barrack\':\n        //if unit is bought\n        if (this.unitBought(this.ctx.exactPos, this.ctx.menu, this.ctx.selectedSquare)) {\n          this.ctx = {};\n          this.state = \'unselected\';\n          if (this.actionPoints === 0) {\n            this.switchPlayers();\n          }\n          this.view.drawBoard();\n        } //else if unit is not bought\n        else {\n          this.redirectState(square);\n        }\n        this.noMoreMovesDisplay();\n        break;\n      case \'upgrade\':\n        //if unit is upgraded\n        if (this.unitUpgraded(this.ctx.exactPos, this.ctx.selectedSquare)) {\n          this.state = \'unselected\';\n          if (this.actionPoints === 0) {\n            this.switchPlayers();\n          }\n          this.view.drawBoard();\n        } else {\n          this.redirectState(square);\n        }\n        this.noMoreMovesDisplay();\n        break;\n      default:\n      // console.log("ERROR: undefined state");\n    }\n  }\n\n  redirectState(square) {\n    this.view.drawBoard();\n    //if unit upgrade is selected\n    if (this.unitUpgradeable(this.ctx.exactPos, square.last())) {\n      this.state = \'upgrade\';\n    } //if unit is selected\n    else if (this.unitSelected(square.last())) {\n      this.state = \'unit\';\n    } //else if barrack is selected\n    else if (this.actionPoints > 1 && this.currentPlayer.units.length < MAX_UNITS && this.barrackSelected(square.first())) {\n      this.ctx.menu = this.view.drawBarrackSelection(square.first().pos);\n      this.state = \'barrack\';\n    } else {\n      this.state = \'unselected\';\n    }\n    this.ctx.selectedSquare = square;\n  }\n  noMoreMovesDisplay() {\n    if (!this.movesAvailable() && this.actionPoints < MAX_AP) {\n      const noMoreMoves = this.view.noMoreMoves.querySelector(".noMoreMoves");\n      const button = noMoreMoves.querySelector(".movesButton");\n      noMoreMoves.innerHTML = this.view.updateNoMoreMovesStr();\n      noMoreMoves.appendChild(button);\n      this.view.noMoreMoves.style.visibility = "visible";\n    }\n  }\n  movesAvailable() {\n    let bool = false;\n    this.currentPlayer.units.forEach(unit => {\n      bool ||= !unit.hasMoved;\n      if (!unit.hasAttacked) {\n        unit.getAttacks();\n      }\n      bool ||= !unit.hasUpgraded && unit.attacks.length > 0;\n      bool ||= this.actionPoints > 1 && unit.isUpgradable(this.currentPlayer);\n      bool ||= this.actionPoints > 1 && this.barracksEmpty();\n    });\n    return bool;\n  }\n  barracksEmpty() {\n    let barracks;\n    if (this.currentPlayer === this.player) {\n      barracks = this.board.barracks.player;\n    } else {\n      barracks = this.board.barracks.enemy;\n    }\n    let res = false;\n    barracks.forEach(b => {\n      let bool = true;\n      const barrackSquare = this.board.grid.get(b.pos);\n      barrackSquare.forEach(unit => {\n        if (unit.parentType() === \'Unit\') bool = false;\n      });\n      res ||= bool;\n    });\n    return res;\n  }\n  unitUpgradeable(pos, unit) {\n    let unitUpgradeable = false;\n    if (this.actionPoints > 1 && unit && unit.parentType() === \'Unit\' && unit.isUpgradable(this.currentPlayer) && isUpgradeButton(unit.pos, pos)) {\n      unitUpgradeable = true;\n      this.view.drawBoard(unit.pos, pos);\n    }\n    return unitUpgradeable;\n  }\n  unitUpgraded(pos, square) {\n    let unitUpgraded = false;\n    let unit = square.last();\n    if (unit && unit.parentType() === \'Unit\' && unit.isUpgradable(this.currentPlayer) && isUpgradeConfirmation(unit.pos, pos)) {\n      unit.upgrades();\n      this.actionPoints -= 2;\n      unitUpgraded = true;\n    }\n    return unitUpgraded;\n  }\n  unitSelected(unit) {\n    let unitSelected = false;\n    if (unit && unit.parentType() === \'Unit\' && unit.team === this.currentPlayer.team) {\n      unit.resetActions(); //reset newly selected unit\'s action squares\n      if (!unit.board) {\n        unit.board = this.board;\n      }\n      if (!unit.view) {\n        unit.view = this.view;\n      }\n      this.unitCallDrawSelected(unit, this.view);\n      unitSelected = true;\n    }\n    return unitSelected;\n  }\n  unitCallDrawSelected(unit, view) {\n    if (!unit.hasMoved) {\n      unit.getMoves().forEach(pos => {\n        view.drawMoveHighlights(pos);\n        view.drawGridElems(pos);\n      });\n    }\n    if (!unit.hasAttacked && !unit.hasUpgraded) {\n      unit.getAttacks().forEach(pos => {\n        view.drawAttackHighlights(pos);\n        view.drawGridElems(pos);\n      });\n    }\n    view.drawOutline(unit.pos);\n  }\n  barrackSelected(barrack) {\n    return barrack && barrack.type() === \'Barrack\' && barrack.team === this.currentPlayer.team;\n  }\n  unitBought(pos, menu, square) {\n    let unitBought = false;\n    let newPos = this.adjustMenuPosition(square.first(), pos);\n    let unit;\n    if (unit = menu.find(e => e.pos.x === newPos.x && e.pos.y === newPos.y)) {\n      unit.pos = square.first().pos;\n      square.push(unit);\n      this.currentPlayer.units.push(unit);\n      this.actionPoints -= 2;\n      unitBought = true;\n    }\n    return unitBought;\n  }\n  adjustMenuPosition(barrack, pos) {\n    let xDifference = barrack.pos.x === 0 ? -0.25 : 0.25;\n    let yDifference = barrack.pos.y === 0 ? -1 : 0.5;\n    let x = Math.floor(pos.x + xDifference);\n    let y = Math.floor(pos.y + yDifference);\n    let newPos = {};\n    newPos.x = barrack.pos.x === 0 ? x + 0.25 : x - 0.25;\n    newPos.y = barrack.pos.y === 0 ? y + 1 : y - 0.5;\n    return newPos;\n  }\n  actionTaken(pos, square) {\n    return this.moveUnit(pos, square) || this.attackUnit(pos, square);\n  }\n  moveUnit(pos, square) {\n    let unitMoved = false;\n    let unit = square.last();\n    if (unit.moves && unit.moves.find(e => e.x === pos.x && e.y === pos.y)) {\n      unit.pos = pos; //reset unit position;\n      if (unit.onHomeTerf()) {\n        unit.downgrade();\n      }\n      square.pop();\n      let treasureIdx = this.getTreasureIdx(square);\n      if (treasureIdx !== null) {\n        square[treasureIdx].pos = pos;\n        this.board.grid.get(pos).push(square[treasureIdx]);\n        square.splice(treasureIdx, 1);\n      }\n      this.board.grid.get(pos).push(unit);\n      this.actionPoints--;\n      unit.hasMoved = true;\n      unitMoved = true;\n    }\n    return unitMoved;\n  }\n  getTreasureIdx(square) {\n    for (let i = 0; i < square.length; i++) {\n      if (square[i].team !== this.currentPlayer.team && square[i].type() === \'Treasure\') {\n        return i;\n      }\n    }\n    return null;\n  }\n  attackUnit(pos, square) {\n    let unitAttacked = false;\n    let unit = square.last();\n    if (unit.attacks && unit.attacks.find(e => e.x === pos.x && e.y === pos.y)) {\n      let attackedSquare = this.board.grid.get(pos);\n      let attackedUnit = attackedSquare.last();\n      attackedUnit.defense -= unit.attack;\n      if (attackedUnit.defense < 1) {\n        attackedSquare.pop();\n        this.currentPlayer.team === this.player.team ? this.enemy.removeUnit(attackedUnit) : this.player.removeUnit(attackedUnit);\n      }\n      this.actionPoints--;\n      unit.hasAttacked = true;\n      unitAttacked = true;\n    }\n    return unitAttacked;\n  }\n}\n/* harmony default export */ var src_game = (Game);\n;// CONCATENATED MODULE: ./src/index.js\n\n\ndocument.addEventListener("DOMContentLoaded", () => {\n  const canvas = document.getElementById(\'treasure-game\');\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n  const ctx = canvas.getContext("2d");\n  const el = document.querySelector(\'.buttons\');\n  const game = new src_game();\n  const view = new src_view(game, ctx, el);\n  game.view = view;\n  view.bindEvents(ctx);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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NmMxYiIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXByb2plY3QvLi9zcmMvcGllY2VzL2JhcnJhY2suanM/YmI3MSIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXByb2plY3QvLi9zcmMvcGllY2VzL2Jhc2UuanM/Y2I5NCIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXByb2plY3QvLi9zcmMvcGllY2VzL3RyZWFzdXJlLmpzPzMwOTUiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1wcm9qZWN0Ly4vc3JjL2JvYXJkLmpzPzIzZGIiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1wcm9qZWN0Ly4vc3JjL3V0aWxzLmpzPzAyNWUiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1wcm9qZWN0Ly4vc3JjL3BpZWNlcy91bml0LmpzP2U1YTUiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1wcm9qZWN0Ly4vc3JjL3BpZWNlcy91bml0cy9hcmNoZXIuanM/ZTYxZiIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXByb2plY3QvLi9zcmMvcGllY2VzL3VuaXRzL2RlZmVuZGVyLmpzPzlkNDIiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1wcm9qZWN0Ly4vc3JjL3BpZWNlcy91bml0cy9pbmZhbnRyeS5qcz84ODRlIiwid2VicGFjazovL2phdmFzY3JpcHQtcHJvamVjdC8uL3NyYy92aWV3LmpzP2YwNzgiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1wcm9qZWN0Ly4vc3JjL3BsYXllci5qcz9hOGEyIiwid2VicGFjazovL2phdmFzY3JpcHQtcHJvamVjdC8uL3NyYy9odW1hblBsYXllci5qcz8wNzM3Iiwid2VicGFjazovL2phdmFzY3JpcHQtcHJvamVjdC8uL3NyYy9nYW1lLmpzPzdkZTAiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1wcm9qZWN0Ly4vc3JjL2luZGV4LmpzP2I2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgUGllY2Uge1xuICAgIGNvbnN0cnVjdG9yKHRlYW0sIHBvcywgKSB7XG4gICAgICAgIHRoaXMudGVhbSA9IHRlYW07XG4gICAgICAgIHRoaXMucG9zID0gcG9zXG4gICAgICAgIHRoaXMuaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICB9XG5cbiAgICBwYXJlbnRUeXBlKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMuY29uc3RydWN0b3IpLm5hbWU7XG4gICAgfVxuXG4gICAgdHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBpZWNlOyIsImltcG9ydCBQaWVjZSBmcm9tIFwiLi4vcGllY2VcIjtcblxuY2xhc3MgQmFycmFjayBleHRlbmRzIFBpZWNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZWFtLCBwb3MpIHtcbiAgICAgICAgc3VwZXIodGVhbSwgcG9zKTtcbiAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcIi4vcmVzb3VyY2VzL2JhcnJhY2tzMi5wbmdcIjtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJhcnJhY2s7IiwiaW1wb3J0IFBpZWNlIGZyb20gXCIuLi9waWVjZVwiO1xuXG5jbGFzcyBCYXNlIGV4dGVuZHMgUGllY2Uge1xuICAgIGNvbnN0cnVjdG9yKHRlYW0sIHBvcykge1xuICAgICAgICBzdXBlcih0ZWFtLCBwb3MpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmFzZTsiLCJpbXBvcnQgUGllY2UgZnJvbSBcIi4uL3BpZWNlXCI7XG5pbXBvcnQgQm9hcmQgZnJvbSBcIi4uL2JvYXJkXCI7XG5cbmNsYXNzIFRyZWFzdXJlIGV4dGVuZHMgUGllY2Uge1xuICAgIGNvbnN0cnVjdG9yKHRlYW0sIHBvcykge1xuICAgICAgICBzdXBlcih0ZWFtLCBwb3MpO1xuICAgICAgICB0aGlzLnRlYW0gPT09IEJvYXJkLlBMQVlFUl9URUFNID8gdGhpcy5pbWFnZS5zcmMgPSBcIi4vcmVzb3VyY2VzL3RyZWFzdXJlYmx1ZS5wbmdcIiA6IHRoaXMuaW1hZ2Uuc3JjID0gXCIuL3Jlc291cmNlcy90cmVhc3VyZXJlZC5wbmdcIjtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRyZWFzdXJlOyIsImltcG9ydCBCYXJyYWNrIGZyb20gXCIuL3BpZWNlcy9iYXJyYWNrXCI7XG5pbXBvcnQgQmFzZSBmcm9tIFwiLi9waWVjZXMvYmFzZVwiO1xuaW1wb3J0IFRyZWFzdXJlIGZyb20gXCIuL3BpZWNlcy90cmVhc3VyZVwiO1xuXG5jbGFzcyBCb2FyZCB7XG4gICAgc3RhdGljIEdSSURfV0lEVEggPSA3O1xuICAgIHN0YXRpYyBHUklEX0hFSUdIVCA9IDg7IC8vMCwgMCBpcyB0b3AgbGVmdCBjb3JuZXJcbiAgICBzdGF0aWMgUExBWUVSX1RFQU0gPSAxO1xuICAgIHN0YXRpYyBFTkVNWV9URUFNID0gMjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBsZXQgcG9zMSA9IHt5OiBCb2FyZC5HUklEX0hFSUdIVC0xLCB4OiBNYXRoLmZsb29yKEJvYXJkLkdSSURfV0lEVEgvMil9XG4gICAgICAgIGxldCBwb3MyID0ge3k6IDAsIHg6IE1hdGguZmxvb3IoQm9hcmQuR1JJRF9XSURUSC8yKX1cbiAgICAgICAgdGhpcy50cmVhc3VyZSA9IHtcbiAgICAgICAgICAgIHBsYXllcjogbmV3IFRyZWFzdXJlKEJvYXJkLlBMQVlFUl9URUFNLCBwb3MxKSxcbiAgICAgICAgICAgIGVuZW15OiBuZXcgVHJlYXN1cmUoQm9hcmQuRU5FTVlfVEVBTSwgcG9zMil9O1xuXG4gICAgICAgIHBvczEgPSB7eTogMCwgeDogTWF0aC5mbG9vcihCb2FyZC5HUklEX1dJRFRILzIpfTtcbiAgICAgICAgcG9zMiA9IHt5OiBCb2FyZC5HUklEX0hFSUdIVC0xLCB4OiBNYXRoLmZsb29yKEJvYXJkLkdSSURfV0lEVEgvMil9XG4gICAgICAgIHRoaXMuYmFzZSA9IHtcbiAgICAgICAgICAgIHBsYXllcjogbmV3IEJhc2UoQm9hcmQuUExBWUVSX1RFQU0sIHBvczIpLFxuICAgICAgICAgICAgZW5lbXk6IG5ldyBCYXNlKEJvYXJkLkVORU1ZX1RFQU0sIHBvczEpfTtcbiAgICAgICAgdGhpcy5iYXJyYWNrcyA9IHtcbiAgICAgICAgICAgIHBsYXllcjogW10sXG4gICAgICAgICAgICBlbmVteTogW11cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5ncmlkID0gQm9hcmQubWFrZUdyaWQodGhpcy50cmVhc3VyZSwgdGhpcy5iYXNlLCB0aGlzLmJhcnJhY2tzKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgbWFrZUdyaWQodHJlYXN1cmUsIGJhc2UsIGJhcnJhY2tzKSB7XG4gICAgICAgIGxldCBncmlkID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaT0wOyBpIDwgQm9hcmQuR1JJRF9IRUlHSFQ7IGkrKykge1xuICAgICAgICAgICAgZ3JpZC5wdXNoKFtdKTtcbiAgICAgICAgICAgIGZvciAobGV0IGo9MDsgaiA8IEJvYXJkLkdSSURfV0lEVEg7IGorKykge1xuICAgICAgICAgICAgICAgIGdyaWRbaV0ucHVzaChbXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcG9zID0ge3k6IDAsIHg6IDB9O1xuICAgICAgICBsZXQgYmFycmFjayA9IG5ldyBCYXJyYWNrKEJvYXJkLkVORU1ZX1RFQU0sIHBvcyk7XG4gICAgICAgIGdyaWQuZ2V0KHBvcykucHVzaChiYXJyYWNrKTtcbiAgICAgICAgYmFycmFja3MuZW5lbXkucHVzaChiYXJyYWNrKTtcblxuICAgICAgICBwb3MgPSB7eTogMCwgeDogQm9hcmQuR1JJRF9XSURUSC0xfTtcbiAgICAgICAgYmFycmFjayA9IG5ldyBCYXJyYWNrKEJvYXJkLkVORU1ZX1RFQU0sIHBvcyk7XG4gICAgICAgIGdyaWQuZ2V0KHBvcykucHVzaChiYXJyYWNrKTtcbiAgICAgICAgYmFycmFja3MuZW5lbXkucHVzaChiYXJyYWNrKTtcblxuICAgICAgICBwb3MgPSB7eTogQm9hcmQuR1JJRF9IRUlHSFQtMSwgeDogMH07XG4gICAgICAgIGJhcnJhY2sgPSBuZXcgQmFycmFjayhCb2FyZC5QTEFZRVJfVEVBTSwgcG9zKTtcbiAgICAgICAgZ3JpZC5nZXQocG9zKS5wdXNoKGJhcnJhY2spO1xuICAgICAgICBiYXJyYWNrcy5wbGF5ZXIucHVzaChiYXJyYWNrKTtcblxuICAgICAgICBwb3MgPSB7eTogQm9hcmQuR1JJRF9IRUlHSFQtMSwgeDogQm9hcmQuR1JJRF9XSURUSC0xfTtcbiAgICAgICAgYmFycmFjayA9IG5ldyBCYXJyYWNrKEJvYXJkLlBMQVlFUl9URUFNLCBwb3MpO1xuICAgICAgICBncmlkLmdldChwb3MpLnB1c2goYmFycmFjayk7XG4gICAgICAgIGJhcnJhY2tzLnBsYXllci5wdXNoKGJhcnJhY2spO1xuXG4gICAgICAgIGdyaWQuZ2V0KGJhc2UuZW5lbXkucG9zKS5wdXNoKGJhc2UuZW5lbXkpO1xuICAgICAgICBncmlkLmdldChiYXNlLnBsYXllci5wb3MpLnB1c2goYmFzZS5wbGF5ZXIpO1xuXG4gICAgICAgIGdyaWQuZ2V0KHRyZWFzdXJlLmVuZW15LnBvcykucHVzaCh0cmVhc3VyZS5lbmVteSk7XG4gICAgICAgIGdyaWQuZ2V0KHRyZWFzdXJlLnBsYXllci5wb3MpLnB1c2godHJlYXN1cmUucGxheWVyKTtcblxuICAgICAgICByZXR1cm4gZ3JpZDtcbiAgICB9XG5cbiAgICBpc1dvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJlYXN1cmUucGxheWVyLnBvcy5lcXVhbHModGhpcy5iYXNlLmVuZW15LnBvcykgfHxcbiAgICAgICAgICAgIHRoaXMudHJlYXN1cmUuZW5lbXkucG9zLmVxdWFscyh0aGlzLmJhc2UucGxheWVyLnBvcyk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCb2FyZDsiLCJpbXBvcnQgQm9hcmQgZnJvbSBcIi4vYm9hcmRcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzT25Cb2FyZChwb3MpIHtcbiAgICByZXR1cm4gcG9zLnggPiAtMSAmJiBwb3MueCA8IEJvYXJkLkdSSURfV0lEVEggJiYgcG9zLnkgPiAtMSAmJiBwb3MueSA8IEJvYXJkLkdSSURfSEVJR0hUO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCdXR0b24ocG9zKSB7XG4gICAgcmV0dXJuIHBvcy55ID4gQm9hcmQuR1JJRF9IRUlHSFQgKyAwLjI1ICYmXG4gICAgICAgIHBvcy55IDwgQm9hcmQuR1JJRF9IRUlHSFQgKyAwLjc1ICYmXG4gICAgICAgIHBvcy54ID4gNCAmJiBwb3MueCA8IDU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aWxsUGxheUFnYWluKHBvcykge1xuICAgICByZXR1cm4gcG9zLnggPiBCb2FyZC5HUklEX1dJRFRIIC8gMiAtIDAuNzUgJiZcbiAgICAgICAgcG9zLnggPCBCb2FyZC5HUklEX1dJRFRIIC8gMiArIDAuNzUgJiZcbiAgICAgICAgcG9zLnkgPiBNYXRoLmZsb29yKChCb2FyZC5HUklEX0hFSUdIVCkgLyAyKSAmJlxuICAgICAgICBwb3MueSA8IE1hdGguZmxvb3IoKEJvYXJkLkdSSURfSEVJR0hUKSAvIDIpICsgMC41O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNVcGdyYWRlQnV0dG9uKHNxdWFyZVBvcywgY2xpY2tQb3MpIHtcbiAgICBsZXQgeCA9IGNsaWNrUG9zLnggLSBzcXVhcmVQb3MueDtcbiAgICBsZXQgeSA9IGNsaWNrUG9zLnkgLSBzcXVhcmVQb3MueTtcblxuICAgIHJldHVybiB4ID4gMCAmJiB4IDwgMC4yNSAmJiB5ID4gMCAmJiB5IDwgMC4yNTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVXBncmFkZUNvbmZpcm1hdGlvbihzcXVhcmVQb3MsIGNsaWNrUG9zKSB7XG4gICAgbGV0IHggPSBjbGlja1Bvcy54IC0gc3F1YXJlUG9zLng7XG4gICAgbGV0IHkgPSBjbGlja1Bvcy55IC0gc3F1YXJlUG9zLnk7XG4gICAgcmV0dXJuIHggPiAwICYmIHggPCAxICYmIHkgPiAwICYmIHkgPCAwLjI1O1xufVxuXG5BcnJheS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24ocG9zKSB7XG4gICAgcmV0dXJuIHRoaXNbcG9zLnldW3Bvcy54XTtcbn1cblxuQXJyYXkucHJvdG90eXBlLmNvbnRhaW5zVHlwZSA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICBzcXVhcmUuc29tZSgpXG59XG5cbkFycmF5LnByb3RvdHlwZS5sYXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXNbdGhpcy5sZW5ndGggLSAxXTtcbn1cblxuQXJyYXkucHJvdG90eXBlLmZpcnN0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXNbMF07XG59XG5cbk9iamVjdC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24ocG9zKSB7XG4gICAgcmV0dXJuIHRoaXMueCA9PT0gcG9zLnggJiYgdGhpcy55ID09PSBwb3MueTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQXJyYXk7IiwiaW1wb3J0IEJvYXJkIGZyb20gXCIuLi9ib2FyZFwiO1xuaW1wb3J0IFBpZWNlIGZyb20gXCIuLi9waWVjZVwiO1xuaW1wb3J0IHtpc09uQm9hcmR9IGZyb20gXCIuLi91dGlsc1wiO1xuXG5jbGFzcyBVbml0IGV4dGVuZHMgUGllY2Uge1xuICAgIGNvbnN0cnVjdG9yKHRlYW0sIHBvcykge1xuICAgICAgICBzdXBlcih0ZWFtLCBwb3MpO1xuICAgICAgICB0aGlzLmF0dGFjayA9IG51bGw7XG4gICAgICAgIHRoaXMuZGVmZW5zZSA9IG51bGw7XG4gICAgICAgIHRoaXMucG9pbnRTdGFuZGFyZCA9IG51bGw7XG4gICAgICAgIHRoaXMudXBncmFkZSA9IG51bGw7XG4gICAgICAgIHRoaXMubGV2ZWwgPSAxO1xuICAgICAgICB0aGlzLmF0dGFja0Rpc3QgPSAxO1xuICAgICAgICB0aGlzLm1vdmVzID0gbnVsbDtcbiAgICAgICAgdGhpcy5hdHRhY2tzID0gW107XG4gICAgICAgIHRoaXMuaGFzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5oYXNBdHRhY2tlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmhhc1VwZ3JhZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYm9hcmQgPSBudWxsO1xuICAgICAgICB0aGlzLnZpZXcgPSBudWxsO1xuICAgIH1cblxuICAgIHJlc2V0QWN0aW9ucygpIHtcbiAgICAgICAgdGhpcy5tb3ZlcyA9IG51bGw7XG4gICAgICAgIHRoaXMuYXR0YWNrcyA9IFtdO1xuICAgIH1cblxuICAgIHVwZ3JhZGVzKCkge1xuICAgICAgICB0aGlzLmxldmVsID0gMjtcbiAgICAgICAgdGhpcy5oYXNVcGdyYWRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuYXR0YWNrID0gdGhpcy51cGdyYWRlLmF0dGFjaztcbiAgICAgICAgdGhpcy5kZWZlbnNlID0gdGhpcy51cGdyYWRlLmRlZmVuc2U7XG4gICAgfVxuXG4gICAgZG93bmdyYWRlKCkge1xuICAgICAgICB0aGlzLmxldmVsID0gMTtcbiAgICAgICAgdGhpcy5hdHRhY2sgPSB0aGlzLnBvaW50U3RhbmRhcmQuYXR0YWNrO1xuICAgICAgICB0aGlzLmRlZmVuc2UgPSBNYXRoLm1pbih0aGlzLnBvaW50U3RhbmRhcmQuZGVmZW5zZSwgdGhpcy5kZWZlbnNlKTtcbiAgICB9XG5cbiAgICBnZXRNb3ZlcygpIHtcbiAgICAgICAgdGhpcy5tb3ZlcyA9IHRoaXMuZ2V0TW92ZXNTZXQoKTtcbiAgICAgICAgdGhpcy5tb3Zlcy5kZWxldGUoSlNPTi5zdHJpbmdpZnkodGhpcy5wb3MpKTtcbiAgICAgICAgdGhpcy5tb3ZlcyA9IFsuLi50aGlzLm1vdmVzXS5tYXAoZWxlbSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShlbGVtKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLm1vdmVzO1xuICAgIH1cblxuICAgIGdldE1vdmVzU2V0KHZhbGlkVmlzaXRlZCA9IG5ldyBTZXQoKSwgbWF4RGlzdCA9IDIsIHBvcyA9IHRoaXMucG9zKSB7XG4gICAgICAgIGlmIChtYXhEaXN0ID09PSAwKSB7IHJldHVybiB2YWxpZFZpc2l0ZWQ7IH1cblxuICAgICAgICBmb3IgKGxldCB5PXBvcy55LTE7IHkgPD0gcG9zLnkgKyAxOyB5KyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHg9cG9zLngtMTsgeCA8PSBwb3MueCArIDE7IHgrKykge1xuICAgICAgICAgICAgICAgIGxldCBuZXdQb3MgPSB7eTogeSwgeDogeH07XG4gICAgICAgICAgICAgICAgaWYgKGlzT25Cb2FyZChuZXdQb3MpICYmICF0aGlzLmhhc1VuaXQobmV3UG9zKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbGlkVmlzaXRlZC5oYXMoSlNPTi5zdHJpbmdpZnkobmV3UG9zKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkVmlzaXRlZC5hZGQoSlNPTi5zdHJpbmdpZnkobmV3UG9zKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFsaWRWaXNpdGVkID0gdGhpcy5nZXRNb3Zlc1NldCh2YWxpZFZpc2l0ZWQsIG1heERpc3QtMSwgbmV3UG9zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsaWRWaXNpdGVkO1xuICAgIH1cblxuICAgIGdldEF0dGFja3MoKSB7XG4gICAgICAgIGZvciAobGV0IHk9dGhpcy5wb3MueS10aGlzLmF0dGFja0Rpc3Q7IHkgPD0gdGhpcy5wb3MueSArIHRoaXMuYXR0YWNrRGlzdDsgeSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB4PXRoaXMucG9zLngtdGhpcy5hdHRhY2tEaXN0OyB4IDw9IHRoaXMucG9zLnggKyB0aGlzLmF0dGFja0Rpc3Q7IHgrKykge1xuICAgICAgICAgICAgICAgIGxldCBuZXdQb3MgPSB7eTogeSwgeDogeH07XG4gICAgICAgICAgICAgICAgaWYgKGlzT25Cb2FyZChuZXdQb3MpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzcXVhcmUgPSB0aGlzLmJvYXJkLmdyaWQuZ2V0KG5ld1Bvcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc1VuaXQobmV3UG9zKSAmJiBzcXVhcmUubGFzdCgpLnRlYW0gIT09IHRoaXMudGVhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hdHRhY2tzLnB1c2gobmV3UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5hdHRhY2tzO1xuICAgIH1cblxuICAgIGhhc1VuaXQocG9zKSB7XG4gICAgICAgIGxldCBzcXVhcmUgPSB0aGlzLmJvYXJkLmdyaWQuZ2V0KHBvcyk7XG4gICAgICAgIGlmIChzcXVhcmUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV0IGVsZW1UeXBlID0gc3F1YXJlLmxhc3QoKS5wYXJlbnRUeXBlKCk7XG4gICAgICAgICAgICBpZiAoZWxlbVR5cGUgPT09ICdVbml0Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpc1VwZ3JhZGFibGUoY3VycmVudFBsYXllcikge1xuICAgICAgICByZXR1cm4gdGhpcy50ZWFtID09PSBjdXJyZW50UGxheWVyLnRlYW0gJiZcbiAgICAgICAgICAgIHRoaXMubGV2ZWwgPT0gMSAmJlxuICAgICAgICAgICAgKCh0aGlzLnRlYW0gPT09IEJvYXJkLlBMQVlFUl9URUFNICYmIHRoaXMucG9zLnkgPCBCb2FyZC5HUklEX0hFSUdIVCAvIDIpIHx8XG4gICAgICAgICAgICAodGhpcy50ZWFtID09PSBCb2FyZC5FTkVNWV9URUFNICYmIHRoaXMucG9zLnkgPj0gQm9hcmQuR1JJRF9IRUlHSFQgLyAyKSk7XG4gICAgfVxuXG4gICAgb25Ib21lVGVyZigpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnRlYW0gPT09IEJvYXJkLlBMQVlFUl9URUFNICYmIHRoaXMucG9zLnkgPj0gQm9hcmQuR1JJRF9IRUlHSFQgLyAyKSB8fFxuICAgICAgICAgICAgKHRoaXMudGVhbSA9PT0gQm9hcmQuRU5FTVlfVEVBTSAmJiB0aGlzLnBvcy55IDwgQm9hcmQuR1JJRF9IRUlHSFQgLyAyKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFVuaXQ7IiwiaW1wb3J0IFVuaXQgZnJvbSBcIi4uL3VuaXRcIjtcblxuY2xhc3MgQXJjaGVyIGV4dGVuZHMgVW5pdCB7XG4gICAgY29uc3RydWN0b3IodGVhbSwgcG9zKSB7XG4gICAgICAgIHN1cGVyKHRlYW0sIHBvcyk7XG4gICAgICAgIHRoaXMuYXR0YWNrID0gMTtcbiAgICAgICAgdGhpcy5kZWZlbnNlID0gMTtcbiAgICAgICAgdGhpcy5hdHRhY2tEaXN0ID0gMjtcbiAgICAgICAgdGhpcy51cGdyYWRlID0ge2F0dGFjazogMiwgZGVmZW5zZTogMn1cbiAgICAgICAgdGhpcy5wb2ludFN0YW5kYXJkID0ge2F0dGFjazogMSwgZGVmZW5zZTogMX1cbiAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcIi4vcmVzb3VyY2VzL2FyY2hlci5wbmdcIjtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFyY2hlcjsiLCJpbXBvcnQgVW5pdCBmcm9tIFwiLi4vdW5pdFwiO1xuXG5jbGFzcyBEZWZlbmRlciBleHRlbmRzIFVuaXQge1xuICAgIGNvbnN0cnVjdG9yKHRlYW0sIHBvcykge1xuICAgICAgICBzdXBlcih0ZWFtLCBwb3MpO1xuICAgICAgICB0aGlzLmF0dGFjayA9IDE7XG4gICAgICAgIHRoaXMuZGVmZW5zZSA9IDM7XG4gICAgICAgIC8vaWYgYXR0YWNrIGlzIGNoYW5nZWQgdG8gMSwgdW5pdC5pc1VwZ3JhZGFibGUgcmV0dXJucyB0cnVlIHdoZW4gdW5pdCBpcyBhbHJlYWR5IHVwZ3JhZGVkXG4gICAgICAgIC8vYmVjYXVzZSBpdCBjaGVja3MgaWYgdXBncmFkZWQgdXNpbmcgYXR0YWNrIHBvaW50cy4gTmVlZCB0byBpbXBsZW1lbnQgZGlmZmVyZW50IGNoZWNrXG4gICAgICAgIC8vaWYgbWFraW5nIHVwZ3JhZGVkIGF0dGFjayBwb2ludHMgZXF1YWwgdG8gc3RhbmRhcmQgYXR0YWNrIHBvaW50c1xuICAgICAgICB0aGlzLnVwZ3JhZGUgPSB7YXR0YWNrOiAxLCBkZWZlbnNlOiA1fVxuICAgICAgICB0aGlzLnBvaW50U3RhbmRhcmQgPSB7YXR0YWNrOiAxLCBkZWZlbnNlOiAzfVxuICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiLi9yZXNvdXJjZXMvZGVmZW5kZXIucG5nXCI7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEZWZlbmRlcjsiLCJpbXBvcnQgVW5pdCBmcm9tIFwiLi4vdW5pdFwiO1xuXG5jbGFzcyBJbmZhbnRyeSBleHRlbmRzIFVuaXQge1xuICAgIGNvbnN0cnVjdG9yKHRlYW0sIHBvcykge1xuICAgICAgICBzdXBlcih0ZWFtLCBwb3MpO1xuICAgICAgICB0aGlzLmF0dGFjayA9IDI7XG4gICAgICAgIHRoaXMuZGVmZW5zZSA9IDI7XG4gICAgICAgIHRoaXMudXBncmFkZSA9IHthdHRhY2s6IDQsIGRlZmVuc2U6IDN9XG4gICAgICAgIHRoaXMucG9pbnRTdGFuZGFyZCA9IHthdHRhY2s6IDIsIGRlZmVuc2U6IDJ9XG4gICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCIuL3Jlc291cmNlcy9pbmZhbnRyeS5wbmdcIjtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEluZmFudHJ5OyIsImltcG9ydCBCb2FyZCBmcm9tIFwiLi9ib2FyZFwiO1xuaW1wb3J0IEJhcnJhY2sgZnJvbSBcIi4vcGllY2VzL2JhcnJhY2tcIjtcbmltcG9ydCBCYXNlIGZyb20gXCIuL3BpZWNlcy9iYXNlXCI7XG5pbXBvcnQgVHJlYXN1cmUgZnJvbSBcIi4vcGllY2VzL3RyZWFzdXJlXCI7XG5pbXBvcnQgVW5pdCBmcm9tIFwiLi9waWVjZXMvdW5pdFwiO1xuaW1wb3J0IEFyY2hlciBmcm9tIFwiLi9waWVjZXMvdW5pdHMvYXJjaGVyXCI7XG5pbXBvcnQgRGVmZW5kZXIgZnJvbSBcIi4vcGllY2VzL3VuaXRzL2RlZmVuZGVyXCI7XG5pbXBvcnQgSW5mYW50cnkgZnJvbSBcIi4vcGllY2VzL3VuaXRzL2luZmFudHJ5XCI7XG5pbXBvcnQgeyBpc09uQm9hcmQsIGlzQnV0dG9uLCB3aWxsUGxheUFnYWluIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuY2xhc3MgVmlldyB7XG4gICAgc3RhdGljIFNRVUFSRV9ESU0gPSAxMDA7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBjdHgsIGVsKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMuZWwgPSBlbDtcbiAgICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgICAgIHRoaXMucmF0aW8gPSBudWxsO1xuICAgICAgICB0aGlzLmltYWdlcyA9IHRoaXMucmVuZGVySW1nKCk7XG4gICAgICAgIHRoaXMuZHJhd0JvYXJkKCk7XG4gICAgICAgIHRoaXMuZHJhd01lbnUoe3k6IEJvYXJkLkdSSURfSEVJR0hULCB4OiBCb2FyZC5HUklEX1dJRFRIfSk7XG4gICAgICAgIHRoaXMubm9Nb3JlTW92ZXMgPSB0aGlzLmRyYXdOb01vcmVNb3Zlc01vZHVsZSgpO1xuICAgIH1cblxuICAgIHJlc2V0VmlldyhnYW1lKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICAgIHRoaXMucmF0aW8gPSBudWxsO1xuICAgICAgICB0aGlzLmRyYXdCb2FyZCgpO1xuICAgIH1cblxuICAgIGNsZWFyQm9hcmQoKSB7XG4gICAgICAgIHRoaXMuY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmN0eC5jYW52YXMud2lkdGgsIHRoaXMuY3R4LmNhbnZhcy5oZWlnaHQpO1xuICAgIH1cblxuICAgIGRyYXdCb2FyZCh1bml0UG9zLCBjbGlja2VkUG9zKSB7XG4gICAgICAgIHRoaXMuY2xlYXJCb2FyZCgpO1xuICAgICAgICB0aGlzLmludmlzaWZ5QnV0dG9ucygpO1xuXG4gICAgICAgIHRoaXMuaW1hZ2VzLmJhY2tncm91bmQub25sb2FkKHVuaXRQb3MsIGNsaWNrZWRQb3MpO1xuICAgIH1cblxuICAgIGludmlzaWZ5QnV0dG9ucygpIHtcbiAgICAgICAgY29uc3QgZSA9IFtdO1xuICAgICAgICBlLnB1c2goZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hYm91dFwiKSk7XG4gICAgICAgIGUucHVzaChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJ1bGVzXCIpKTtcbiAgICAgICAgZS5wdXNoKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWJvdXR0aXRsZVwiKSk7XG4gICAgICAgIGUucHVzaChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJ1bGVzdGl0bGVcIikpO1xuXG4gICAgICAgIGUuZm9yRWFjaChlID0+IHtpZiAoZSkge2Uuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nfX0pO1xuICAgIH1cblxuICAgIGRyYXdCb2FyZFdpdGhvdXRPbmxvYWQodW5pdFBvcywgY2xpY2tlZFBvcykge1xuICAgICAgICBmb3IgKGxldCB5PTA7IHkgPCBCb2FyZC5HUklEX0hFSUdIVDsgeSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB4PTA7IHggPCBCb2FyZC5HUklEX1dJRFRIOyB4KyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdHcmlkU3F1YXJlKHgsIHksIFwiZGFya2dyZWVuXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhd0dyaWRFbGVtcyh7eTogeSwgeDogeH0sIHVuaXRQb3MsIGNsaWNrZWRQb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZHJhd01pZGxpbmUoKTtcblxuICAgICAgICB0aGlzLmRyYXdFbmRUdXJuQnV0dG9uKCk7XG5cbiAgICAgICAgdGhpcy5jdHguZm9udCA9IFwiNDBweCBDb3BwZXJwbGF0ZVwiO1xuICAgICAgICB0aGlzLmdhbWUuY3VycmVudFBsYXllci50ZWFtID09PSBCb2FyZC5FTkVNWV9URUFNID8gdGhpcy5jdHguZmlsbFN0eWxlID0gXCJyZWRcIiA6IHRoaXMuY3R4LmZpbGxTdHlsZSA9IFwiYmx1ZVwiO1xuICAgICAgICBsZXQgc3RyID0gXCJBY3Rpb24gUG9pbnRzOiBcIiArIHRoaXMuZ2FtZS5hY3Rpb25Qb2ludHMudG9TdHJpbmcoKTtcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSAnZGltZ3JleSc7XG4gICAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IDM7XG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVRleHQoc3RyLCAxMCwgKEJvYXJkLkdSSURfSEVJR0hUKzAuNSkgKiBWaWV3LlNRVUFSRV9ESU0pO1xuICAgICAgICB0aGlzLmN0eC5maWxsVGV4dChzdHIsIDEwLCAoQm9hcmQuR1JJRF9IRUlHSFQrMC41KSAqIFZpZXcuU1FVQVJFX0RJTSk7XG5cbiAgICAgICAgdGhpcy5jdHguZm9udCA9IFwiMzBweCBDb3BwZXJwbGF0ZVwiO1xuICAgICAgICBzdHIgPSBcIlRyb29wczogXCIgKyB0aGlzLmdhbWUuY3VycmVudFBsYXllci51bml0cy5sZW5ndGgudG9TdHJpbmcoKSArIFwiLzhcIjtcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlVGV4dChzdHIsIDEwLCAoQm9hcmQuR1JJRF9IRUlHSFQrMC43NSkgKiBWaWV3LlNRVUFSRV9ESU0pO1xuICAgICAgICB0aGlzLmN0eC5maWxsVGV4dChzdHIsIDEwLCAoQm9hcmQuR1JJRF9IRUlHSFQrMC43NSkgKiBWaWV3LlNRVUFSRV9ESU0pO1xuICAgIH1cblxuICAgIGRyYXdNaWRsaW5lKCkge1xuICAgICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9ICdsaWdodHNreWJsdWUnOyAgICBcbiAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIHRoaXMuY3R4Lm1vdmVUbygwLCBCb2FyZC5HUklEX0hFSUdIVCAvIDIgKiBWaWV3LlNRVUFSRV9ESU0pO1xuICAgICAgICB0aGlzLmN0eC5saW5lVG8oKEJvYXJkLkdSSURfSEVJR0hULTEpICogVmlldy5TUVVBUkVfRElNLCBCb2FyZC5HUklEX0hFSUdIVCAvIDIgKiBWaWV3LlNRVUFSRV9ESU0pO1xuICAgICAgICB0aGlzLmN0eC5zdHJva2UoKTtcbiAgICB9XG5cbiAgICBkcmF3RW5kVHVybkJ1dHRvbigpIHtcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gJ2xpZ2h0c2t5Ymx1ZSc7ICAgICAgICBcbiAgICAgICAgdGhpcy5jdHguZmlsbFJlY3QoXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiA0LFxuICAgICAgICAgICAgKEJvYXJkLkdSSURfSEVJR0hUKzAuMjUpICogVmlldy5TUVVBUkVfRElNLFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogMSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIDAuNSk7XG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gJ2Nvcm5mbG93ZXJibHVlJztcbiAgICAgICAgdGhpcy5jdHgubGluZVdpZHRoID0gMTtcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlUmVjdChcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIDQsXG4gICAgICAgICAgICAoQm9hcmQuR1JJRF9IRUlHSFQrMC4yNSkgKiBWaWV3LlNRVUFSRV9ESU0sXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAxLFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogMC41KTtcbiAgICAgICAgdGhpcy5jdHguZm9udCA9IFwiMjVweCBDb3BwZXJwbGF0ZVwiO1xuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBcImRpbWdyZXlcIjtcbiAgICAgICAgdGhpcy5jdHgubGluZVdpZHRoID0gMjtcbiAgICAgICAgdGhpcy5jdHguZmlsbFRleHQoXCJFbmRcIiwgNC4yNSAqIFZpZXcuU1FVQVJFX0RJTSwgKEJvYXJkLkdSSURfSEVJR0hUKzAuNDUpICogVmlldy5TUVVBUkVfRElNKTtcbiAgICAgICAgdGhpcy5jdHguZmlsbFRleHQoXCJUdXJuXCIsIDQuMTUgKiBWaWV3LlNRVUFSRV9ESU0sIChCb2FyZC5HUklEX0hFSUdIVCswLjY1KSAqIFZpZXcuU1FVQVJFX0RJTSk7XG4gICAgfVxuXG4gICAgZHJhd01lbnUocG9zKSB7XG4gICAgICAgIGNvbnN0IGdyaWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XG4gICAgICAgIGdyaWQuY2xhc3NMaXN0LmFkZChcImdyaWRcIik7XG5cbiAgICAgICAgZ3JpZC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgZ3JpZC5zdHlsZS5yaWdodCA9IFwiNy41JVwiO1xuICAgICAgICBncmlkLnN0eWxlLmJvdHRvbSA9IFwiY2FsYygwLjIlIC0gMzJweClcIjtcbiAgICAgICAgZ3JpZC5zdHlsZS53aWR0aCA9IFwiY2FsYygxNC4yOSUgLSA0MHB4KVwiO1xuICAgICAgICBncmlkLnN0eWxlLmhlaWdodCA9IFwiNS44NSVcIjtcblxuICAgICAgICBjb25zdCBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoXCJtZW51XCIpXG4gICAgICAgIGNlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJsaWdodHNreWJsdWVcIjtcbiAgICAgICAgY2VsbC5zdHlsZS5ib3JkZXIgPSBcIjFweCBzb2xpZCBjb3JuZmxvd2VyYmx1ZVwiO1xuICAgICAgICBjZWxsLnN0eWxlLmhlaWdodCA9IFwiY2FsYygxMDAlIC0gMnB4KVwiO1xuICAgICAgICBjZWxsLnN0eWxlLndpZHRoID0gXCJjYWxjKDEwMCUgLSAycHgpXCI7XG4gICAgICAgIGNlbGwuc3R5bGUubGVmdCA9IFwiMHB4XCI7XG5cbiAgICAgICAgY2VsbC5zdHlsZS5saXN0U3R5bGUgPSBcIm5vbmVcIjtcbiAgICAgICAgY2VsbC5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgY2VsbC5pbm5lckhUTUwgPSBcIk1lbnVcIlxuICAgICAgICBjZWxsLnN0eWxlLmZvbnQgPSAoMjUqdGhpcy5yYXRpbykgKyBcInB4IENvcHBlcnBsYXRlXCJcblxuICAgICAgICBjZWxsLnN0eWxlLmNvbG9yID0gXCJkaW1ncmV5XCJcbiAgICAgICAgY2VsbC5zdHlsZS50ZXh0QWxpZ24gPSBcImNlbnRlclwiXG4gICAgICAgIGNlbGwuc3R5bGUubGluZUhlaWdodCA9IFwiMjAwJVwiXG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcImJ1dHRvblwiKTtcblxuICAgICAgICBncmlkLmFwcGVuZENoaWxkKGNlbGwpO1xuICAgICAgICAvLyB0aGlzLmVsLmFwcGVuZENoaWxkKGdyaWQpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiYmFja2dyb3VuZFwiKVswXS5hcHBlbmRDaGlsZChncmlkKVxuXG4gICAgICAgIHRoaXMuZHJhd01lbnVPcHRpb25zKHBvcywgY2VsbCk7XG4gICAgICAgIGNvbnN0IHJ1bGVCb3ggPSB0aGlzLmRyYXdSdWxlcyhwb3MpO1xuICAgICAgICBjb25zdCBhYm91dEJveCA9IHRoaXMuZHJhd0Fib3V0KHBvcyk7XG5cbiAgICAgICAgY29uc3Qgd2luZG93UmVzaXplID0gd2luZG93Lm9ucmVzaXplO1xuICAgICAgICB3aW5kb3cub25yZXNpemUgPSAoKSA9PiB7XG4gICAgICAgICAgICB3aW5kb3dSZXNpemUoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMucmF0aW8gPCAwLjY3KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yYXRpbyA9IDAuNjc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBydWxlQm94LnN0eWxlLmZvbnQgPSAoMTkqdGhpcy5yYXRpbyAtIDIpICsgXCJweCBDb3BwZXJwbGF0ZVwiXG4gICAgICAgICAgICBydWxlQm94LnN0eWxlLmxpbmVIZWlnaHQgPSBcIjEwMCVcIlxuICAgICAgICAgICAgYWJvdXRCb3guc3R5bGUuZm9udCA9ICgyMCp0aGlzLnJhdGlvIC0gMikgKyBcInB4IENvcHBlcnBsYXRlXCJcbiAgICAgICAgICAgIGFib3V0Qm94LnN0eWxlLmxpbmVIZWlnaHQgPSBcIjM1MCVcIlxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZHJhd01lbnVPcHRpb25zKHBvcywgY2VsbCkge1xuICAgICAgICBjb25zdCBtZW51ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xuICAgICAgICBtZW51LmNsYXNzTGlzdC5hZGQoXCJtZW51XCIpO1xuXG4gICAgICAgIG1lbnUuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgIG1lbnUuc3R5bGUucmlnaHQgPSBcIjcuNSVcIjtcbiAgICAgICAgbWVudS5zdHlsZS5ib3R0b20gPSBcImNhbGMoNS44NSUgLSAxNnB4KVwiO1xuICAgICAgICBtZW51LnN0eWxlLndpZHRoID0gXCJjYWxjKDE0LjI5JSAtIDQycHgpXCI7XG4gICAgICAgIG1lbnUuc3R5bGUuaGVpZ2h0ID0gXCJjYWxjKDUuODUlIC0gMnB4KVwiO1xuICAgIFxuICAgICAgICBjb25zdCBydWxlcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICAgICAgdGhpcy5kcmF3QnV0dG9uKFwiUnVsZXNcIiwgcnVsZXMsIHt4OiBcIjAlXCIsIHk6IFwiMTAwJVwifSk7XG4gICAgICAgIHJ1bGVzLmNsYXNzTGlzdC5hZGQoXCJydWxlc1wiKTtcbiAgICAgICAgY29uc3QgYWJvdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgICAgIHRoaXMuZHJhd0J1dHRvbihcIkFib3V0XCIsIGFib3V0LCB7eDogXCIwJVwiLCB5OiBcIjAlXCJ9KTtcbiAgICAgICAgYWJvdXQuY2xhc3NMaXN0LmFkZChcImFib3V0XCIpO1xuXG4gICAgICAgIHJ1bGVzLnN0eWxlLmZvbnQgPSAyMCp0aGlzLnJhdGlvICsgXCJweCBDb3BwZXJwbGF0ZVwiO1xuICAgICAgICBydWxlcy5zdHlsZS5saW5lSGVpZ2h0ID0gXCIyNTAlXCJcbiAgICAgICAgYWJvdXQuc3R5bGUuZm9udCA9IDIwKnRoaXMucmF0aW8gKyBcInB4IENvcHBlcnBsYXRlXCI7XG4gICAgICAgIGFib3V0LnN0eWxlLmxpbmVIZWlnaHQgPSBcIjI1MCVcIlxuXG4gICAgICAgIG1lbnUuYXBwZW5kQ2hpbGQocnVsZXMpO1xuICAgICAgICBtZW51LmFwcGVuZENoaWxkKGFib3V0KTtcbiAgICAgICAgbWVudS5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbidcblxuICAgICAgICB3aW5kb3cub25yZXNpemUgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJhdGlvID0gTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgd2luZG93LmlubmVySGVpZ2h0IC8gdGhpcy5jdHguY2FudmFzLmhlaWdodCxcbiAgICAgICAgICAgICAgICB3aW5kb3cuaW5uZXJXaWR0aCAvIHRoaXMuY3R4LmNhbnZhcy53aWR0aFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgaWYgKHRoaXMucmF0aW8gPCAwLjY3KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yYXRpbyA9IDAuNjc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjZWxsLnN0eWxlLmZvbnQgPSAoMjUqdGhpcy5yYXRpbykgKyBcInB4IENvcHBlcnBsYXRlXCJcbiAgICAgICAgICAgIGNlbGwuc3R5bGUubGluZUhlaWdodCA9IFwiMjAwJVwiXG5cbiAgICAgICAgICAgIHJ1bGVzLnN0eWxlLmZvbnQgPSAoMjAqdGhpcy5yYXRpbykgKyBcInB4IENvcHBlcnBsYXRlXCJcbiAgICAgICAgICAgIHJ1bGVzLnN0eWxlLmxpbmVIZWlnaHQgPSBcIjI1MCVcIlxuICAgICAgICAgICAgYWJvdXQuc3R5bGUuZm9udCA9ICgyMCp0aGlzLnJhdGlvKSArIFwicHggQ29wcGVycGxhdGVcIlxuICAgICAgICAgICAgYWJvdXQuc3R5bGUubGluZUhlaWdodCA9IFwiMjUwJVwiXG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGlzLmVsLmFwcGVuZENoaWxkKG1lbnUpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiYmFja2dyb3VuZFwiKVswXS5hcHBlbmRDaGlsZChtZW51KVxuICAgIH1cblxuICAgIGRyYXdSdWxlcyhwb3MpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XG4gICAgICAgIHRpdGxlLmNsYXNzTGlzdC5hZGQoXCJydWxlc3RpdGxlXCIpO1xuICAgICAgICB0aGlzLmRyYXdNZW51RGlzcGxheUJveChcIkhvdyBUbyBQbGF5Jm5ic3A7Jm5ic3A7Jm5ic3A7XCIsIHRpdGxlLCB0aXRsZSk7XG4gICAgXG4gICAgICAgIGNvbnN0IHJ1bGVzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgICAgICB0aGlzLmRyYXdNZW51SW5uZXJEaXNwbGF5Qm94KFwiU3RlYWwgdGhlIGVuZW15J3MgdHJlYXN1cmUgJiBicmluZyBpdCBiYWNrIHRvIHlvdXIgYmFzZSE8cD5CVVlJTkcgfCBTZWxlY3QgdGhlIGJhcnJhY2tzIHRvIGJ1eSB0cm9vcHMuIEFsbCB1bml0cyBjYW4gbW92ZSB1cCB0byAyIHNwYWNlcyBpbiBhbnkgZGlyZWN0aW9uLiBUaGVyZSBhcmUgMyB0eXBlcyBvZiB0cm9vcHM6PC9wPi1JbmZhbnRyeTogRGVmZW5zZSAyLCBBdHRhY2sgMSwgUmFuZ2UgMTxicj4tQXJjaGVyOiBEZWZlbnNlIDEsIEF0dGFjayAxLCBSYW5nZSAyPGJyPi1EZWZlbmRlcjogRGVmZW5zZSAzLCBBdHRhY2sgMSwgUmFuZ2UgMTxicj48cD5VUEdSQURJTkcgfCBXaGVuIGluIGVuZW15IHRlcnJpdG9yeSwgdW5pdHMgY2FuIGJlIHVncmFkZWQgYXMgZm9sbG93czo8L3A+LUluZmFudHJ5OiBEZWZlbnNlICsxLCBBdHRhY2sgKzI8YnI+LUFyY2hlcjogRGVmZW5zZSArMSwgQXR0YWNrICsxPGJyPi1EZWZlbmRlcjogRGVmZW5zZSArMiwgQXR0YWNrICsxPGJyPjxwPlVuaXRzIGNhbm5vdCBhdHRhY2sgYWZ0ZXIgdXBncmFkaW5nIHVudGlsIHRoZSBuZXh0IHJvdW5kLiBTdGF0cyByZXR1cm4gdG8gbm9ybWFsIG9uY2UgcmV0dXJuaW5nIHRvIGZyaWVuZGx5IHRlcnJpdG9yeS48L3A+PHA+VFJFQVNVUkUgfCBQaWNrIHVwIHRoZSB0cmVhc3VyZSBieSBtb3ZpbmcgYSB1bml0IG9udG8gdGhlIHNxdWFyZSBjb250YWluaW5nIGl0LiAoWW91IGNhbiBvbmx5IHBpY2sgdXAgZW5lbXkgdHJlYXN1cmUuKTwvcD48cD5QUklDRSBDSEFSVDxicj5Nb3Zpbmcgb3IgQXR0YWNraW5nOiAxIEFjdGlvbiBQb2ludDxicj5CdXlpbmcgb3IgVXBncmFkaW5nOiAyIEFjdGlvbiBQb2ludHM8L3A+XCIsXG4gICAgICAgIHJ1bGVzLCB0aXRsZSk7XG4gICAgICAgIHJ1bGVzLnN0eWxlLmZvbnQgPSBcIjEycHggQ29wcGVycGxhdGVcIjtcbiAgICAgICAgaWYgKHRoaXMucmF0aW8gPCAwLjY3KSB7XG4gICAgICAgICAgICB0aGlzLnJhdGlvID0gMC42NztcbiAgICAgICAgfVxuICAgICAgICBydWxlcy5zdHlsZS5mb250ID0gKDE5KnRoaXMucmF0aW8gLSAyKSArIFwicHggQ29wcGVycGxhdGVcIlxuICAgICAgICBydWxlcy5zdHlsZS5saW5lSGVpZ2h0ID0gXCIxMDAlXCI7XG4gICAgICAgIHJ1bGVzLmNsYXNzTGlzdC5hZGQoXCJydWxlc2JveFwiKTtcblxuICAgICAgICB0aXRsZS5hcHBlbmRDaGlsZChydWxlcyk7XG4gICAgICAgIC8vIHRpdGxlLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJ1xuICAgICAgICAvLyB0aGlzLmVsLmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImJhY2tncm91bmRcIilbMF0uYXBwZW5kQ2hpbGQodGl0bGUpXG4gICAgICAgIHJldHVybiBydWxlcztcbiAgICB9XG5cbiAgICBkcmF3QWJvdXQocG9zKSB7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xuICAgICAgICB0aXRsZS5jbGFzc0xpc3QuYWRkKFwiYWJvdXR0aXRsZVwiKTtcblxuICAgICAgICB0aGlzLmRyYXdNZW51RGlzcGxheUJveChcIkFib3V0Jm5ic3A7Jm5ic3A7Jm5ic3A7XCIsIHRpdGxlLCB0aXRsZSk7XG4gICAgXG4gICAgICAgIGNvbnN0IGFib3V0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgICAgICB0aGlzLmRyYXdNZW51SW5uZXJEaXNwbGF5Qm94KFwiPGJyPjxicj48cD5HYW1lIGRldmVsb3BlZCBieSA8YSBocmVmPSdodHRwczovL3d3dy5saW5rZWRpbi5jb20vaW4vamRpcmtzZW4vJz5KYXNtaW5lIEtvYmF0YTwvYT48L3A+PHA+PGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL0phc21pbmVLb2JhdGEvSmF2YXNjcmlwdC1Qcm9qZWN0Jz5UcmVhc3VyZSBXYXJzISBHaXRIdWIgUmVwbzwvcD48cD48YSBocmVmPSdodHRwczovL3d3dy5hcHBhY2FkZW15LmlvLyc+QXBwIEFjYWRlbXk8L2E+IEphdmFzY3JpcHQgUHJvamVjdDwvcD5cIiwgYWJvdXQsIHRpdGxlKTtcbiAgICAgICAgaWYgKHRoaXMucmF0aW8gPCAwLjY3KSB7XG4gICAgICAgICAgICB0aGlzLnJhdGlvID0gMC42NztcbiAgICAgICAgfVxuICAgICAgICBhYm91dC5zdHlsZS5mb250ID0gKDIwKnRoaXMucmF0aW8gLSAyKSArIFwicHggQ29wcGVycGxhdGVcIjtcbiAgICAgICAgYWJvdXQuc3R5bGUubGluZUhlaWdodCA9IFwiMzUwJVwiXG4gICAgICAgIGFib3V0LmNsYXNzTGlzdC5hZGQoXCJhYm91dGJveFwiKTtcblxuICAgICAgICB0aXRsZS5hcHBlbmRDaGlsZChhYm91dCk7XG4gICAgICAgIHRpdGxlLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJ1xuICAgICAgICAvLyB0aGlzLmVsLmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImJhY2tncm91bmRcIilbMF0uYXBwZW5kQ2hpbGQodGl0bGUpXG4gICAgICAgIHJldHVybiBhYm91dDtcbiAgICB9XG5cbiAgICBkcmF3TWVudURpc3BsYXlCb3goc3RyLCBib3gsIHRpdGxlKSB7XG4gICAgICAgIGJveC5zdHlsZS53aWR0aCA9IFwiY2FsYyg3NSUgLSA0MnB4KVwiXG4gICAgICAgIGJveC5zdHlsZS5oZWlnaHQgPSBcImNhbGMoNzUlIC0gMnB4KVwiXG4gICAgICAgIGJveC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImxpZ2h0c2t5Ymx1ZVwiO1xuICAgICAgICBib3guc3R5bGUuYm9yZGVyID0gXCIxcHggc29saWQgY29ybmZsb3dlcmJsdWVcIjtcbiAgICAgICAgYm94LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICBib3guc3R5bGUubGVmdCA9IFwiNTAlXCI7XG4gICAgICAgIGJveC5zdHlsZS50b3AgPSBcIjQ1JVwiO1xuICAgICAgICBib3guc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoLTUwJSwgLTUwJSlcIjtcbiAgICAgICAgYm94LnN0eWxlLm1hcmdpbiA9IFwiMHB4XCJcbiAgICAgICAgYm94LnN0eWxlLmxpc3RTdHlsZSA9IFwibm9uZVwiO1xuICAgICAgICBib3guc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XG4gICAgICAgIGJveC5pbm5lckhUTUwgPSBzdHI7XG4gICAgICAgIGlmICh0aGlzLnJhdGlvIDwgMC42Nykge1xuICAgICAgICAgICAgdGhpcy5yYXRpbyA9IDAuNjc7XG4gICAgICAgIH1cbiAgICAgICAgYm94LnN0eWxlLmZvbnQgPSAoMzAqdGhpcy5yYXRpbyAtIDIpICsgXCJweCBDb3BwZXJwbGF0ZVwiXG4gICAgICAgIGJveC5zdHlsZS5jb2xvciA9IFwiZGltZ3JleVwiXG4gICAgICAgIGJveC5zdHlsZS50ZXh0QWxpZ24gPSBcImNlbnRlclwiXG4gICAgICAgIGJveC5zdHlsZS5saW5lSGVpZ2h0ID0gXCIyNTAlXCI7XG5cbiAgICAgICAgY29uc3Qgd2luZG93UmVzaXplID0gd2luZG93Lm9ucmVzaXplO1xuICAgICAgICB3aW5kb3cub25yZXNpemUgPSAoKSA9PiB7XG4gICAgICAgICAgICB3aW5kb3dSZXNpemUoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMucmF0aW8gPCAwLjY3KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yYXRpbyA9IDAuNjc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBib3guc3R5bGUuZm9udCA9ICgzMCp0aGlzLnJhdGlvIC0gMikgKyBcInB4IENvcHBlcnBsYXRlXCJcbiAgICAgICAgICAgIGJveC5zdHlsZS5saW5lSGVpZ2h0ID0gXCIyNTAlXCI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkcmF3TWVudUlubmVyRGlzcGxheUJveChzdHIsIGJveCwgdGl0bGUpIHtcbiAgICAgICAgYm94LnN0eWxlLndpZHRoID0gXCJjYWxjKDgwJSAtIDQycHgpXCJcbiAgICAgICAgYm94LnN0eWxlLmhlaWdodCA9IFwiY2FsYyg4MCUgLSAycHgpXCJcbiAgICAgICAgYm94LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiY29ybmZsb3dlcmJsdWVcIjtcbiAgICAgICAgYm94LnN0eWxlLmJvcmRlciA9IFwiMXB4IHNvbGlkIGNvcm5mbG93ZXJibHVlXCI7XG4gICAgICAgIGJveC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgYm94LnN0eWxlLmxlZnQgPSBcIjUwJVwiO1xuICAgICAgICBib3guc3R5bGUudG9wID0gXCI1MCVcIjtcbiAgICAgICAgYm94LnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKC01MCUsIC01MCUpXCI7XG4gICAgICAgIC8vIGJveC5zdHlsZS5tYXJnaW4gPSBcIjBweFwiO1xuICAgICAgICBib3guc3R5bGUubGlzdFN0eWxlID0gXCJub25lXCI7XG4gICAgICAgIGJveC5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgYm94LmlubmVySFRNTCA9IHN0cjtcbiAgICAgICAgYm94LnN0eWxlLmZvbnQgPSBcIjI1cHggQ29wcGVycGxhdGVcIlxuICAgICAgICBib3guc3R5bGUuY29sb3IgPSBcIndoaXRlXCJcbiAgICB9XG5cbiAgICBkcmF3QnV0dG9uKHN0ciwgY2VsbCwgcG9zKSB7XG4gICAgICAgIGNlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJsaWdodHNreWJsdWVcIjtcbiAgICAgICAgY2VsbC5zdHlsZS5ib3JkZXIgPSBcIjFweCBzb2xpZCBjb3JuZmxvd2VyYmx1ZVwiO1xuICAgICAgICBjZWxsLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gICAgICAgIGNlbGwuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XG4gICAgICAgIGNlbGwuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgIGNlbGwuc3R5bGUucmlnaHQgPSBwb3MueDtcbiAgICAgICAgY2VsbC5zdHlsZS5ib3R0b20gPSBwb3MueTtcbiAgICAgICAgY2VsbC5zdHlsZS5tYXJnaW4gPSBcIjBweFwiXG4gICAgICAgIGNlbGwuc3R5bGUubGlzdFN0eWxlID0gXCJub25lXCI7XG4gICAgICAgIGNlbGwuc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XG4gICAgICAgIGNlbGwuaW5uZXJIVE1MID0gc3RyXG4gICAgICAgIGNlbGwuc3R5bGUuY29sb3IgPSBcImRpbWdyZXlcIlxuICAgICAgICBjZWxsLnN0eWxlLnRleHRBbGlnbiA9IFwiY2VudGVyXCJcbiAgICB9XG5cbiAgICB1cGRhdGVOb01vcmVNb3Zlc1N0cigpIHtcbiAgICAgICAgbGV0IHN0ciA9IFwiPGJyPk5vIE1vdmVzIExlZnQhPC9icj5cIjtcbiAgICAgICAgc3RyICs9IHRoaXMuZ2FtZS5jdXJyZW50UGxheWVyLnRlYW0gPT09IEJvYXJkLlBMQVlFUl9URUFNID8gXCJSZWRcIiA6IFwiQmx1ZVwiO1xuICAgICAgICBzdHIgKz0gXCIncyBUdXJuP1wiXG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgZHJhd05vTW9yZU1vdmVzTW9kdWxlKCkge1xuICAgICAgICBjb25zdCBiYWNrZ3JvdW5kID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgYmFja2dyb3VuZC5jbGFzc0xpc3QuYWRkKFwibW92ZXNCYWNrZ3JvdW5kXCIpXG4gICAgICAgIGJhY2tncm91bmQuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgICAgICAgYmFja2dyb3VuZC5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcbiAgICAgICAgYmFja2dyb3VuZC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgYmFja2dyb3VuZC5zdHlsZS50b3AgPSBcIjBweFwiO1xuICAgICAgICBiYWNrZ3JvdW5kLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuXG4gICAgICAgIGNvbnN0IG1vZHVsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiKTtcbiAgICAgICAgbW9kdWxlLmNsYXNzTGlzdC5hZGQoXCJub01vcmVNb3Zlc1wiKTtcblxuICAgICAgICBtb2R1bGUuc3R5bGUud2lkdGggPSBcImNhbGMoNDAlIC0gNDJweClcIlxuICAgICAgICBtb2R1bGUuc3R5bGUuaGVpZ2h0ID0gXCJjYWxjKDE4JSAtIDJweClcIlxuICAgICAgICBtb2R1bGUuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJsaWdodHNreWJsdWVcIjtcbiAgICAgICAgbW9kdWxlLnN0eWxlLmJvcmRlciA9IFwiMXB4IHNvbGlkIGNvcm5mbG93ZXJibHVlXCI7XG4gICAgICAgIG1vZHVsZS5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgbW9kdWxlLnN0eWxlLmxlZnQgPSBcIjUwJVwiO1xuICAgICAgICBtb2R1bGUuc3R5bGUudG9wID0gXCI0NSVcIjtcbiAgICAgICAgbW9kdWxlLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKC01MCUsIC01MCUpXCI7XG4gICAgICAgIG1vZHVsZS5zdHlsZS5tYXJnaW4gPSBcIjBweFwiXG4gICAgICAgIG1vZHVsZS5zdHlsZS5wYWRkaW5nTGVmdCA9IFwiMTBweFwiO1xuICAgICAgICBtb2R1bGUuc3R5bGUucGFkZGluZ1JpZ2h0ID0gbW9kdWxlLnN0eWxlLnBhZGRpbmdMZWZ0O1xuICAgICAgICBtb2R1bGUuc3R5bGUubGlzdFN0eWxlID0gXCJub25lXCI7XG4gICAgICAgIG1vZHVsZS5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgbW9kdWxlLnN0eWxlLmZvbnQgPSAoMjcqdGhpcy5yYXRpbyAtIDIpICsgXCJweCBDb3BwZXJwbGF0ZVwiXG4gICAgICAgIG1vZHVsZS5zdHlsZS5jb2xvciA9IFwiZGltZ3JleVwiXG4gICAgICAgIG1vZHVsZS5zdHlsZS50ZXh0QWxpZ24gPSBcImNlbnRlclwiXG4gICAgICAgIFxuICAgICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwibW92ZXNCdXR0b25cIik7XG4gICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBcIk9LXCJcbiAgICAgICAgYnV0dG9uLnN0eWxlLndpZHRoID0gXCI1MCVcIlxuICAgICAgICBidXR0b24uc3R5bGUuaGVpZ2h0ID0gXCJjYWxjKDE4JSAtIDJweClcIlxuICAgICAgICBidXR0b24uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJjb3JuZmxvd2VyYmx1ZVwiO1xuICAgICAgICBidXR0b24uc3R5bGUuYm9yZGVyID0gXCIxcHggc29saWQgY29ybmZsb3dlcmJsdWVcIjtcbiAgICAgICAgYnV0dG9uLnN0eWxlLm1hcmdpbkxlZnQgPSBcImF1dG9cIjtcbiAgICAgICAgYnV0dG9uLnN0eWxlLm1hcmdpblJpZ2h0ID0gXCJhdXRvXCI7XG4gICAgICAgIGJ1dHRvbi5zdHlsZS5tYXJnaW5Ub3AgPSBcIjExJVwiXG4gICAgICAgIGJ1dHRvbi5zdHlsZS5jb2xvciA9IFwid2hpdGVcIlxuXG4gICAgICAgIGNvbnN0IHdpbmRvd1Jlc2l6ZSA9IHdpbmRvdy5vbnJlc2l6ZTtcbiAgICAgICAgd2luZG93Lm9ucmVzaXplID0gKCkgPT4ge1xuICAgICAgICAgICAgd2luZG93UmVzaXplKCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnJhdGlvIDwgMC42Nykge1xuICAgICAgICAgICAgICAgIHRoaXMucmF0aW8gPSAwLjY3O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbW9kdWxlLnN0eWxlLmZvbnQgPSAoMjcqdGhpcy5yYXRpbyAtIDIpICsgXCJweCBDb3BwZXJwbGF0ZVwiXG4gICAgICAgICAgICAvLyBydWxlQm94LnN0eWxlLmxpbmVIZWlnaHQgPSBcIjEwMCVcIlxuICAgICAgICB9XG5cbiAgICAgICAgbW9kdWxlLmFwcGVuZENoaWxkKGJ1dHRvbik7XG4gICAgICAgIGJhY2tncm91bmQuYXBwZW5kQ2hpbGQobW9kdWxlKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImJhY2tncm91bmRcIilbMF0uYXBwZW5kQ2hpbGQoYmFja2dyb3VuZClcblxuICAgICAgICAvLyB0aGlzLmJpbmRNb3Zlc0J1dHRvbigpO1xuICAgICAgICByZXR1cm4gYmFja2dyb3VuZDtcbiAgICB9XG5cbiAgICBkcmF3V2lubmluZ1NjcmVlbigpIHtcbiAgICAgICAgbGV0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBpbWcuc3JjID0gJy4vcmVzb3VyY2VzL3dvb2QucG5nJztcbiAgICAgICAgaW1nLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY3R4LmRyYXdJbWFnZShcbiAgICAgICAgICAgICAgICBpbWcsXG4gICAgICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogTWF0aC5mbG9vcigoQm9hcmQuR1JJRF9XSURUSC0yKSAvIDIpLFxuICAgICAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIChNYXRoLmZsb29yKChCb2FyZC5HUklEX0hFSUdIVC0yKSAvIDIpKzAuMjUpLFxuICAgICAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIDMsIFZpZXcuU1FVQVJFX0RJTSAqIDEuNSk7XG4gICAgICAgICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpO1xuXG4gICAgICAgICAgICB0aGlzLmN0eC5mb250ID0gXCIzMHB4IENvcHBlcnBsYXRlXCI7XG4gICAgICAgICAgICB0aGlzLmN0eC5saW5lV2lkdGggPSAzO1xuICAgICAgICAgICAgbGV0IHN0ciA9IFwiXCI7XG4gICAgICAgICAgICBpZiAodGhpcy5nYW1lLmN1cnJlbnRQbGF5ZXIudGVhbSA9PT0gQm9hcmQuUExBWUVSX1RFQU0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBcImJsdWVcIjtcbiAgICAgICAgICAgICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9IFwiZGFya2JsdWVcIjtcbiAgICAgICAgICAgICAgICBzdHIgKz0gXCJCbHVlXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IFwicmVkXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSBcIm1hcm9vblwiO1xuICAgICAgICAgICAgICAgIHN0ciArPSBcIlJlZFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RyICs9IFwiIFZpY3RvcnkhXCJcbiAgICAgICAgICAgIHRoaXMuY3R4LnN0cm9rZVRleHQoc3RyLFxuICAgICAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIChCb2FyZC5HUklEX1dJRFRIIC8gMiAtIDEpLFxuICAgICAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIChCb2FyZC5HUklEX0hFSUdIVCAvIDIgLSAwLjI1KSk7XG4gICAgICAgICAgICB0aGlzLmN0eC5maWxsVGV4dChzdHIsXG4gICAgICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogKEJvYXJkLkdSSURfV0lEVEggLyAyIC0gMSksXG4gICAgICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogKEJvYXJkLkdSSURfSEVJR0hUIC8gMiAtIDAuMjUpKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5kcmF3UGxheUFnYWluQnV0dG9uKCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZHJhd1BsYXlBZ2FpbkJ1dHRvbigpIHtcbiAgICAgICAgdGhpcy5jdHgubGluZVdpZHRoID0gMjtcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gJ2Nvcm5mbG93ZXJibHVlJzsgIFxuICAgICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9ICcjNTQzMDAwJzsgICAgICBcbiAgICAgICAgdGhpcy5jdHguZmlsbFJlY3QoXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAoQm9hcmQuR1JJRF9XSURUSCAvIDIgLSAwLjc1KSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIChNYXRoLmZsb29yKChCb2FyZC5HUklEX0hFSUdIVCkgLyAyKSksXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAxLjUsXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAwLjUpO1xuICAgICAgICB0aGlzLmN0eC5zdHJva2VSZWN0KFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogKEJvYXJkLkdSSURfV0lEVEggLyAyIC0gMC43NSksXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAoTWF0aC5mbG9vcigoQm9hcmQuR1JJRF9IRUlHSFQpIC8gMikpLFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogMS41LFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogMC41KTtcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSAnYmx1ZSc7XG4gICAgICAgIHRoaXMuY3R4LmZvbnQgPSBcIjI0cHggQ29wcGVycGxhdGVcIjtcbiAgICAgICAgdGhpcy5jdHgubGluZVdpZHRoID0gMTtcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xuICAgICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9IFwiZ3JleVwiXG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVRleHQoXCJQbGF5IEFnYWluP1wiLFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogKEJvYXJkLkdSSURfV0lEVEggLyAyIC0gMC43MCksXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAoQm9hcmQuR1JJRF9IRUlHSFQgLyAyICsgMC4zKSk7XG4gICAgICAgIHRoaXMuY3R4LmZpbGxUZXh0KFwiUGxheSBBZ2Fpbj9cIixcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIChCb2FyZC5HUklEX1dJRFRIIC8gMiAtIDAuNzApLFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogKEJvYXJkLkdSSURfSEVJR0hUIC8gMiArIDAuMykpO1xuICAgIH1cblxuICAgIGRyYXdVcGdyYWRlQ29uZmlybWF0aW9uKHBvcykge1xuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSAnbGlnaHRza3libHVlJzsgICAgICAgIFxuICAgICAgICB0aGlzLmN0eC5maWxsUmVjdChcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHBvcy54LFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogcG9zLnksXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAxLFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogMC4zNSk7XG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gJ2Nvcm5mbG93ZXJibHVlJztcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlUmVjdChcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHBvcy54LFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogcG9zLnksXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAxLFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogMC4zNSk7XG4gICAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IDE7XG4gICAgICAgIHRoaXMuY3R4LmZvbnQgPSBcIjIwcHggQ29wcGVycGxhdGVcIjtcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gXCJkaW1ncmV5XCI7XG4gICAgICAgIHRoaXMuY3R4LmZpbGxUZXh0KFwiVXBncmFkZT9cIixcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHBvcy54LFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogKHBvcy55ICsgMC4yNSkpO1xuICAgIH1cblxuICAgIGRyYXdCYXJyYWNrU2VsZWN0aW9uKHBvcykge1xuICAgICAgICBsZXQgbmV3UG9zID0gdGhpcy5hZGp1c3RNZW51UG9zaXRpb24ocG9zKTtcbiAgICAgICAgdGhpcy50ZWFtID09PSBCb2FyZC5FTkVNWV9URUFNID8gdGhpcy5jdHguZmlsbFN0eWxlID0gXCJyZWRcIiA6IHRoaXMuY3R4LmZpbGxTdHlsZSA9IFwiYmx1ZVwiO1xuICAgICAgICBsZXQgdHJvb3BTZWxlY3Rpb24gPSBbXTtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzLmJhcnJhY2sub25sb2FkKG5ld1Bvcyk7XG5cbiAgICAgICAgdGhpcy5jdHguZm9udCA9IFwiMzBweCBDb3BwZXJwbGF0ZVwiO1xuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBcIndoaXRlXCI7XG4gICAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IDM7XG4gICAgICAgIHRoaXMuY3R4LmZpbGxUZXh0KFwiQnV5IE5ldyBUcm9vcD9cIixcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIChuZXdQb3MueCArIDAuMzUpLFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogKG5ld1Bvcy55ICsgMC4zNSkpO1xuICAgIFxuICAgICAgICBsZXQgaW5mID0gbmV3IEluZmFudHJ5KHRoaXMuZ2FtZS5jdXJyZW50UGxheWVyLnRlYW0sIHt5OiBuZXdQb3MueSswLjUsIHg6IG5ld1Bvcy54fSk7XG4gICAgICAgIGxldCBhcmNoID0gbmV3IEFyY2hlcih0aGlzLmdhbWUuY3VycmVudFBsYXllci50ZWFtLCB7eTogbmV3UG9zLnkrMC41LCB4OiBuZXdQb3MueCsxfSk7XG4gICAgICAgIGxldCBkZWYgPSBuZXcgRGVmZW5kZXIodGhpcy5nYW1lLmN1cnJlbnRQbGF5ZXIudGVhbSwge3k6IG5ld1Bvcy55KzAuNSwgeDogbmV3UG9zLngrMn0pO1xuICAgICAgICBpbmYuYm9hcmQgPSB0aGlzLmdhbWUuYm9hcmQ7XG4gICAgICAgIGFyY2guYm9hcmQgPSB0aGlzLmdhbWUuYm9hcmQ7XG4gICAgICAgIGRlZi5ib2FyZCA9IHRoaXMuZ2FtZS5ib2FyZDtcbiAgICAgICAgaW5mLnZpZXcgPSB0aGlzLmdhbWUudmlldztcbiAgICAgICAgYXJjaC52aWV3ID0gdGhpcy5nYW1lLnZpZXc7XG4gICAgICAgIGRlZi52aWV3ID0gdGhpcy5nYW1lLnZpZXc7XG4gICAgICAgIHRyb29wU2VsZWN0aW9uLnB1c2goaW5mKTtcbiAgICAgICAgdHJvb3BTZWxlY3Rpb24ucHVzaChhcmNoKTtcbiAgICAgICAgdHJvb3BTZWxlY3Rpb24ucHVzaChkZWYpO1xuICAgICAgICB0cm9vcFNlbGVjdGlvbi5mb3JFYWNoKCAodW5pdCkgPT4ge1xuICAgICAgICAgICAgdW5pdC5kcmF3KHRoaXMuY3R4LCB0aGlzLmdhbWUuY3VycmVudFBsYXllcik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJvb3BTZWxlY3Rpb247XG4gICAgfVxuXG4gICAgYWRqdXN0TWVudVBvc2l0aW9uKHBvcykge1xuICAgICAgICBsZXQgbmV3UG9zID0ge307XG4gICAgICAgIHBvcy54ID09PSAwID8gbmV3UG9zLnggPSBwb3MueCArIDAuMjUgOiBuZXdQb3MueCA9IHBvcy54IC0gMi4yNTtcbiAgICAgICAgcG9zLnkgPT09IDAgPyBuZXdQb3MueSA9IHBvcy55ICsgMC41IDogbmV3UG9zLnkgPSBwb3MueSAtIDE7XG4gICAgICAgIHJldHVybiBuZXdQb3M7XG4gICAgfVxuXG4gICAgZHJhd091dGxpbmUocG9zKSB7XG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gJ3llbGxvdyc7XG4gICAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IDEwO1xuICAgICAgICB0aGlzLmN0eC5zdHJva2VSZWN0KFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogcG9zLngsXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiBwb3MueSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTVxuICAgICAgICApXG4gICAgfVxuXG4gICAgZHJhd01vdmVIaWdobGlnaHRzKHBvcykge1xuICAgICAgICB0aGlzLmRyYXdHcmlkU3F1YXJlKHBvcy54LCBwb3MueSwgJ3NlYWdyZWVuJywgXCJtZWRpdW1zZWFncmVlblwiKTtcbiAgICB9XG5cbiAgICBkcmF3QXR0YWNrSGlnaGxpZ2h0cyhwb3MpIHtcbiAgICAgICAgdGhpcy5kcmF3R3JpZFNxdWFyZShwb3MueCwgcG9zLnksIFwiY29ybmZsb3dlcmJsdWVcIiwgXCJsaWdodHNreWJsdWVcIilcbiAgICB9XG5cbiAgICBkcmF3R3JpZEVsZW1zKHBvcywgdW5pdFBvcywgY2xpY2tlZFBvcykge1xuICAgICAgICBsZXQgZ3JpZFNxdWFyZSA9IHRoaXMuZ2FtZS5ib2FyZC5ncmlkLmdldChwb3MpO1xuICAgICAgICBmb3IgKGxldCBpPTA7IGkgPCBncmlkU3F1YXJlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBncmlkU3F1YXJlW2ldLmRyYXcodGhpcy5jdHgsIHRoaXMuZ2FtZS5jdXJyZW50UGxheWVyLCB1bml0UG9zLCBjbGlja2VkUG9zKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcbiAgICB9XG5cbiAgICBkcmF3R3JpZFNxdWFyZSh4LCB5LCBvdXRsaW5lQ29sb3IsIGZpbGxDb2xvcikge1xuICAgICAgICBpZiAoZmlsbENvbG9yKSB7XG4gICAgICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBmaWxsQ29sb3I7XG4gICAgICAgICAgICB0aGlzLmN0eC5nbG9iYWxBbHBoYSA9IDAuNjA7XG4gICAgICAgICAgICB0aGlzLmN0eC5maWxsUmVjdChcbiAgICAgICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB4LFxuICAgICAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHksXG4gICAgICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNLFxuICAgICAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTVxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gb3V0bGluZUNvbG9yO1xuICAgICAgICB0aGlzLmN0eC5saW5lV2lkdGggPSAyO1xuICAgICAgICB0aGlzLmN0eC5zdHJva2VSZWN0KFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogeCxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHksXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0sXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU1cbiAgICAgICAgKVxuICAgICAgICB0aGlzLmN0eC5nbG9iYWxBbHBoYSA9IDE7XG4gICAgfVxuXG4gICAgcmVuZGVySW1nKCkge1xuICAgICAgICBsZXQgcGl4ZWxXaWR0aCA9IEJvYXJkLkdSSURfV0lEVEggKiBWaWV3LlNRVUFSRV9ESU07XG4gICAgICAgIGxldCBwaXhlbEhlaWdodCA9IChCb2FyZC5HUklEX0hFSUdIVCsxKSAqIFZpZXcuU1FVQVJFX0RJTTtcbiAgICAgICAgdGhpcy5jdHguY2FudmFzLndpZHRoID0gcGl4ZWxXaWR0aDtcbiAgICAgICAgdGhpcy5jdHguY2FudmFzLmhlaWdodCA9IHBpeGVsSGVpZ2h0O1xuICAgICAgICB0aGlzLnJhdGlvID0gTWF0aC5taW4oXG4gICAgICAgICAgICB3aW5kb3cuaW5uZXJIZWlnaHQgLyB0aGlzLmN0eC5jYW52YXMuaGVpZ2h0LFxuICAgICAgICAgICAgd2luZG93LmlubmVyV2lkdGggLyB0aGlzLmN0eC5jYW52YXMud2lkdGhcbiAgICAgICAgKVxuICAgICAgICAvLyB0aGlzLmN0eC5zY2FsZSh0aGlzLnJhdGlvLCB0aGlzLnJhdGlvKTtcbiAgICAgICAgbGV0IGltYWdlcyA9IHt9O1xuICAgICAgICBpbWFnZXMuYmFja2dyb3VuZCA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBpbWFnZXMuYmFja2dyb3VuZC5zcmMgPSBcIi4vcmVzb3VyY2VzL2dyYXNzMi5wbmdcIjtcbiAgICAgICAgaW1hZ2VzLmJhY2tncm91bmQub25sb2FkID0gKHVuaXRQb3MsIGNsaWNrZWRQb3MpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY3R4LmRyYXdJbWFnZShcbiAgICAgICAgICAgICAgICBpbWFnZXMuYmFja2dyb3VuZCwgMCwgMCxcbiAgICAgICAgICAgICAgIHBpeGVsV2lkdGgsIHBpeGVsSGVpZ2h0LFxuICAgICAgICAgICAgICAgMCwgMCxcbiAgICAgICAgICAgICAgIHBpeGVsV2lkdGgsIHBpeGVsSGVpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgdGhpcy5jdHguc3Ryb2tlKCk7XG4gICAgICAgICAgICB0aGlzLmRyYXdCb2FyZFdpdGhvdXRPbmxvYWQodW5pdFBvcywgY2xpY2tlZFBvcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpbWFnZXMuYmFycmFjayA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBpbWFnZXMuYmFycmFjay5zcmMgPSBcIi4vcmVzb3VyY2VzL3dvb2QucG5nXCI7XG4gICAgICAgIGltYWdlcy5iYXJyYWNrLm9ubG9hZCA9IChwb3MpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY3R4LmRyYXdJbWFnZShcbiAgICAgICAgICAgICAgICBpbWFnZXMuYmFycmFjayxcbiAgICAgICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiBwb3MueCxcbiAgICAgICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiBwb3MueSxcbiAgICAgICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAzLCBWaWV3LlNRVUFSRV9ESU0gKiAxLjUpO1xuICAgICAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICB0aGlzLmN0eC5zdHJva2UoKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gaW1hZ2VzO1xuICAgIH1cblxuICAgIC8vIGJhY2tncm91bmQuY2xhc3NMaXN0LmFkZChcIi5tb3Zlc0JhY2tncm91bmRcIilcbiAgICAvLyBtb2R1bGUuY2xhc3NMaXN0LmFkZChcIi5ub01vcmVNb3Zlc1wiKTtcbiAgICAvLyBidXR0b24uY2xhc3NMaXN0LmFkZChcIi5tb3Zlc0J1dHRvblwiKTtcblxuICAgIGJpbmRFdmVudHMoY3R4KSB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYnV0dG9uXCIpO1xuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuaGFuZGxlQnV0dG9uLmJpbmQodGhpcykpO1xuICAgICAgICBjb25zdCBhYm91dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWJvdXRcIik7XG4gICAgICAgIGlmIChhYm91dCkge2Fib3V0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhhbmRsZUFib3V0LmJpbmQodGhpcykpO31cbiAgICAgICAgY29uc3QgcnVsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJ1bGVzXCIpO1xuICAgICAgICBpZiAocnVsZXMpIHtydWxlcy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVSdWxlcy5iaW5kKHRoaXMpKTt9XG4gICAgICAgIGN0eC5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZUNsaWNrLmJpbmQodGhpcykpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVCYWNrZ3JvdW5kLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmJpbmRNb3Zlc0J1dHRvbigpO1xuICAgIH1cblxuICAgIGJpbmRNb3Zlc0J1dHRvbigpIHtcbiAgICAgICAgY29uc3QgbW92ZXNCYWNrZ3JvdW5kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb3Zlc0JhY2tncm91bmRcIik7XG4gICAgICAgIGlmIChtb3Zlc0JhY2tncm91bmQpIHtcbiAgICAgICAgICAgIG1vdmVzQmFja2dyb3VuZC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVNb3Zlc0JhY2tncm91bmQuYmluZCh0aGlzLCBtb3Zlc0JhY2tncm91bmQpKVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBtb3Zlc0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW92ZXNCdXR0b25cIik7XG4gICAgICAgIGlmIChtb3Zlc0J1dHRvbikge1xuICAgICAgICAgICAgbW92ZXNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuaGFuZGxlTW92ZXNCdXR0b24uYmluZCh0aGlzLCBtb3Zlc0JhY2tncm91bmQpKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbW92ZXNCdXR0b247XG4gICAgfVxuXG4gICAgaGFuZGxlQWJvdXQoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWJvdXR0aXRsZVwiKTtcbiAgICAgICAgdGhpcy5pbnZpc2lmeUJ1dHRvbnMoKTtcbiAgICAgICAgZS5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgIH1cblxuICAgIGhhbmRsZVJ1bGVzKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJ1bGVzdGl0bGVcIik7XG4gICAgICAgIHRoaXMuaW52aXNpZnlCdXR0b25zKCk7XG4gICAgICAgIGUuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICB9XG5cbiAgICBoYW5kbGVCdXR0b24oZXZlbnQpIHtcbiAgICAgICAgY29uc3QgZTEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFib3V0XCIpXG4gICAgICAgIGNvbnN0IGUyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5ydWxlc1wiKVxuXG4gICAgICAgIHRoaXMuaW52aXNpZnlCdXR0b25zKCk7XG4gICAgICAgIGUxLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgICAgIGUyLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgfVxuXG4gICAgaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgbGV0IHggPSBNYXRoLmZsb29yKGV2ZW50Lm9mZnNldFggLyAoVmlldy5TUVVBUkVfRElNICogdGhpcy5yYXRpbykpXG4gICAgICAgIGxldCB5ID0gTWF0aC5mbG9vcihldmVudC5vZmZzZXRZIC8gKFZpZXcuU1FVQVJFX0RJTSAqIHRoaXMucmF0aW8pKVxuICAgICAgICBsZXQgeEV4YWN0ID0gZXZlbnQub2Zmc2V0WCAvIChWaWV3LlNRVUFSRV9ESU0gKiB0aGlzLnJhdGlvKTtcbiAgICAgICAgbGV0IHlFeGFjdCA9IGV2ZW50Lm9mZnNldFkgLyAoVmlldy5TUVVBUkVfRElNICogdGhpcy5yYXRpbyk7XG4gICAgICAgIGxldCBwb3MgPSB7eSwgeH07XG4gICAgICAgIGxldCBwb3NFeGFjdCA9IHt5OiB5RXhhY3QsIHg6IHhFeGFjdH07XG5cbiAgICAgICAgaWYgKHRoaXMuZ2FtZS5ib2FyZC5pc1dvbigpKSB7XG4gICAgICAgIC8vICAgIHRoaXMuZHJhd1dpbm5pbmdTY3JlZW4oKTtcbiAgICAgICAgICAgIGlmICh3aWxsUGxheUFnYWluKHBvc0V4YWN0KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5yZXNldEdhbWUodGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3Qm9hcmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd0JvYXJkKCk7XG4gICAgICAgICAgICBpZiAoaXNPbkJvYXJkKHBvcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUuY3R4LmNsaWNrZWRQb3MgPSBwb3NcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUuY3R4LmV4YWN0UG9zID0gcG9zRXhhY3Q7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLnN0YXRlTWFjaGluZSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0J1dHRvbihwb3NFeGFjdCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUuc3dpdGNoUGxheWVycygpO1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhd0JvYXJkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVCYWNrZ3JvdW5kKGV2ZW50KSB7XG4gICAgICAgIGlmICghZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5iYWNrZ3JvdW5kXCIpLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd0JvYXJkKCk7XG4gICAgICAgICAgICB0aGlzLmdhbWUuc3RhdGUgPSBcInVuc2VsZWN0ZWRcIjtcbiAgICAgICAgICAgIGNvbnN0IG1vdmVzQmFja2dyb3VuZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW92ZXNCYWNrZ3JvdW5kXCIpO1xuICAgICAgICAgICAgaWYgKG1vdmVzQmFja2dyb3VuZCkgbW92ZXNCYWNrZ3JvdW5kLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlTW92ZXNCdXR0b24obW92ZXNCYWNrZ3JvdW5kLCBldmVudCkge1xuICAgICAgICB0aGlzLmdhbWUuc3dpdGNoUGxheWVycygpO1xuICAgICAgICBtb3Zlc0JhY2tncm91bmQuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gICAgICAgIHRoaXMuZHJhd0JvYXJkKCk7XG4gICAgfVxuXG4gICAgaGFuZGxlTW92ZXNCYWNrZ3JvdW5kKG1vdmVzQmFja2dyb3VuZCwgZXZlbnQpIHtcbiAgICAgICAgaWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5vTW9yZU1vdmVzXCIpLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgICAgIG1vdmVzQmFja2dyb3VuZC5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhd1VwZ3JhZGVCdXR0b24odW5pdCwgY3R4LCB4LCB5KSB7XG4gICAgdW5pdC50ZWFtID09PSBCb2FyZC5FTkVNWV9URUFNID8gY3R4LmZpbGxTdHlsZSA9IFwicmVkXCIgOiBjdHguZmlsbFN0eWxlID0gXCJibHVlXCI7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5hcmMoXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHggKyBWaWV3LlNRVUFSRV9ESU0gKiAuMTUsXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHkgKyBWaWV3LlNRVUFSRV9ESU0gKiAuMTUsXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIC4xLFxuICAgICAgICAwLCAyLjAgKiBNYXRoLlBJKTtcbiAgICBjdHguZmlsbCgpO1xuXG4gICAgY3R4LmZpbGxTdHlsZSA9IFwid2hpdGVcIjtcbiAgICBjdHguZm9udCA9IFwiMzBweCBDb3BwZXJwbGF0ZVwiO1xuICAgIGN0eC5maWxsVGV4dChcIitcIiwgVmlldy5TUVVBUkVfRElNICogeCArIFZpZXcuU1FVQVJFX0RJTSAqIDAuMDYsXG4gICAgVmlldy5TUVVBUkVfRElNICogeSArIFZpZXcuU1FVQVJFX0RJTSAqIC4yMik7XG59XG5cbmZ1bmN0aW9uIGRyYXdTdGF0cyh1bml0LCBjdHgsIHgsIHkpIHtcbiAgICB1bml0LnRlYW0gPT09IEJvYXJkLkVORU1ZX1RFQU0gPyBjdHguZmlsbFN0eWxlID0gXCJyZWRcIiA6IGN0eC5maWxsU3R5bGUgPSBcImJsdWVcIjtcbiAgICBjdHguZm9udCA9IFwiMzVweCBDb3BwZXJwbGF0ZVwiO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9ICdkaW1ncmV5JztcbiAgICBjdHgubGluZVdpZHRoID0gMztcbiAgICBjdHguc3Ryb2tlVGV4dChcbiAgICAgICAgXCJBXCIrdW5pdC5hdHRhY2sudG9TdHJpbmcoKSxcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogeCArIFZpZXcuU1FVQVJFX0RJTSAqIC4zLFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB5ICsgVmlldy5TUVVBUkVfRElNICogLjUwKTtcbiAgICBjdHguc3Ryb2tlVGV4dChcbiAgICAgICAgXCJEXCIrdW5pdC5kZWZlbnNlLnRvU3RyaW5nKCksXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHggKyBWaWV3LlNRVUFSRV9ESU0gKiAuMyxcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogeSArIFZpZXcuU1FVQVJFX0RJTSAqIC43NSk7XG4gICAgY3R4LmZpbGxUZXh0KFxuICAgICAgICBcIkFcIit1bml0LmF0dGFjay50b1N0cmluZygpLFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB4ICsgVmlldy5TUVVBUkVfRElNICogLjMsXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHkgKyBWaWV3LlNRVUFSRV9ESU0gKiAuNTApO1xuICAgIGN0eC5maWxsVGV4dChcbiAgICAgICAgXCJEXCIrdW5pdC5kZWZlbnNlLnRvU3RyaW5nKCksXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHggKyBWaWV3LlNRVUFSRV9ESU0gKiAuMyxcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogeSArIFZpZXcuU1FVQVJFX0RJTSAqIC43NSk7XG59XG5cbkJhcnJhY2sucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihjdHgpIHtcbiAgICB0aGlzLnRlYW0gPT09IEJvYXJkLkVORU1ZX1RFQU0gPyBjdHguZmlsbFN0eWxlID0gXCJyZWRcIiA6IGN0eC5maWxsU3R5bGUgPSBcImJsdWVcIjtcbiAgICBjdHguZmlsbFJlY3QoXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHRoaXMucG9zLnggKyBWaWV3LlNRVUFSRV9ESU0gKiAuMTAsXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHRoaXMucG9zLnkgKyBWaWV3LlNRVUFSRV9ESU0gKiAuNzAsXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIC44MCxcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogLjIwKTtcblxuICAgIHRoaXMuaW1hZ2Uub25sb2FkID0gKCkgPT4ge1xuICAgICAgICBjdHguZHJhd0ltYWdlKFxuICAgICAgICAgICAgdGhpcy5pbWFnZSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHRoaXMucG9zLngsXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB0aGlzLnBvcy55LFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNLCBWaWV3LlNRVUFSRV9ESU0pO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9O1xuICAgIHRoaXMuaW1hZ2Uub25sb2FkKCk7XG59XG5cbkJhc2UucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihjdHgpIHtcbiAgICB0aGlzLnRlYW0gPT09IEJvYXJkLkVORU1ZX1RFQU0gPyBjdHguZmlsbFN0eWxlID0gXCJyZWRcIiA6IGN0eC5maWxsU3R5bGUgPSBcImJsdWVcIjtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LmFyYyhcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogdGhpcy5wb3MueCArIFZpZXcuU1FVQVJFX0RJTSAqIC41MCxcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogdGhpcy5wb3MueSArIFZpZXcuU1FVQVJFX0RJTSAqIC41MCxcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogLjM1LFxuICAgICAgICAwLCAyLjAgKiBNYXRoLlBJKTtcbiAgICBjdHguZmlsbCgpO1xufVxuXG5UcmVhc3VyZS5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uKGN0eCkge1xuICAgIHRoaXMuaW1hZ2Uub25sb2FkID0gKCkgPT4ge1xuICAgICAgICBjdHguZHJhd0ltYWdlKFxuICAgICAgICAgICAgdGhpcy5pbWFnZSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHRoaXMucG9zLngsXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB0aGlzLnBvcy55LFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNLCBWaWV3LlNRVUFSRV9ESU0pO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9O1xuICAgIHRoaXMuaW1hZ2Uub25sb2FkKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkcmF3VXBncmFkZUNvbmZpcm1hdGlvbihjdHgsIHBvcykge1xuICAgIGN0eC5maWxsU3R5bGUgPSAnbGlnaHRza3libHVlJzsgICAgICAgIFxuICAgIGN0eC5maWxsUmVjdChcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogcG9zLngsXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHBvcy55LFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAxLFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAwLjM1KTtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSAnY29ybmZsb3dlcmJsdWUnO1xuICAgIGN0eC5zdHJva2VSZWN0KFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiBwb3MueCxcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogcG9zLnksXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIDEsXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIDAuMzUpO1xuICAgIGN0eC5saW5lV2lkdGggPSAxO1xuICAgIGN0eC5mb250ID0gXCIyMHB4IENvcHBlcnBsYXRlXCI7XG4gICAgY3R4LmZpbGxTdHlsZSA9IFwiZGltZ3JleVwiO1xuICAgIGN0eC5maWxsVGV4dChcIlVwZ3JhZGU/XCIsXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHBvcy54LFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAocG9zLnkgKyAwLjI1KSk7XG59XG5cblVuaXQucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihjdHgsIGN1cnJlbnRQbGF5ZXIsIHVuaXRQb3MsIGNsaWNrZWRQb3MpIHtcbiAgICB0aGlzLnRlYW0gPT09IEJvYXJkLkVORU1ZX1RFQU0gPyBjdHguZmlsbFN0eWxlID0gXCJyZWRcIiA6IGN0eC5maWxsU3R5bGUgPSBcImJsdWVcIjtcblxuICAgIHRoaXMuaW1hZ2Uub25sb2FkID0gKCkgPT4ge1xuICAgICAgICBjdHguZHJhd0ltYWdlKFxuICAgICAgICAgICAgdGhpcy5pbWFnZSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHRoaXMucG9zLngsXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB0aGlzLnBvcy55LFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNLCBWaWV3LlNRVUFSRV9ESU0pO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgZHJhd1N0YXRzKHRoaXMsIGN0eCwgdGhpcy5wb3MueCwgdGhpcy5wb3MueSk7XG4gICAgICAgIGlmICh0aGlzLmlzVXBncmFkYWJsZShjdXJyZW50UGxheWVyKSkge1xuICAgICAgICAgICAgZHJhd1VwZ3JhZGVCdXR0b24odGhpcywgY3R4LCB0aGlzLnBvcy54LCB0aGlzLnBvcy55KTtcbiAgICAgICAgICAgIGlmICh1bml0UG9zICYmIGNsaWNrZWRQb3MpIHtcbiAgICAgICAgICAgICAgICBkcmF3VXBncmFkZUNvbmZpcm1hdGlvbihjdHgsIHVuaXRQb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmltYWdlLm9ubG9hZCgpO1xuICAgIC8vIHRoaXMuaW1hZ2Uuc3JjID0gdGhpcy5pbWFnZS5zcmM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFZpZXc7IiwiY2xhc3MgUGxheWVyIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZWFtLCB0cmVhc3VyZSwgYmFzZSkge1xuICAgICAgICB0aGlzLnRlYW0gPSB0ZWFtO1xuICAgICAgICB0aGlzLnVuaXRzID0gW107XG4gICAgICAgIHRoaXMudHJlYXN1cmUgPSB0cmVhc3VyZTtcbiAgICAgICAgdGhpcy5iYXNlO1xuICAgIH1cblxuICAgIHJlbW92ZVVuaXQodW5pdCkge1xuICAgICAgICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICB3aGlsZSAoIWZvdW5kICYmIGkgPCB0aGlzLnVuaXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudW5pdHNbaSsrXS5wb3MuZXF1YWxzKHVuaXQucG9zKSkge1xuICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgdSA9IHRoaXMudW5pdHMuc3BsaWNlKGktMSwgMSk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMudW5pdHMsIHUgKVxuICAgICAgICByZXR1cm4gdGhpcy51bml0cztcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBsYXllcjsiLCJpbXBvcnQgUGxheWVyIGZyb20gXCIuL3BsYXllclwiO1xuXG5jbGFzcyBIdW1hblBsYXllciBleHRlbmRzIFBsYXllciB7XG4gICAgY29uc3RydWN0b3IodGVhbSkge1xuICAgICAgICBzdXBlcih0ZWFtKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEh1bWFuUGxheWVyOyIsImltcG9ydCBCb2FyZCBmcm9tIFwiLi9ib2FyZFwiO1xuaW1wb3J0IEh1bWFuUGxheWVyIGZyb20gXCIuL2h1bWFuUGxheWVyXCI7XG5pbXBvcnQgeyBpc1VwZ3JhZGVCdXR0b24sIGlzVXBncmFkZUNvbmZpcm1hdGlvbiB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmNvbnN0IE1BWF9BUCA9IDQ7XG5jb25zdCBNQVhfVU5JVFMgPSA4O1xuXG5jbGFzcyBHYW1lIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5ib2FyZCA9IG5ldyBCb2FyZCgpO1xuICAgICAgICB0aGlzLnZpZXcgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YXRlID0gJ3Vuc2VsZWN0ZWQnO1xuICAgICAgICB0aGlzLnBsYXllciA9IG5ldyBIdW1hblBsYXllcihCb2FyZC5QTEFZRVJfVEVBTSk7XG4gICAgICAgIHRoaXMuZW5lbXkgPSBuZXcgSHVtYW5QbGF5ZXIoQm9hcmQuRU5FTVlfVEVBTSk7XG4gICAgICAgIHRoaXMuY3VycmVudFBsYXllciA9IHRoaXMucGxheWVyO1xuICAgICAgICB0aGlzLmFjdGlvblBvaW50cyA9IE1BWF9BUDtcbiAgICAgICAgdGhpcy5jdHggPSB7fTsgLy97IGNsaWNrZWRQb3MsIHNlbGVjdGVkU3F1YXJlIH1cbiAgICB9XG5cbiAgICByZXNldEdhbWUodmlldykge1xuICAgICAgICB0aGlzLmJvYXJkID0gbmV3IEJvYXJkKCk7XG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICAgIHRoaXMuc3RhdGUgPSAndW5zZWxlY3RlZCc7XG4gICAgICAgIHRoaXMucGxheWVyID0gbmV3IEh1bWFuUGxheWVyKEJvYXJkLlBMQVlFUl9URUFNKTtcbiAgICAgICAgdGhpcy5lbmVteSA9IG5ldyBIdW1hblBsYXllcihCb2FyZC5FTkVNWV9URUFNKTtcbiAgICAgICAgdGhpcy5jdXJyZW50UGxheWVyID0gdGhpcy5wbGF5ZXI7XG4gICAgICAgIHRoaXMuYWN0aW9uUG9pbnRzID0gTUFYX0FQO1xuICAgICAgICB0aGlzLmN0eCA9IHt9O1xuICAgIH1cblxuICAgIHN3aXRjaFBsYXllcnMoKSB7XG4gICAgICAgIHRoaXMuYm9hcmQuZ3JpZC5mb3JFYWNoKChjb2wpID0+IHtcbiAgICAgICAgICAgIGNvbC5mb3JFYWNoKChyb3cpID0+IHtcbiAgICAgICAgICAgICAgICByb3cuZm9yRWFjaCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5wYXJlbnRUeXBlKCkgPT09ICdVbml0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5oYXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5oYXNBdHRhY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5oYXNVcGdyYWRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMuYWN0aW9uUG9pbnRzID0gTUFYX0FQO1xuICAgICAgICB0aGlzLnN0YXRlID0gJ3Vuc2VsZWN0ZWQnO1xuICAgICAgICB0aGlzLmN1cnJlbnRQbGF5ZXIgPT09IHRoaXMucGxheWVyID8gdGhpcy5jdXJyZW50UGxheWVyID0gdGhpcy5lbmVteSA6IHRoaXMuY3VycmVudFBsYXllciA9IHRoaXMucGxheWVyO1xuICAgIH1cblxuICAgIC8vY3R4IC0+IHtjbGlja2VkUG9zIGFsd2F5cyBzZXQsIHNlbGVjdGVkU3F1YXJlIHRoYXQgd2lsbCBiZSBzZXQgaW4gdW5zZWxlY3RlZCBzdGFnZX1cbiAgICBzdGF0ZU1hY2hpbmUoKSB7XG4gICAgICAgIGxldCBzcXVhcmUgPSB0aGlzLmJvYXJkLmdyaWQuZ2V0KHRoaXMuY3R4LmNsaWNrZWRQb3MpO1xuICAgICAgICBcbiAgICAgICAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlICd1bnNlbGVjdGVkJzpcbiAgICAgICAgICAgICAgICB0aGlzLnJlZGlyZWN0U3RhdGUoc3F1YXJlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3VuaXQnOlxuICAgICAgICAgICAgICAgIC8vaWYgYWN0aW9uIHRha2VuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uVGFrZW4odGhpcy5jdHguY2xpY2tlZFBvcywgdGhpcy5jdHguc2VsZWN0ZWRTcXVhcmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4ID0ge307XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAndW5zZWxlY3RlZCc7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMudmlldy5kcmF3Qm9hcmQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYm9hcmQuaXNXb24oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3LmRyYXdCb2FyZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3LmRyYXdXaW5uaW5nU2NyZWVuKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hY3Rpb25Qb2ludHMgPT09IDApIHsgdGhpcy5zd2l0Y2hQbGF5ZXJzKCk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5kcmF3Qm9hcmQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gLy9lbHNlIGlmIGFjdGlvbiBub3QgdGFrZW5cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWRpcmVjdFN0YXRlKHNxdWFyZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMubm9Nb3JlTW92ZXNEaXNwbGF5KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdiYXJyYWNrJzpcbiAgICAgICAgICAgICAgICAvL2lmIHVuaXQgaXMgYm91Z2h0XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudW5pdEJvdWdodCh0aGlzLmN0eC5leGFjdFBvcywgdGhpcy5jdHgubWVudSwgdGhpcy5jdHguc2VsZWN0ZWRTcXVhcmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4ID0ge307XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAndW5zZWxlY3RlZCc7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGlvblBvaW50cyA9PT0gMCkgeyB0aGlzLnN3aXRjaFBsYXllcnMoKTsgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXcuZHJhd0JvYXJkKCk7XG4gICAgICAgICAgICAgICAgfSAvL2Vsc2UgaWYgdW5pdCBpcyBub3QgYm91Z2h0XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVkaXJlY3RTdGF0ZShzcXVhcmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm5vTW9yZU1vdmVzRGlzcGxheSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndXBncmFkZSc6XG4gICAgICAgICAgICAgICAgLy9pZiB1bml0IGlzIHVwZ3JhZGVkXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudW5pdFVwZ3JhZGVkKHRoaXMuY3R4LmV4YWN0UG9zLCB0aGlzLmN0eC5zZWxlY3RlZFNxdWFyZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9ICd1bnNlbGVjdGVkJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uUG9pbnRzID09PSAwKSB7IHRoaXMuc3dpdGNoUGxheWVycygpOyB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5kcmF3Qm9hcmQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVkaXJlY3RTdGF0ZShzcXVhcmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm5vTW9yZU1vdmVzRGlzcGxheSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkVSUk9SOiB1bmRlZmluZWQgc3RhdGVcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWRpcmVjdFN0YXRlKHNxdWFyZSkge1xuICAgICAgICB0aGlzLnZpZXcuZHJhd0JvYXJkKCk7XG4gICAgICAgIC8vaWYgdW5pdCB1cGdyYWRlIGlzIHNlbGVjdGVkXG4gICAgICAgIGlmICh0aGlzLnVuaXRVcGdyYWRlYWJsZSh0aGlzLmN0eC5leGFjdFBvcywgc3F1YXJlLmxhc3QoKSkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAndXBncmFkZSc7XG4gICAgICAgIH0gLy9pZiB1bml0IGlzIHNlbGVjdGVkXG4gICAgICAgIGVsc2UgaWYgKHRoaXMudW5pdFNlbGVjdGVkKHNxdWFyZS5sYXN0KCkpKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gJ3VuaXQnO1xuICAgICAgICB9IC8vZWxzZSBpZiBiYXJyYWNrIGlzIHNlbGVjdGVkXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuYWN0aW9uUG9pbnRzID4gMSAmJiB0aGlzLmN1cnJlbnRQbGF5ZXIudW5pdHMubGVuZ3RoIDwgTUFYX1VOSVRTXG4gICAgICAgICAgICAmJiB0aGlzLmJhcnJhY2tTZWxlY3RlZChzcXVhcmUuZmlyc3QoKSkpIHtcbiAgICAgICAgICAgIHRoaXMuY3R4Lm1lbnUgPSB0aGlzLnZpZXcuZHJhd0JhcnJhY2tTZWxlY3Rpb24oc3F1YXJlLmZpcnN0KCkucG9zKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAnYmFycmFjayc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gJ3Vuc2VsZWN0ZWQnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3R4LnNlbGVjdGVkU3F1YXJlID0gc3F1YXJlO1xuICAgIH1cblxuICAgIG5vTW9yZU1vdmVzRGlzcGxheSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1vdmVzQXZhaWxhYmxlKCkgJiYgdGhpcy5hY3Rpb25Qb2ludHMgPCBNQVhfQVApIHtcbiAgICAgICAgICAgIGNvbnN0IG5vTW9yZU1vdmVzID0gdGhpcy52aWV3Lm5vTW9yZU1vdmVzLnF1ZXJ5U2VsZWN0b3IoXCIubm9Nb3JlTW92ZXNcIik7XG4gICAgICAgICAgICBjb25zdCBidXR0b24gPSBub01vcmVNb3Zlcy5xdWVyeVNlbGVjdG9yKFwiLm1vdmVzQnV0dG9uXCIpXG4gICAgICAgIFxuICAgICAgICAgICAgbm9Nb3JlTW92ZXMuaW5uZXJIVE1MID0gdGhpcy52aWV3LnVwZGF0ZU5vTW9yZU1vdmVzU3RyKCk7XG4gICAgICAgICAgICBub01vcmVNb3Zlcy5hcHBlbmRDaGlsZChidXR0b24pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnZpZXcubm9Nb3JlTW92ZXMuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBtb3Zlc0F2YWlsYWJsZSgpIHtcbiAgICAgICAgbGV0IGJvb2wgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jdXJyZW50UGxheWVyLnVuaXRzLmZvckVhY2godW5pdCA9PiB7XG4gICAgICAgICAgICBib29sIHx8PSAhdW5pdC5oYXNNb3ZlZDtcbiAgICAgICAgICAgIGlmICghdW5pdC5oYXNBdHRhY2tlZCkge1xuICAgICAgICAgICAgICAgIHVuaXQuZ2V0QXR0YWNrcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYm9vbCB8fD0gIXVuaXQuaGFzVXBncmFkZWQgJiYgdW5pdC5hdHRhY2tzLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICBib29sIHx8PSB0aGlzLmFjdGlvblBvaW50cyA+IDEgJiYgdW5pdC5pc1VwZ3JhZGFibGUodGhpcy5jdXJyZW50UGxheWVyKTtcbiAgICAgICAgICAgIGJvb2wgfHw9IHRoaXMuYWN0aW9uUG9pbnRzID4gMSAmJiB0aGlzLmJhcnJhY2tzRW1wdHkoKTtcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIGJvb2w7XG4gICAgfVxuXG4gICAgYmFycmFja3NFbXB0eSgpIHtcbiAgICAgICAgbGV0IGJhcnJhY2tzO1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50UGxheWVyID09PSB0aGlzLnBsYXllcikge1xuICAgICAgICAgICAgYmFycmFja3MgPSB0aGlzLmJvYXJkLmJhcnJhY2tzLnBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJhcnJhY2tzID0gdGhpcy5ib2FyZC5iYXJyYWNrcy5lbmVteTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXMgPSBmYWxzZTtcbiAgICAgICAgYmFycmFja3MuZm9yRWFjaChiID0+IHtcbiAgICAgICAgICAgIGxldCBib29sID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnN0IGJhcnJhY2tTcXVhcmUgPSB0aGlzLmJvYXJkLmdyaWQuZ2V0KGIucG9zKVxuICAgICAgICAgICAgYmFycmFja1NxdWFyZS5mb3JFYWNoKHVuaXQgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh1bml0LnBhcmVudFR5cGUoKSA9PT0gJ1VuaXQnKSBib29sID0gZmFsc2U7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgcmVzIHx8PSBib29sO1xuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIHVuaXRVcGdyYWRlYWJsZShwb3MsIHVuaXQpIHtcbiAgICAgICAgbGV0IHVuaXRVcGdyYWRlYWJsZSA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5hY3Rpb25Qb2ludHMgPiAxICYmIHVuaXQgJiYgdW5pdC5wYXJlbnRUeXBlKCkgPT09ICdVbml0JyAmJlxuICAgICAgICAgICAgdW5pdC5pc1VwZ3JhZGFibGUodGhpcy5jdXJyZW50UGxheWVyKSAmJiBpc1VwZ3JhZGVCdXR0b24odW5pdC5wb3MsIHBvcykpIHtcbiAgICAgICAgICAgICAgICB1bml0VXBncmFkZWFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMudmlldy5kcmF3Qm9hcmQodW5pdC5wb3MsIHBvcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuaXRVcGdyYWRlYWJsZTtcbiAgICB9XG5cbiAgICB1bml0VXBncmFkZWQocG9zLCBzcXVhcmUpIHtcbiAgICAgICAgbGV0IHVuaXRVcGdyYWRlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgdW5pdCA9IHNxdWFyZS5sYXN0KCk7XG4gICAgICAgIGlmICh1bml0ICYmIHVuaXQucGFyZW50VHlwZSgpID09PSAnVW5pdCcgJiZcbiAgICAgICAgICAgIHVuaXQuaXNVcGdyYWRhYmxlKHRoaXMuY3VycmVudFBsYXllcikgJiYgaXNVcGdyYWRlQ29uZmlybWF0aW9uKHVuaXQucG9zLCBwb3MpKSB7XG4gICAgICAgICAgICAgICAgdW5pdC51cGdyYWRlcygpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uUG9pbnRzIC09IDI7XG4gICAgICAgICAgICAgICAgdW5pdFVwZ3JhZGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5pdFVwZ3JhZGVkO1xuICAgIH1cblxuICAgIHVuaXRTZWxlY3RlZCh1bml0KSB7XG4gICAgICAgIGxldCB1bml0U2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHVuaXQgJiYgdW5pdC5wYXJlbnRUeXBlKCkgPT09ICdVbml0JyAmJiB1bml0LnRlYW0gPT09IHRoaXMuY3VycmVudFBsYXllci50ZWFtKSB7XG4gICAgICAgICAgICB1bml0LnJlc2V0QWN0aW9ucygpOyAvL3Jlc2V0IG5ld2x5IHNlbGVjdGVkIHVuaXQncyBhY3Rpb24gc3F1YXJlc1xuICAgICAgICAgICAgaWYgKCF1bml0LmJvYXJkKSB7IHVuaXQuYm9hcmQgPSB0aGlzLmJvYXJkOyB9XG4gICAgICAgICAgICBpZiAoIXVuaXQudmlldykgeyB1bml0LnZpZXcgPSB0aGlzLnZpZXc7IH1cblxuICAgICAgICAgICAgdGhpcy51bml0Q2FsbERyYXdTZWxlY3RlZCh1bml0LCB0aGlzLnZpZXcpO1xuICAgICAgICAgICAgdW5pdFNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5pdFNlbGVjdGVkO1xuICAgIH1cblxuICAgIHVuaXRDYWxsRHJhd1NlbGVjdGVkKHVuaXQsIHZpZXcpIHtcbiAgICAgICAgaWYgKCF1bml0Lmhhc01vdmVkKSB7XG4gICAgICAgICAgICB1bml0LmdldE1vdmVzKCkuZm9yRWFjaCgocG9zKSA9PiB7XG4gICAgICAgICAgICAgICAgdmlldy5kcmF3TW92ZUhpZ2hsaWdodHMocG9zKTtcbiAgICAgICAgICAgICAgICB2aWV3LmRyYXdHcmlkRWxlbXMocG9zKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF1bml0Lmhhc0F0dGFja2VkICYmICF1bml0Lmhhc1VwZ3JhZGVkKSB7XG4gICAgICAgICAgICB1bml0LmdldEF0dGFja3MoKS5mb3JFYWNoKChwb3MpID0+IHtcbiAgICAgICAgICAgICAgICB2aWV3LmRyYXdBdHRhY2tIaWdobGlnaHRzKHBvcyk7XG4gICAgICAgICAgICAgICAgdmlldy5kcmF3R3JpZEVsZW1zKHBvcyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHZpZXcuZHJhd091dGxpbmUodW5pdC5wb3MpO1xuICAgIH1cblxuICAgIGJhcnJhY2tTZWxlY3RlZChiYXJyYWNrKSB7XG4gICAgICAgIHJldHVybiBiYXJyYWNrICYmIGJhcnJhY2sudHlwZSgpID09PSAnQmFycmFjaycgJiYgYmFycmFjay50ZWFtID09PSB0aGlzLmN1cnJlbnRQbGF5ZXIudGVhbTtcbiAgICB9XG5cbiAgICB1bml0Qm91Z2h0KHBvcywgbWVudSwgc3F1YXJlKSB7XG4gICAgICAgIGxldCB1bml0Qm91Z2h0ID0gZmFsc2U7XG4gICAgICAgIGxldCBuZXdQb3MgPSB0aGlzLmFkanVzdE1lbnVQb3NpdGlvbihzcXVhcmUuZmlyc3QoKSwgcG9zKTtcbiAgICAgICAgbGV0IHVuaXQ7XG4gICAgICAgIGlmICh1bml0ID0gbWVudS5maW5kKGUgPT4gZS5wb3MueCA9PT0gbmV3UG9zLnggJiYgZS5wb3MueSA9PT0gbmV3UG9zLnkpKSB7XG4gICAgICAgICAgICB1bml0LnBvcyA9IHNxdWFyZS5maXJzdCgpLnBvcztcbiAgICAgICAgICAgIHNxdWFyZS5wdXNoKHVuaXQpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGxheWVyLnVuaXRzLnB1c2godW5pdCk7XG4gICAgICAgICAgICB0aGlzLmFjdGlvblBvaW50cyAtPSAyO1xuICAgICAgICAgICAgdW5pdEJvdWdodCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5pdEJvdWdodDtcbiAgICB9XG5cbiAgICBhZGp1c3RNZW51UG9zaXRpb24oYmFycmFjaywgcG9zKSB7XG4gICAgICAgIGxldCB4RGlmZmVyZW5jZSA9IGJhcnJhY2sucG9zLnggPT09IDAgPyAtMC4yNSA6IDAuMjU7XG4gICAgICAgIGxldCB5RGlmZmVyZW5jZSA9IGJhcnJhY2sucG9zLnkgPT09IDAgPyAtMSA6IDAuNTtcbiAgICAgICAgbGV0IHggPSBNYXRoLmZsb29yKChwb3MueCArIHhEaWZmZXJlbmNlKSk7XG4gICAgICAgIGxldCB5ID0gTWF0aC5mbG9vcigocG9zLnkgKyB5RGlmZmVyZW5jZSkpO1xuICAgICAgICBsZXQgbmV3UG9zID0ge307XG4gICAgICAgIG5ld1Bvcy54ID0gYmFycmFjay5wb3MueCA9PT0gMCA/IHggKyAwLjI1IDogeCAtIDAuMjU7XG4gICAgICAgIG5ld1Bvcy55ID0gYmFycmFjay5wb3MueSA9PT0gMCA/IHkgKyAxIDogeSAtIDAuNTtcbiAgICAgICAgcmV0dXJuIG5ld1BvcztcbiAgICB9XG5cbiAgICBhY3Rpb25UYWtlbihwb3MsIHNxdWFyZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb3ZlVW5pdChwb3MsIHNxdWFyZSkgfHwgdGhpcy5hdHRhY2tVbml0KHBvcywgc3F1YXJlKTtcbiAgICB9XG5cbiAgICBtb3ZlVW5pdChwb3MsIHNxdWFyZSkge1xuICAgICAgICBsZXQgdW5pdE1vdmVkID0gZmFsc2U7XG4gICAgICAgIGxldCB1bml0ID0gc3F1YXJlLmxhc3QoKTtcblxuICAgICAgICBpZiAodW5pdC5tb3ZlcyAmJiB1bml0Lm1vdmVzLmZpbmQoZSA9PiBlLnggPT09IHBvcy54ICYmIGUueSA9PT0gcG9zLnkpKSB7XG4gICAgICAgICAgICB1bml0LnBvcyA9IHBvczsgLy9yZXNldCB1bml0IHBvc2l0aW9uO1xuICAgICAgICAgICAgaWYgKHVuaXQub25Ib21lVGVyZigpKSB7XG4gICAgICAgICAgICAgICAgdW5pdC5kb3duZ3JhZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNxdWFyZS5wb3AoKTtcbiAgICAgICAgICAgIGxldCB0cmVhc3VyZUlkeCA9IHRoaXMuZ2V0VHJlYXN1cmVJZHgoc3F1YXJlKTtcbiAgICAgICAgICAgIGlmICh0cmVhc3VyZUlkeCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNxdWFyZVt0cmVhc3VyZUlkeF0ucG9zID0gcG9zO1xuICAgICAgICAgICAgICAgIHRoaXMuYm9hcmQuZ3JpZC5nZXQocG9zKS5wdXNoKHNxdWFyZVt0cmVhc3VyZUlkeF0pO1xuICAgICAgICAgICAgICAgIHNxdWFyZS5zcGxpY2UodHJlYXN1cmVJZHgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ib2FyZC5ncmlkLmdldChwb3MpLnB1c2godW5pdCk7XG5cbiAgICAgICAgICAgIHRoaXMuYWN0aW9uUG9pbnRzLS07XG4gICAgICAgICAgICB1bml0Lmhhc01vdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHVuaXRNb3ZlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuaXRNb3ZlZDtcbiAgICB9XG5cbiAgICBnZXRUcmVhc3VyZUlkeChzcXVhcmUpIHtcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPHNxdWFyZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHNxdWFyZVtpXS50ZWFtICE9PSB0aGlzLmN1cnJlbnRQbGF5ZXIudGVhbVxuICAgICAgICAgICAgICAgICYmIHNxdWFyZVtpXS50eXBlKCkgPT09ICdUcmVhc3VyZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGF0dGFja1VuaXQocG9zLCBzcXVhcmUpIHtcbiAgICAgICAgbGV0IHVuaXRBdHRhY2tlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgdW5pdCA9IHNxdWFyZS5sYXN0KCk7XG4gICAgICAgIGlmICh1bml0LmF0dGFja3MgJiYgdW5pdC5hdHRhY2tzLmZpbmQoZSA9PiBlLnggPT09IHBvcy54ICYmIGUueSA9PT0gcG9zLnkpKSB7XG4gICAgICAgICAgICBsZXQgYXR0YWNrZWRTcXVhcmUgPSB0aGlzLmJvYXJkLmdyaWQuZ2V0KHBvcyk7XG4gICAgICAgICAgICBsZXQgYXR0YWNrZWRVbml0ID0gYXR0YWNrZWRTcXVhcmUubGFzdCgpO1xuICAgICAgICAgICAgYXR0YWNrZWRVbml0LmRlZmVuc2UgLT0gdW5pdC5hdHRhY2s7XG4gICAgICAgICAgICBpZiAoYXR0YWNrZWRVbml0LmRlZmVuc2UgPCAxKSB7XG4gICAgICAgICAgICAgICAgYXR0YWNrZWRTcXVhcmUucG9wKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGxheWVyLnRlYW0gPT09IHRoaXMucGxheWVyLnRlYW0gPyB0aGlzLmVuZW15LnJlbW92ZVVuaXQoYXR0YWNrZWRVbml0KSA6IHRoaXMucGxheWVyLnJlbW92ZVVuaXQoYXR0YWNrZWRVbml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWN0aW9uUG9pbnRzLS07XG4gICAgICAgICAgICB1bml0Lmhhc0F0dGFja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHVuaXRBdHRhY2tlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuaXRBdHRhY2tlZDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdhbWU7IiwiaW1wb3J0IFZpZXcgZnJvbSAnLi92aWV3LmpzJztcbmltcG9ydCBHYW1lIGZyb20gJy4vZ2FtZS5qcyc7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IHtcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHJlYXN1cmUtZ2FtZScpO1xuICAgIGNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5idXR0b25zJyk7XG5cbiAgICBjb25zdCBnYW1lID0gbmV3IEdhbWUoKTtcbiAgICBjb25zdCB2aWV3ID0gbmV3IFZpZXcoZ2FtZSwgY3R4LCBlbCk7XG4gICAgZ2FtZS52aWV3ID0gdmlldztcblxuICAgIHZpZXcuYmluZEV2ZW50cyhjdHgpO1xufSk7Il0sIm5hbWVzIjpbIlBpZWNlIiwiY29uc3RydWN0b3IiLCJ0ZWFtIiwicG9zIiwiaW1hZ2UiLCJJbWFnZSIsInBhcmVudFR5cGUiLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsIm5hbWUiLCJ0eXBlIiwiQmFycmFjayIsInNyYyIsIkJhc2UiLCJCb2FyZCIsIlRyZWFzdXJlIiwiUExBWUVSX1RFQU0iLCJwb3MxIiwieSIsIkdSSURfSEVJR0hUIiwieCIsIk1hdGgiLCJmbG9vciIsIkdSSURfV0lEVEgiLCJwb3MyIiwidHJlYXN1cmUiLCJwbGF5ZXIiLCJlbmVteSIsIkVORU1ZX1RFQU0iLCJiYXNlIiwiYmFycmFja3MiLCJncmlkIiwibWFrZUdyaWQiLCJpIiwicHVzaCIsImoiLCJiYXJyYWNrIiwiZ2V0IiwiaXNXb24iLCJlcXVhbHMiLCJpc09uQm9hcmQiLCJpc0J1dHRvbiIsIndpbGxQbGF5QWdhaW4iLCJpc1VwZ3JhZGVCdXR0b24iLCJzcXVhcmVQb3MiLCJjbGlja1BvcyIsImlzVXBncmFkZUNvbmZpcm1hdGlvbiIsIkFycmF5IiwicHJvdG90eXBlIiwiY29udGFpbnNUeXBlIiwic3F1YXJlIiwic29tZSIsImxhc3QiLCJsZW5ndGgiLCJmaXJzdCIsIlVuaXQiLCJhdHRhY2siLCJkZWZlbnNlIiwicG9pbnRTdGFuZGFyZCIsInVwZ3JhZGUiLCJsZXZlbCIsImF0dGFja0Rpc3QiLCJtb3ZlcyIsImF0dGFja3MiLCJoYXNNb3ZlZCIsImhhc0F0dGFja2VkIiwiaGFzVXBncmFkZWQiLCJib2FyZCIsInZpZXciLCJyZXNldEFjdGlvbnMiLCJ1cGdyYWRlcyIsImRvd25ncmFkZSIsIm1pbiIsImdldE1vdmVzIiwiZ2V0TW92ZXNTZXQiLCJkZWxldGUiLCJKU09OIiwic3RyaW5naWZ5IiwibWFwIiwiZWxlbSIsInBhcnNlIiwidmFsaWRWaXNpdGVkIiwiU2V0IiwibWF4RGlzdCIsIm5ld1BvcyIsImhhc1VuaXQiLCJoYXMiLCJhZGQiLCJnZXRBdHRhY2tzIiwiZWxlbVR5cGUiLCJpc1VwZ3JhZGFibGUiLCJjdXJyZW50UGxheWVyIiwib25Ib21lVGVyZiIsIkFyY2hlciIsIkRlZmVuZGVyIiwiSW5mYW50cnkiLCJWaWV3IiwiZ2FtZSIsImN0eCIsImVsIiwicmF0aW8iLCJpbWFnZXMiLCJyZW5kZXJJbWciLCJkcmF3Qm9hcmQiLCJkcmF3TWVudSIsIm5vTW9yZU1vdmVzIiwiZHJhd05vTW9yZU1vdmVzTW9kdWxlIiwicmVzZXRWaWV3IiwiY2xlYXJCb2FyZCIsImNsZWFyUmVjdCIsImNhbnZhcyIsIndpZHRoIiwiaGVpZ2h0IiwidW5pdFBvcyIsImNsaWNrZWRQb3MiLCJpbnZpc2lmeUJ1dHRvbnMiLCJiYWNrZ3JvdW5kIiwib25sb2FkIiwiZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImZvckVhY2giLCJzdHlsZSIsInZpc2liaWxpdHkiLCJkcmF3Qm9hcmRXaXRob3V0T25sb2FkIiwiZHJhd0dyaWRTcXVhcmUiLCJkcmF3R3JpZEVsZW1zIiwiZHJhd01pZGxpbmUiLCJkcmF3RW5kVHVybkJ1dHRvbiIsImZvbnQiLCJmaWxsU3R5bGUiLCJzdHIiLCJhY3Rpb25Qb2ludHMiLCJ0b1N0cmluZyIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwic3Ryb2tlVGV4dCIsIlNRVUFSRV9ESU0iLCJmaWxsVGV4dCIsInVuaXRzIiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlIiwiZmlsbFJlY3QiLCJzdHJva2VSZWN0IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsInBvc2l0aW9uIiwicmlnaHQiLCJib3R0b20iLCJjZWxsIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyIiwibGVmdCIsImxpc3RTdHlsZSIsImN1cnNvciIsImlubmVySFRNTCIsImNvbG9yIiwidGV4dEFsaWduIiwibGluZUhlaWdodCIsImFwcGVuZENoaWxkIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImRyYXdNZW51T3B0aW9ucyIsInJ1bGVCb3giLCJkcmF3UnVsZXMiLCJhYm91dEJveCIsImRyYXdBYm91dCIsIndpbmRvd1Jlc2l6ZSIsIndpbmRvdyIsIm9ucmVzaXplIiwibWVudSIsInJ1bGVzIiwiZHJhd0J1dHRvbiIsImFib3V0IiwiaW5uZXJIZWlnaHQiLCJpbm5lcldpZHRoIiwidGl0bGUiLCJkcmF3TWVudURpc3BsYXlCb3giLCJkcmF3TWVudUlubmVyRGlzcGxheUJveCIsImJveCIsInRvcCIsInRyYW5zZm9ybSIsIm1hcmdpbiIsInVwZGF0ZU5vTW9yZU1vdmVzU3RyIiwibW9kdWxlIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJidXR0b24iLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Ub3AiLCJkcmF3V2lubmluZ1NjcmVlbiIsImltZyIsImRyYXdJbWFnZSIsImRyYXdQbGF5QWdhaW5CdXR0b24iLCJkcmF3VXBncmFkZUNvbmZpcm1hdGlvbiIsImRyYXdCYXJyYWNrU2VsZWN0aW9uIiwiYWRqdXN0TWVudVBvc2l0aW9uIiwidHJvb3BTZWxlY3Rpb24iLCJpbmYiLCJhcmNoIiwiZGVmIiwidW5pdCIsImRyYXciLCJkcmF3T3V0bGluZSIsImRyYXdNb3ZlSGlnaGxpZ2h0cyIsImRyYXdBdHRhY2tIaWdobGlnaHRzIiwiZ3JpZFNxdWFyZSIsIm91dGxpbmVDb2xvciIsImZpbGxDb2xvciIsImdsb2JhbEFscGhhIiwicGl4ZWxXaWR0aCIsInBpeGVsSGVpZ2h0IiwiYmluZEV2ZW50cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVCdXR0b24iLCJiaW5kIiwiaGFuZGxlQWJvdXQiLCJoYW5kbGVSdWxlcyIsImhhbmRsZUNsaWNrIiwiaGFuZGxlQmFja2dyb3VuZCIsImJpbmRNb3Zlc0J1dHRvbiIsIm1vdmVzQmFja2dyb3VuZCIsImhhbmRsZU1vdmVzQmFja2dyb3VuZCIsIm1vdmVzQnV0dG9uIiwiaGFuZGxlTW92ZXNCdXR0b24iLCJldmVudCIsImUxIiwiZTIiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInhFeGFjdCIsInlFeGFjdCIsInBvc0V4YWN0IiwicmVzZXRHYW1lIiwiZXhhY3RQb3MiLCJzdGF0ZU1hY2hpbmUiLCJzd2l0Y2hQbGF5ZXJzIiwiY29udGFpbnMiLCJ0YXJnZXQiLCJzdGF0ZSIsImRyYXdVcGdyYWRlQnV0dG9uIiwiYXJjIiwiUEkiLCJmaWxsIiwiZHJhd1N0YXRzIiwiUGxheWVyIiwicmVtb3ZlVW5pdCIsImZvdW5kIiwidSIsInNwbGljZSIsIkh1bWFuUGxheWVyIiwiTUFYX0FQIiwiTUFYX1VOSVRTIiwiR2FtZSIsImNvbCIsInJvdyIsInJlZGlyZWN0U3RhdGUiLCJhY3Rpb25UYWtlbiIsInNlbGVjdGVkU3F1YXJlIiwibm9Nb3JlTW92ZXNEaXNwbGF5IiwidW5pdEJvdWdodCIsInVuaXRVcGdyYWRlZCIsInVuaXRVcGdyYWRlYWJsZSIsInVuaXRTZWxlY3RlZCIsImJhcnJhY2tTZWxlY3RlZCIsIm1vdmVzQXZhaWxhYmxlIiwiYm9vbCIsImJhcnJhY2tzRW1wdHkiLCJyZXMiLCJiIiwiYmFycmFja1NxdWFyZSIsInVuaXRDYWxsRHJhd1NlbGVjdGVkIiwiZmluZCIsInhEaWZmZXJlbmNlIiwieURpZmZlcmVuY2UiLCJtb3ZlVW5pdCIsImF0dGFja1VuaXQiLCJ1bml0TW92ZWQiLCJwb3AiLCJ0cmVhc3VyZUlkeCIsImdldFRyZWFzdXJlSWR4IiwidW5pdEF0dGFja2VkIiwiYXR0YWNrZWRTcXVhcmUiLCJhdHRhY2tlZFVuaXQiLCJnZXRFbGVtZW50QnlJZCIsImdldENvbnRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///627\n')},37:function(){eval("// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcuanMiLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXByb2plY3QvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///37\n")}};__webpack_modules__[627]();var __webpack_exports__={};__webpack_modules__[37]()})();