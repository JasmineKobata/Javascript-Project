(function(){"use strict";var __webpack_modules__={627:function(){eval('\n;// CONCATENATED MODULE: ./src/piece.js\nclass Piece {\n  constructor(team, pos) {\n    this.team = team;\n    this.pos = pos;\n    this.image = new Image();\n  }\n  parentType() {\n    return Object.getPrototypeOf(this.constructor).name;\n  }\n  type() {\n    return this.constructor.name;\n  }\n}\n/* harmony default export */ var piece = (Piece);\n;// CONCATENATED MODULE: ./src/pieces/barrack.js\n\nclass Barrack extends piece {\n  constructor(team, pos) {\n    super(team, pos);\n    this.image.src = "./resources/barracks2.png";\n  }\n}\n/* harmony default export */ var pieces_barrack = (Barrack);\n;// CONCATENATED MODULE: ./src/pieces/base.js\n\nclass Base extends piece {\n  constructor(team, pos) {\n    super(team, pos);\n  }\n}\n/* harmony default export */ var base = (Base);\n;// CONCATENATED MODULE: ./src/pieces/treasure.js\n\n\nclass Treasure extends piece {\n  constructor(team, pos) {\n    super(team, pos);\n    this.team === board.PLAYER_TEAM ? this.image.src = "./resources/treasureblue.png" : this.image.src = "./resources/treasurered.png";\n  }\n}\n/* harmony default export */ var treasure = (Treasure);\n;// CONCATENATED MODULE: ./src/board.js\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\nclass Board {\n  //0, 0 is top left corner\n\n  constructor() {\n    let pos1 = {\n      y: Board.GRID_HEIGHT - 1,\n      x: Math.floor(Board.GRID_WIDTH / 2)\n    };\n    let pos2 = {\n      y: 0,\n      x: Math.floor(Board.GRID_WIDTH / 2)\n    };\n    this.treasure = {\n      player: new treasure(Board.PLAYER_TEAM, pos1),\n      enemy: new treasure(Board.ENEMY_TEAM, pos2)\n    };\n    pos1 = {\n      y: 0,\n      x: Math.floor(Board.GRID_WIDTH / 2)\n    };\n    pos2 = {\n      y: Board.GRID_HEIGHT - 1,\n      x: Math.floor(Board.GRID_WIDTH / 2)\n    };\n    this.base = {\n      player: new base(Board.PLAYER_TEAM, pos2),\n      enemy: new base(Board.ENEMY_TEAM, pos1)\n    };\n    this.barracks = {\n      player: [],\n      enemy: []\n    };\n    this.grid = Board.makeGrid(this.treasure, this.base, this.barracks);\n  }\n  static makeGrid(treasure, base, barracks) {\n    let grid = [];\n    for (let i = 0; i < Board.GRID_HEIGHT; i++) {\n      grid.push([]);\n      for (let j = 0; j < Board.GRID_WIDTH; j++) {\n        grid[i].push([]);\n      }\n    }\n    let pos = {\n      y: 0,\n      x: 0\n    };\n    let barrack = new pieces_barrack(Board.ENEMY_TEAM, pos);\n    grid.get(pos).push(barrack);\n    barracks.enemy.push(barrack);\n    pos = {\n      y: 0,\n      x: Board.GRID_WIDTH - 1\n    };\n    barrack = new pieces_barrack(Board.ENEMY_TEAM, pos);\n    grid.get(pos).push(barrack);\n    barracks.enemy.push(barrack);\n    pos = {\n      y: Board.GRID_HEIGHT - 1,\n      x: 0\n    };\n    barrack = new pieces_barrack(Board.PLAYER_TEAM, pos);\n    grid.get(pos).push(barrack);\n    barracks.player.push(barrack);\n    pos = {\n      y: Board.GRID_HEIGHT - 1,\n      x: Board.GRID_WIDTH - 1\n    };\n    barrack = new pieces_barrack(Board.PLAYER_TEAM, pos);\n    grid.get(pos).push(barrack);\n    barracks.player.push(barrack);\n    grid.get(base.enemy.pos).push(base.enemy);\n    grid.get(base.player.pos).push(base.player);\n    grid.get(treasure.enemy.pos).push(treasure.enemy);\n    grid.get(treasure.player.pos).push(treasure.player);\n    return grid;\n  }\n  isWon() {\n    return this.treasure.player.pos.equals(this.base.enemy.pos) || this.treasure.enemy.pos.equals(this.base.player.pos);\n  }\n}\n_defineProperty(Board, "GRID_WIDTH", 7);\n_defineProperty(Board, "GRID_HEIGHT", 8);\n_defineProperty(Board, "PLAYER_TEAM", 1);\n_defineProperty(Board, "ENEMY_TEAM", 2);\n/* harmony default export */ var board = (Board);\n;// CONCATENATED MODULE: ./src/utils.js\n\nfunction isOnBoard(pos) {\n  return pos.x > -1 && pos.x < board.GRID_WIDTH && pos.y > -1 && pos.y < board.GRID_HEIGHT;\n}\nfunction isButton(pos) {\n  return pos.y > board.GRID_HEIGHT + 0.25 && pos.y < board.GRID_HEIGHT + 0.75 && pos.x > 4 && pos.x < 5;\n}\nfunction willPlayAgain(pos) {\n  return pos.x > board.GRID_WIDTH / 2 - 0.75 && pos.x < board.GRID_WIDTH / 2 + 0.75 && pos.y > Math.floor(board.GRID_HEIGHT / 2) && pos.y < Math.floor(board.GRID_HEIGHT / 2) + 0.5;\n}\nfunction isUpgradeButton(squarePos, clickPos) {\n  let x = clickPos.x - squarePos.x;\n  let y = clickPos.y - squarePos.y;\n  return x > 0 && x < 0.25 && y > 0 && y < 0.25;\n}\nfunction isUpgradeConfirmation(squarePos, clickPos) {\n  let x = clickPos.x - squarePos.x;\n  let y = clickPos.y - squarePos.y;\n  return x > 0 && x < 1 && y > 0 && y < 0.25;\n}\nArray.prototype.get = function (pos) {\n  return this[pos.y][pos.x];\n};\nArray.prototype.containsType = function (type) {\n  square.some();\n};\nArray.prototype.last = function () {\n  return this[this.length - 1];\n};\nArray.prototype.first = function () {\n  return this[0];\n};\nObject.prototype.equals = function (pos) {\n  return this.x === pos.x && this.y === pos.y;\n};\n/* harmony default export */ var utils = (Array);\n;// CONCATENATED MODULE: ./src/pieces/unit.js\n\n\n\nclass Unit extends piece {\n  constructor(team, pos) {\n    super(team, pos);\n    this.attack = null;\n    this.defense = null;\n    this.pointStandard = null;\n    this.upgrade = null;\n    this.level = 1;\n    this.attackDist = 1;\n    this.moves = null;\n    this.attacks = [];\n    this.hasMoved = false;\n    this.hasAttacked = false;\n    this.hasUpgraded = false;\n    this.board = null;\n    this.view = null;\n  }\n  resetActions() {\n    this.moves = null;\n    this.attacks = [];\n  }\n  upgrades() {\n    this.level = 2;\n    this.hasUpgraded = true;\n    this.attack = this.upgrade.attack;\n    this.defense = this.upgrade.defense;\n  }\n  downgrade() {\n    this.level = 1;\n    this.attack = this.pointStandard.attack;\n    this.defense = Math.min(this.pointStandard.defense, this.defense);\n  }\n  getMoves() {\n    this.moves = this.getMovesSet();\n    this.moves.delete(JSON.stringify(this.pos));\n    this.moves = [...this.moves].map(elem => {\n      return JSON.parse(elem);\n    });\n    return this.moves;\n  }\n  getMovesSet() {\n    let validVisited = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Set();\n    let maxDist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    let pos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.pos;\n    if (maxDist === 0) {\n      return validVisited;\n    }\n    for (let y = pos.y - 1; y <= pos.y + 1; y++) {\n      for (let x = pos.x - 1; x <= pos.x + 1; x++) {\n        let newPos = {\n          y: y,\n          x: x\n        };\n        if (isOnBoard(newPos) && !this.hasUnit(newPos)) {\n          if (!validVisited.has(JSON.stringify(newPos))) {\n            validVisited.add(JSON.stringify(newPos));\n          }\n          validVisited = this.getMovesSet(validVisited, maxDist - 1, newPos);\n        }\n      }\n    }\n    return validVisited;\n  }\n  getAttacks() {\n    for (let y = this.pos.y - this.attackDist; y <= this.pos.y + this.attackDist; y++) {\n      for (let x = this.pos.x - this.attackDist; x <= this.pos.x + this.attackDist; x++) {\n        let newPos = {\n          y: y,\n          x: x\n        };\n        if (isOnBoard(newPos)) {\n          let square = this.board.grid.get(newPos);\n          if (this.hasUnit(newPos) && square.last().team !== this.team) {\n            this.attacks.push(newPos);\n          }\n        }\n      }\n    }\n    return this.attacks;\n  }\n  hasUnit(pos) {\n    let square = this.board.grid.get(pos);\n    if (square.length > 0) {\n      let elemType = square.last().parentType();\n      if (elemType === \'Unit\') {\n        return true;\n      }\n    }\n    return false;\n  }\n  isUpgradable(currentPlayer) {\n    return this.team === currentPlayer.team && this.level == 1 && (this.team === board.PLAYER_TEAM && this.pos.y < board.GRID_HEIGHT / 2 || this.team === board.ENEMY_TEAM && this.pos.y >= board.GRID_HEIGHT / 2);\n  }\n  onHomeTerf() {\n    return this.team === board.PLAYER_TEAM && this.pos.y >= board.GRID_HEIGHT / 2 || this.team === board.ENEMY_TEAM && this.pos.y < board.GRID_HEIGHT / 2;\n  }\n}\n/* harmony default export */ var unit = (Unit);\n;// CONCATENATED MODULE: ./src/pieces/units/archer.js\n\nclass Archer extends unit {\n  constructor(team, pos) {\n    super(team, pos);\n    this.attack = 1;\n    this.defense = 1;\n    this.attackDist = 2;\n    this.upgrade = {\n      attack: 2,\n      defense: 2\n    };\n    this.pointStandard = {\n      attack: 1,\n      defense: 1\n    };\n    this.image.src = "./resources/archer.png";\n  }\n}\n/* harmony default export */ var archer = (Archer);\n;// CONCATENATED MODULE: ./src/pieces/units/defender.js\n\nclass Defender extends unit {\n  constructor(team, pos) {\n    super(team, pos);\n    this.attack = 1;\n    this.defense = 3;\n    //if attack is changed to 1, unit.isUpgradable returns true when unit is already upgraded\n    //because it checks if upgraded using attack points. Need to implement different check\n    //if making upgraded attack points equal to standard attack points\n    this.upgrade = {\n      attack: 1,\n      defense: 5\n    };\n    this.pointStandard = {\n      attack: 1,\n      defense: 3\n    };\n    this.image.src = "./resources/defender.png";\n  }\n}\n/* harmony default export */ var defender = (Defender);\n;// CONCATENATED MODULE: ./src/pieces/units/infantry.js\n\nclass Infantry extends unit {\n  constructor(team, pos) {\n    super(team, pos);\n    this.attack = 2;\n    this.defense = 2;\n    this.upgrade = {\n      attack: 4,\n      defense: 3\n    };\n    this.pointStandard = {\n      attack: 2,\n      defense: 2\n    };\n    this.image.src = "./resources/infantry.png";\n  }\n}\n/* harmony default export */ var infantry = (Infantry);\n;// CONCATENATED MODULE: ./src/view.js\nfunction view_defineProperty(obj, key, value) { key = view_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction view_toPropertyKey(arg) { var key = view_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }\nfunction view_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n\n\n\n\n\nclass View {\n  constructor(game, ctx, el) {\n    this.game = game;\n    this.el = el;\n    this.ctx = ctx;\n    this.ratio = null;\n    this.images = this.renderImg();\n    this.drawBoard();\n    this.drawMenu({\n      y: board.GRID_HEIGHT,\n      x: board.GRID_WIDTH\n    });\n    this.noMoreMoves = this.drawNoMoreMovesModule();\n  }\n  resetView(game) {\n    this.game = game;\n    this.ratio = null;\n    this.drawBoard();\n  }\n  clearBoard() {\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n  }\n  drawBoard(unitPos, clickedPos) {\n    this.clearBoard();\n    this.invisifyButtons();\n    this.images.background.onload(unitPos, clickedPos);\n  }\n  invisifyButtons() {\n    const e = [];\n    e.push(document.querySelector(".about"));\n    e.push(document.querySelector(".rules"));\n    e.push(document.querySelector(".abouttitle"));\n    e.push(document.querySelector(".rulestitle"));\n    e.forEach(e => {\n      if (e) {\n        e.style.visibility = \'hidden\';\n      }\n    });\n  }\n  drawBoardWithoutOnload(unitPos, clickedPos) {\n    for (let y = 0; y < board.GRID_HEIGHT; y++) {\n      for (let x = 0; x < board.GRID_WIDTH; x++) {\n        this.drawGridSquare(x, y, "darkgreen");\n        this.drawGridElems({\n          y: y,\n          x: x\n        }, unitPos, clickedPos);\n      }\n    }\n    this.drawMidline();\n    this.drawEndTurnButton();\n    this.ctx.font = "40px Copperplate";\n    this.game.currentPlayer.team === board.ENEMY_TEAM ? this.ctx.fillStyle = "red" : this.ctx.fillStyle = "blue";\n    let str = "Action Points: " + this.game.actionPoints.toString();\n    this.ctx.strokeStyle = \'dimgrey\';\n    this.ctx.lineWidth = 3;\n    this.ctx.strokeText(str, 10, (board.GRID_HEIGHT + 0.5) * View.SQUARE_DIM);\n    this.ctx.fillText(str, 10, (board.GRID_HEIGHT + 0.5) * View.SQUARE_DIM);\n    this.ctx.font = "30px Copperplate";\n    str = "Troops: " + this.game.currentPlayer.units.length.toString() + "/8";\n    this.ctx.strokeText(str, 10, (board.GRID_HEIGHT + 0.75) * View.SQUARE_DIM);\n    this.ctx.fillText(str, 10, (board.GRID_HEIGHT + 0.75) * View.SQUARE_DIM);\n  }\n  drawMidline() {\n    this.ctx.strokeStyle = \'lightskyblue\';\n    this.ctx.beginPath();\n    this.ctx.moveTo(0, board.GRID_HEIGHT / 2 * View.SQUARE_DIM);\n    this.ctx.lineTo((board.GRID_HEIGHT - 1) * View.SQUARE_DIM, board.GRID_HEIGHT / 2 * View.SQUARE_DIM);\n    this.ctx.stroke();\n  }\n  drawEndTurnButton() {\n    this.ctx.fillStyle = \'lightskyblue\';\n    this.ctx.fillRect(View.SQUARE_DIM * 4, (board.GRID_HEIGHT + 0.25) * View.SQUARE_DIM, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.5);\n    this.ctx.strokeStyle = \'cornflowerblue\';\n    this.ctx.lineWidth = 1;\n    this.ctx.strokeRect(View.SQUARE_DIM * 4, (board.GRID_HEIGHT + 0.25) * View.SQUARE_DIM, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.5);\n    this.ctx.font = "25px Copperplate";\n    this.ctx.fillStyle = "dimgrey";\n    this.ctx.lineWidth = 2;\n    this.ctx.fillText("End", 4.25 * View.SQUARE_DIM, (board.GRID_HEIGHT + 0.45) * View.SQUARE_DIM);\n    this.ctx.fillText("Turn", 4.15 * View.SQUARE_DIM, (board.GRID_HEIGHT + 0.65) * View.SQUARE_DIM);\n  }\n  drawMenu(pos) {\n    const grid = document.createElement("ul");\n    grid.classList.add("grid");\n    grid.style.position = "absolute";\n    grid.style.right = "7.5%";\n    grid.style.bottom = "calc(0.2% - 32px)";\n    grid.style.width = "calc(14.29% - 40px)";\n    grid.style.height = "5.85%";\n    const cell = document.createElement("li");\n    cell.classList.add("menu");\n    cell.style.backgroundColor = "lightskyblue";\n    cell.style.border = "1px solid cornflowerblue";\n    cell.style.height = "calc(100% - 2px)";\n    cell.style.width = "calc(100% - 2px)";\n    cell.style.left = "0px";\n    cell.style.listStyle = "none";\n    cell.style.cursor = "pointer";\n    cell.innerHTML = "Menu";\n    cell.style.font = 25 * this.ratio + "px Copperplate";\n    cell.style.color = "dimgrey";\n    cell.style.textAlign = "center";\n    cell.style.lineHeight = "200%";\n    cell.classList.add("button");\n    grid.appendChild(cell);\n    // this.el.appendChild(grid);\n    document.getElementsByClassName("background")[0].appendChild(grid);\n    this.drawMenuOptions(pos, cell);\n    const ruleBox = this.drawRules(pos);\n    const aboutBox = this.drawAbout(pos);\n    const windowResize = window.onresize;\n    window.onresize = () => {\n      windowResize();\n      if (this.ratio < 0.67) {\n        this.ratio = 0.67;\n      }\n      ruleBox.style.font = 19 * this.ratio - 2 + "px Copperplate";\n      ruleBox.style.lineHeight = "100%";\n      aboutBox.style.font = 20 * this.ratio - 2 + "px Copperplate";\n      aboutBox.style.lineHeight = "350%";\n    };\n  }\n  drawMenuOptions(pos, cell) {\n    const menu = document.createElement("ul");\n    menu.classList.add("menu");\n    menu.style.position = "absolute";\n    menu.style.right = "7.5%";\n    menu.style.bottom = "calc(5.85% - 16px)";\n    menu.style.width = "calc(14.29% - 42px)";\n    menu.style.height = "calc(5.85% - 2px)";\n    const rules = document.createElement("li");\n    this.drawButton("Rules", rules, {\n      x: "0%",\n      y: "100%"\n    });\n    rules.classList.add("rules");\n    const about = document.createElement("li");\n    this.drawButton("About", about, {\n      x: "0%",\n      y: "0%"\n    });\n    about.classList.add("about");\n    rules.style.font = 20 * this.ratio + "px Copperplate";\n    rules.style.lineHeight = "250%";\n    about.style.font = 20 * this.ratio + "px Copperplate";\n    about.style.lineHeight = "250%";\n    menu.appendChild(rules);\n    menu.appendChild(about);\n    menu.style.visibility = \'hidden\';\n    window.onresize = () => {\n      this.ratio = Math.min(window.innerHeight / this.ctx.canvas.height, window.innerWidth / this.ctx.canvas.width);\n      if (this.ratio < 0.67) {\n        this.ratio = 0.67;\n      }\n      cell.style.font = 25 * this.ratio + "px Copperplate";\n      cell.style.lineHeight = "200%";\n      rules.style.font = 20 * this.ratio + "px Copperplate";\n      rules.style.lineHeight = "250%";\n      about.style.font = 20 * this.ratio + "px Copperplate";\n      about.style.lineHeight = "250%";\n    };\n\n    // this.el.appendChild(menu);\n    document.getElementsByClassName("background")[0].appendChild(menu);\n  }\n  drawRules(pos) {\n    const title = document.createElement("ul");\n    title.classList.add("rulestitle");\n    this.drawMenuDisplayBox("How To Play&nbsp;&nbsp;&nbsp;", title, title);\n    const rules = document.createElement("li");\n    this.drawMenuInnerDisplayBox("Steal the enemy\'s treasure & bring it back to your base!<p>BUYING | Select the barracks to buy troops. All units can move up to 2 spaces in any direction. There are 3 types of troops:</p>-Infantry: Defense 2, Attack 1, Range 1<br>-Archer: Defense 1, Attack 1, Range 2<br>-Defender: Defense 3, Attack 1, Range 1<br><p>UPGRADING | When in enemy territory, units can be ugraded as follows:</p>-Infantry: Defense +1, Attack +2<br>-Archer: Defense +1, Attack +1<br>-Defender: Defense +2, Attack +1<br><p>Units cannot attack after upgrading until the next round. Stats return to normal once returning to friendly territory.</p><p>TREASURE | Pick up the treasure by moving a unit onto the square containing it. (You can only pick up enemy treasure.)</p><p>PRICE CHART<br>Moving or Attacking: 1 Action Point<br>Buying or Upgrading: 2 Action Points</p>", rules, title);\n    rules.style.font = "12px Copperplate";\n    if (this.ratio < 0.67) {\n      this.ratio = 0.67;\n    }\n    rules.style.font = 19 * this.ratio - 2 + "px Copperplate";\n    rules.style.lineHeight = "100%";\n    rules.classList.add("rulesbox");\n    title.appendChild(rules);\n    // title.style.visibility = \'hidden\'\n    // this.el.appendChild(title);\n    document.getElementsByClassName("background")[0].appendChild(title);\n    return rules;\n  }\n  drawAbout(pos) {\n    const title = document.createElement("ul");\n    title.classList.add("abouttitle");\n    this.drawMenuDisplayBox("About&nbsp;&nbsp;&nbsp;", title, title);\n    const about = document.createElement("li");\n    this.drawMenuInnerDisplayBox("<br><br><p>Game developed by <a href=\'https://www.linkedin.com/in/jdirksen/\'>Jasmine Kobata</a></p><p><a href=\'https://github.com/JasmineKobata/Javascript-Project\'>Treasure Wars! GitHub Repo</p><p><a href=\'https://www.appacademy.io/\'>App Academy</a> Javascript Project</p>", about, title);\n    if (this.ratio < 0.67) {\n      this.ratio = 0.67;\n    }\n    about.style.font = 20 * this.ratio - 2 + "px Copperplate";\n    about.style.lineHeight = "350%";\n    about.classList.add("aboutbox");\n    title.appendChild(about);\n    title.style.visibility = \'hidden\';\n    // this.el.appendChild(title);\n    document.getElementsByClassName("background")[0].appendChild(title);\n    return about;\n  }\n  drawMenuDisplayBox(str, box, title) {\n    box.style.width = "calc(75% - 42px)";\n    box.style.height = "calc(75% - 2px)";\n    box.style.backgroundColor = "lightskyblue";\n    box.style.border = "1px solid cornflowerblue";\n    box.style.position = "absolute";\n    box.style.left = "50%";\n    box.style.top = "45%";\n    box.style.transform = "translate(-50%, -50%)";\n    box.style.margin = "0px";\n    box.style.listStyle = "none";\n    box.style.cursor = "pointer";\n    box.innerHTML = str;\n    if (this.ratio < 0.67) {\n      this.ratio = 0.67;\n    }\n    box.style.font = 30 * this.ratio - 2 + "px Copperplate";\n    box.style.color = "dimgrey";\n    box.style.textAlign = "center";\n    box.style.lineHeight = "250%";\n    const windowResize = window.onresize;\n    window.onresize = () => {\n      windowResize();\n      if (this.ratio < 0.67) {\n        this.ratio = 0.67;\n      }\n      box.style.font = 30 * this.ratio - 2 + "px Copperplate";\n      box.style.lineHeight = "250%";\n    };\n  }\n  drawMenuInnerDisplayBox(str, box, title) {\n    box.style.width = "calc(80% - 42px)";\n    box.style.height = "calc(80% - 2px)";\n    box.style.backgroundColor = "cornflowerblue";\n    box.style.border = "1px solid cornflowerblue";\n    box.style.position = "absolute";\n    box.style.left = "50%";\n    box.style.top = "50%";\n    box.style.transform = "translate(-50%, -50%)";\n    // box.style.margin = "0px";\n    box.style.listStyle = "none";\n    box.style.cursor = "pointer";\n    box.innerHTML = str;\n    box.style.font = "25px Copperplate";\n    box.style.color = "white";\n  }\n  drawButton(str, cell, pos) {\n    cell.style.backgroundColor = "lightskyblue";\n    cell.style.border = "1px solid cornflowerblue";\n    cell.style.width = "100%";\n    cell.style.height = "100%";\n    cell.style.position = "absolute";\n    cell.style.right = pos.x;\n    cell.style.bottom = pos.y;\n    cell.style.margin = "0px";\n    cell.style.listStyle = "none";\n    cell.style.cursor = "pointer";\n    cell.innerHTML = str;\n    cell.style.color = "dimgrey";\n    cell.style.textAlign = "center";\n  }\n  updateNoMoreMovesStr() {\n    let str = "<br>No Moves Left!</br>";\n    str += this.game.currentPlayer.team === board.PLAYER_TEAM ? "Red" : "Blue";\n    str += "\'s Turn?";\n    return str;\n  }\n  drawNoMoreMovesModule() {\n    const background = document.createElement("div");\n    background.classList.add("movesBackground");\n    background.style.width = "100%";\n    background.style.height = "100%";\n    background.style.position = "absolute";\n    background.style.top = "0px";\n    background.style.visibility = "hidden";\n    const module = document.createElement("ul");\n    module.classList.add("noMoreMoves");\n    module.style.width = "calc(40% - 42px)";\n    module.style.height = "calc(18% - 2px)";\n    module.style.backgroundColor = "lightskyblue";\n    module.style.border = "1px solid cornflowerblue";\n    module.style.position = "absolute";\n    module.style.left = "50%";\n    module.style.top = "45%";\n    module.style.transform = "translate(-50%, -50%)";\n    module.style.margin = "0px";\n    module.style.paddingLeft = "10px";\n    module.style.paddingRight = module.style.paddingLeft;\n    module.style.listStyle = "none";\n    module.style.cursor = "pointer";\n    module.style.font = 27 * this.ratio - 2 + "px Copperplate";\n    module.style.color = "dimgrey";\n    module.style.textAlign = "center";\n    const button = document.createElement("li");\n    button.classList.add("movesButton");\n    button.innerHTML = "OK";\n    button.style.width = "50%";\n    button.style.height = "calc(18% - 2px)";\n    button.style.backgroundColor = "cornflowerblue";\n    button.style.border = "1px solid cornflowerblue";\n    button.style.marginLeft = "auto";\n    button.style.marginRight = "auto";\n    button.style.marginTop = "11%";\n    button.style.color = "white";\n    const windowResize = window.onresize;\n    window.onresize = () => {\n      windowResize();\n      if (this.ratio < 0.67) {\n        this.ratio = 0.67;\n      }\n      module.style.font = 27 * this.ratio - 2 + "px Copperplate";\n      // ruleBox.style.lineHeight = "100%"\n    };\n\n    module.appendChild(button);\n    background.appendChild(module);\n    document.getElementsByClassName("background")[0].appendChild(background);\n\n    // this.bindMovesButton();\n    return background;\n  }\n  drawWinningScreen() {\n    let img = new Image();\n    img.src = \'./resources/wood.png\';\n    img.onload = () => {\n      this.ctx.drawImage(img, View.SQUARE_DIM * Math.floor((board.GRID_WIDTH - 2) / 2), View.SQUARE_DIM * (Math.floor((board.GRID_HEIGHT - 2) / 2) + 0.25), View.SQUARE_DIM * 3, View.SQUARE_DIM * 1.5);\n      this.ctx.beginPath();\n      this.ctx.stroke();\n      this.ctx.font = "30px Copperplate";\n      this.ctx.lineWidth = 3;\n      let str = "";\n      if (this.game.currentPlayer.team === board.PLAYER_TEAM) {\n        this.ctx.fillStyle = "blue";\n        this.ctx.strokeStyle = "darkblue";\n        str += "Blue";\n      } else {\n        this.ctx.fillStyle = "red";\n        this.ctx.strokeStyle = "maroon";\n        str += "Red";\n      }\n      str += " Victory!";\n      this.ctx.strokeText(str, View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 1), View.SQUARE_DIM * (board.GRID_HEIGHT / 2 - 0.25));\n      this.ctx.fillText(str, View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 1), View.SQUARE_DIM * (board.GRID_HEIGHT / 2 - 0.25));\n      this.drawPlayAgainButton();\n    };\n  }\n  drawPlayAgainButton() {\n    this.ctx.lineWidth = 2;\n    this.ctx.fillStyle = \'cornflowerblue\';\n    this.ctx.strokeStyle = \'#543000\';\n    this.ctx.fillRect(View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 0.75), View.SQUARE_DIM * Math.floor(board.GRID_HEIGHT / 2), View.SQUARE_DIM * 1.5, View.SQUARE_DIM * 0.5);\n    this.ctx.strokeRect(View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 0.75), View.SQUARE_DIM * Math.floor(board.GRID_HEIGHT / 2), View.SQUARE_DIM * 1.5, View.SQUARE_DIM * 0.5);\n    this.ctx.strokeStyle = \'blue\';\n    this.ctx.font = "24px Copperplate";\n    this.ctx.lineWidth = 1;\n    this.ctx.fillStyle = "white";\n    this.ctx.strokeStyle = "grey";\n    this.ctx.strokeText("Play Again?", View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 0.70), View.SQUARE_DIM * (board.GRID_HEIGHT / 2 + 0.3));\n    this.ctx.fillText("Play Again?", View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 0.70), View.SQUARE_DIM * (board.GRID_HEIGHT / 2 + 0.3));\n  }\n  drawUpgradeConfirmation(pos) {\n    this.ctx.fillStyle = \'lightskyblue\';\n    this.ctx.fillRect(View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.35);\n    this.ctx.strokeStyle = \'cornflowerblue\';\n    this.ctx.strokeRect(View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.35);\n    this.ctx.lineWidth = 1;\n    this.ctx.font = "20px Copperplate";\n    this.ctx.fillStyle = "dimgrey";\n    this.ctx.fillText("Upgrade?", View.SQUARE_DIM * pos.x, View.SQUARE_DIM * (pos.y + 0.25));\n  }\n  drawBarrackSelection(pos) {\n    let newPos = this.adjustMenuPosition(pos);\n    this.team === board.ENEMY_TEAM ? this.ctx.fillStyle = "red" : this.ctx.fillStyle = "blue";\n    let troopSelection = [];\n    this.images.barrack.onload(newPos);\n    this.ctx.font = "30px Copperplate";\n    this.ctx.fillStyle = "white";\n    this.ctx.lineWidth = 3;\n    this.ctx.fillText("Buy New Troop?", View.SQUARE_DIM * (newPos.x + 0.35), View.SQUARE_DIM * (newPos.y + 0.35));\n    let inf = new infantry(this.game.currentPlayer.team, {\n      y: newPos.y + 0.5,\n      x: newPos.x\n    });\n    let arch = new archer(this.game.currentPlayer.team, {\n      y: newPos.y + 0.5,\n      x: newPos.x + 1\n    });\n    let def = new defender(this.game.currentPlayer.team, {\n      y: newPos.y + 0.5,\n      x: newPos.x + 2\n    });\n    inf.board = this.game.board;\n    arch.board = this.game.board;\n    def.board = this.game.board;\n    inf.view = this.game.view;\n    arch.view = this.game.view;\n    def.view = this.game.view;\n    troopSelection.push(inf);\n    troopSelection.push(arch);\n    troopSelection.push(def);\n    troopSelection.forEach(unit => {\n      unit.draw(this.ctx, this.game.currentPlayer);\n    });\n    return troopSelection;\n  }\n  adjustMenuPosition(pos) {\n    let newPos = {};\n    pos.x === 0 ? newPos.x = pos.x + 0.25 : newPos.x = pos.x - 2.25;\n    pos.y === 0 ? newPos.y = pos.y + 0.5 : newPos.y = pos.y - 1;\n    return newPos;\n  }\n  drawOutline(pos) {\n    this.ctx.strokeStyle = \'yellow\';\n    this.ctx.lineWidth = 10;\n    this.ctx.strokeRect(View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM, View.SQUARE_DIM);\n  }\n  drawMoveHighlights(pos) {\n    this.drawGridSquare(pos.x, pos.y, \'seagreen\', "mediumseagreen");\n  }\n  drawAttackHighlights(pos) {\n    this.drawGridSquare(pos.x, pos.y, "cornflowerblue", "lightskyblue");\n  }\n  drawGridElems(pos, unitPos, clickedPos) {\n    let gridSquare = this.game.board.grid.get(pos);\n    for (let i = 0; i < gridSquare.length; i++) {\n      gridSquare[i].draw(this.ctx, this.game.currentPlayer, unitPos, clickedPos);\n    }\n    this.ctx.beginPath();\n  }\n  drawGridSquare(x, y, outlineColor, fillColor) {\n    if (fillColor) {\n      this.ctx.fillStyle = fillColor;\n      this.ctx.globalAlpha = 0.60;\n      this.ctx.fillRect(View.SQUARE_DIM * x, View.SQUARE_DIM * y, View.SQUARE_DIM, View.SQUARE_DIM);\n    }\n    this.ctx.strokeStyle = outlineColor;\n    this.ctx.lineWidth = 2;\n    this.ctx.strokeRect(View.SQUARE_DIM * x, View.SQUARE_DIM * y, View.SQUARE_DIM, View.SQUARE_DIM);\n    this.ctx.globalAlpha = 1;\n  }\n  renderImg() {\n    let pixelWidth = board.GRID_WIDTH * View.SQUARE_DIM;\n    let pixelHeight = (board.GRID_HEIGHT + 1) * View.SQUARE_DIM;\n    this.ctx.canvas.width = pixelWidth;\n    this.ctx.canvas.height = pixelHeight;\n    this.ratio = Math.min(window.innerHeight / this.ctx.canvas.height, window.innerWidth / this.ctx.canvas.width);\n    // this.ctx.scale(this.ratio, this.ratio);\n    let images = {};\n    images.background = new Image();\n    images.background.src = "./resources/grass2.png";\n    images.background.onload = (unitPos, clickedPos) => {\n      this.ctx.drawImage(images.background, 0, 0, pixelWidth, pixelHeight, 0, 0, pixelWidth, pixelHeight);\n      this.ctx.beginPath();\n      this.ctx.stroke();\n      this.drawBoardWithoutOnload(unitPos, clickedPos);\n    };\n    images.barrack = new Image();\n    images.barrack.src = "./resources/wood.png";\n    images.barrack.onload = pos => {\n      this.ctx.drawImage(images.barrack, View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM * 3, View.SQUARE_DIM * 1.5);\n      this.ctx.beginPath();\n      this.ctx.stroke();\n    };\n    return images;\n  }\n\n  // background.classList.add(".movesBackground")\n  // module.classList.add(".noMoreMoves");\n  // button.classList.add(".movesButton");\n\n  bindEvents(ctx) {\n    const button = document.querySelector(".button");\n    button.addEventListener("click", this.handleButton.bind(this));\n    const about = document.querySelector(".about");\n    if (about) {\n      about.addEventListener("click", this.handleAbout.bind(this));\n    }\n    const rules = document.querySelector(".rules");\n    if (rules) {\n      rules.addEventListener("click", this.handleRules.bind(this));\n    }\n    ctx.canvas.addEventListener(\'click\', this.handleClick.bind(this));\n    document.addEventListener("click", this.handleBackground.bind(this));\n    this.bindMovesButton();\n  }\n  bindMovesButton() {\n    const movesBackground = document.querySelector(".movesBackground");\n    if (movesBackground) {\n      movesBackground.addEventListener("click", this.handleMovesBackground.bind(this, movesBackground));\n    }\n    ;\n    const movesButton = document.querySelector(".movesButton");\n    if (movesButton) {\n      movesButton.addEventListener("click", this.handleMovesButton.bind(this, movesBackground));\n    }\n    ;\n    return movesButton;\n  }\n  handleAbout(event) {\n    const e = document.querySelector(".abouttitle");\n    this.invisifyButtons();\n    e.style.visibility = \'visible\';\n  }\n  handleRules(event) {\n    const e = document.querySelector(".rulestitle");\n    this.invisifyButtons();\n    e.style.visibility = \'visible\';\n  }\n  handleButton(event) {\n    const e1 = document.querySelector(".about");\n    const e2 = document.querySelector(".rules");\n    this.invisifyButtons();\n    e1.style.visibility = \'visible\';\n    e2.style.visibility = \'visible\';\n  }\n  handleClick(event) {\n    let x = Math.floor(event.offsetX / (View.SQUARE_DIM * this.ratio));\n    let y = Math.floor(event.offsetY / (View.SQUARE_DIM * this.ratio));\n    let xExact = event.offsetX / (View.SQUARE_DIM * this.ratio);\n    let yExact = event.offsetY / (View.SQUARE_DIM * this.ratio);\n    let pos = {\n      y,\n      x\n    };\n    let posExact = {\n      y: yExact,\n      x: xExact\n    };\n    if (this.game.board.isWon()) {\n      //    this.drawWinningScreen();\n      if (willPlayAgain(posExact)) {\n        this.game.resetGame(this);\n        this.drawBoard();\n      }\n    } else {\n      this.drawBoard();\n      if (isOnBoard(pos)) {\n        this.game.ctx.clickedPos = pos;\n        this.game.ctx.exactPos = posExact;\n        this.game.stateMachine();\n      } else if (isButton(posExact)) {\n        this.game.switchPlayers();\n        this.drawBoard();\n      }\n    }\n  }\n  handleBackground(event) {\n    if (!document.querySelector(".background").contains(event.target)) {\n      this.drawBoard();\n      this.game.state = "unselected";\n      const movesBackground = document.querySelector(".movesBackground");\n      if (movesBackground) movesBackground.style.visibility = "hidden";\n    }\n  }\n  handleMovesButton(movesBackground, event) {\n    this.game.switchPlayers();\n    movesBackground.style.visibility = "hidden";\n    this.drawBoard();\n  }\n  handleMovesBackground(movesBackground, event) {\n    if (!document.querySelector(".noMoreMoves").contains(event.target)) {\n      movesBackground.style.visibility = "hidden";\n    }\n  }\n}\nview_defineProperty(View, "SQUARE_DIM", 100);\nfunction drawUpgradeButton(unit, ctx, x, y) {\n  unit.team === board.ENEMY_TEAM ? ctx.fillStyle = "red" : ctx.fillStyle = "blue";\n  ctx.beginPath();\n  ctx.arc(View.SQUARE_DIM * x + View.SQUARE_DIM * .15, View.SQUARE_DIM * y + View.SQUARE_DIM * .15, View.SQUARE_DIM * .1, 0, 2.0 * Math.PI);\n  ctx.fill();\n  ctx.fillStyle = "white";\n  ctx.font = "30px Copperplate";\n  ctx.fillText("+", View.SQUARE_DIM * x + View.SQUARE_DIM * 0.06, View.SQUARE_DIM * y + View.SQUARE_DIM * .22);\n}\nfunction drawStats(unit, ctx, x, y) {\n  unit.team === board.ENEMY_TEAM ? ctx.fillStyle = "red" : ctx.fillStyle = "blue";\n  ctx.font = "35px Copperplate";\n  ctx.strokeStyle = \'dimgrey\';\n  ctx.lineWidth = 3;\n  ctx.strokeText("A" + unit.attack.toString(), View.SQUARE_DIM * x + View.SQUARE_DIM * .3, View.SQUARE_DIM * y + View.SQUARE_DIM * .50);\n  ctx.strokeText("D" + unit.defense.toString(), View.SQUARE_DIM * x + View.SQUARE_DIM * .3, View.SQUARE_DIM * y + View.SQUARE_DIM * .75);\n  ctx.fillText("A" + unit.attack.toString(), View.SQUARE_DIM * x + View.SQUARE_DIM * .3, View.SQUARE_DIM * y + View.SQUARE_DIM * .50);\n  ctx.fillText("D" + unit.defense.toString(), View.SQUARE_DIM * x + View.SQUARE_DIM * .3, View.SQUARE_DIM * y + View.SQUARE_DIM * .75);\n}\npieces_barrack.prototype.draw = function (ctx) {\n  this.team === board.ENEMY_TEAM ? ctx.fillStyle = "red" : ctx.fillStyle = "blue";\n  ctx.fillRect(View.SQUARE_DIM * this.pos.x + View.SQUARE_DIM * .10, View.SQUARE_DIM * this.pos.y + View.SQUARE_DIM * .70, View.SQUARE_DIM * .80, View.SQUARE_DIM * .20);\n  this.image.onload = () => {\n    ctx.drawImage(this.image, View.SQUARE_DIM * this.pos.x, View.SQUARE_DIM * this.pos.y, View.SQUARE_DIM, View.SQUARE_DIM);\n    ctx.beginPath();\n    ctx.stroke();\n  };\n  this.image.onload();\n};\nbase.prototype.draw = function (ctx) {\n  this.team === board.ENEMY_TEAM ? ctx.fillStyle = "red" : ctx.fillStyle = "blue";\n  ctx.beginPath();\n  ctx.arc(View.SQUARE_DIM * this.pos.x + View.SQUARE_DIM * .50, View.SQUARE_DIM * this.pos.y + View.SQUARE_DIM * .50, View.SQUARE_DIM * .35, 0, 2.0 * Math.PI);\n  ctx.fill();\n};\ntreasure.prototype.draw = function (ctx) {\n  this.image.onload = () => {\n    ctx.drawImage(this.image, View.SQUARE_DIM * this.pos.x, View.SQUARE_DIM * this.pos.y, View.SQUARE_DIM, View.SQUARE_DIM);\n    ctx.beginPath();\n    ctx.stroke();\n  };\n  this.image.onload();\n};\nfunction drawUpgradeConfirmation(ctx, pos) {\n  ctx.fillStyle = \'lightskyblue\';\n  ctx.fillRect(View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.35);\n  ctx.strokeStyle = \'cornflowerblue\';\n  ctx.strokeRect(View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.35);\n  ctx.lineWidth = 1;\n  ctx.font = "20px Copperplate";\n  ctx.fillStyle = "dimgrey";\n  ctx.fillText("Upgrade?", View.SQUARE_DIM * pos.x, View.SQUARE_DIM * (pos.y + 0.25));\n}\nunit.prototype.draw = function (ctx, currentPlayer, unitPos, clickedPos) {\n  this.team === board.ENEMY_TEAM ? ctx.fillStyle = "red" : ctx.fillStyle = "blue";\n  this.image.onload = () => {\n    ctx.drawImage(this.image, View.SQUARE_DIM * this.pos.x, View.SQUARE_DIM * this.pos.y, View.SQUARE_DIM, View.SQUARE_DIM);\n    ctx.beginPath();\n    ctx.stroke();\n    drawStats(this, ctx, this.pos.x, this.pos.y);\n    if (this.isUpgradable(currentPlayer)) {\n      drawUpgradeButton(this, ctx, this.pos.x, this.pos.y);\n      if (unitPos && clickedPos) {\n        drawUpgradeConfirmation(ctx, unitPos);\n      }\n    }\n  };\n  this.image.onload();\n  // this.image.src = this.image.src;\n};\n\n/* harmony default export */ var src_view = (View);\n;// CONCATENATED MODULE: ./src/player.js\nclass Player {\n  constructor(team, treasure, base) {\n    this.team = team;\n    this.units = [];\n    this.treasure = treasure;\n    this.base;\n  }\n  removeUnit(unit) {\n    let found = false;\n    let i = 0;\n    while (!found && i < this.units.length) {\n      if (this.units[i++].pos.equals(unit.pos)) {\n        found = true;\n      }\n    }\n    let u = this.units.splice(i - 1, 1);\n    // console.log(this.units, u )\n    return this.units;\n  }\n}\n/* harmony default export */ var player = (Player);\n;// CONCATENATED MODULE: ./src/humanPlayer.js\n\nclass HumanPlayer extends player {\n  constructor(team) {\n    super(team);\n  }\n}\n/* harmony default export */ var humanPlayer = (HumanPlayer);\n;// CONCATENATED MODULE: ./src/game.js\n\n\n\nconst MAX_AP = 4;\nconst MAX_UNITS = 8;\nclass Game {\n  constructor() {\n    this.board = new board();\n    this.view = null;\n    this.state = \'unselected\';\n    this.player = new humanPlayer(board.PLAYER_TEAM);\n    this.enemy = new humanPlayer(board.ENEMY_TEAM);\n    this.currentPlayer = this.player;\n    this.actionPoints = MAX_AP;\n    this.ctx = {}; //{ clickedPos, selectedSquare }\n  }\n\n  resetGame(view) {\n    this.board = new board();\n    this.view = view;\n    this.state = \'unselected\';\n    this.player = new humanPlayer(board.PLAYER_TEAM);\n    this.enemy = new humanPlayer(board.ENEMY_TEAM);\n    this.currentPlayer = this.player;\n    this.actionPoints = MAX_AP;\n    this.ctx = {};\n  }\n  switchPlayers() {\n    this.board.grid.forEach(col => {\n      col.forEach(row => {\n        row.forEach(e => {\n          if (e.parentType() === \'Unit\') {\n            e.hasMoved = false;\n            e.hasAttacked = false;\n            e.hasUpgraded = false;\n          }\n        });\n      });\n    });\n    this.actionPoints = MAX_AP;\n    this.state = \'unselected\';\n    this.currentPlayer === this.player ? this.currentPlayer = this.enemy : this.currentPlayer = this.player;\n  }\n\n  //ctx -> {clickedPos always set, selectedSquare that will be set in unselected stage}\n  stateMachine() {\n    let square = this.board.grid.get(this.ctx.clickedPos);\n    switch (this.state) {\n      case \'unselected\':\n        //if unit upgrade is selected\n        if (this.unitUpgradeable(this.ctx.exactPos, square.last())) {\n          this.ctx.selectedSquare = square;\n          this.state = \'upgrade\';\n        } //if unit is selected\n        else if (this.unitSelected(square.last())) {\n          this.ctx.selectedSquare = square;\n          this.state = \'unit\';\n        } //else if barrack is selected\n        else if (this.actionPoints > 1 && this.currentPlayer.units.length < MAX_UNITS && this.barrackSelected(square.first())) {\n          this.ctx.menu = this.view.drawBarrackSelection(square.first().pos);\n          this.ctx.selectedSquare = square;\n          this.state = \'barrack\';\n        }\n        break;\n      case \'unit\':\n        //if action taken\n        if (this.actionTaken(this.ctx.clickedPos, this.ctx.selectedSquare)) {\n          this.ctx = {};\n          this.state = \'unselected\';\n          // this.view.drawBoard();\n          if (this.board.isWon()) {\n            this.view.drawBoard();\n            this.view.drawWinningScreen();\n          } else {\n            if (this.actionPoints === 0) {\n              this.switchPlayers();\n            }\n            this.view.drawBoard();\n          }\n        } //else if action not taken\n        else {\n          this.redirectState(square);\n          // this.view.drawBoard();\n          // if (this.unitUpgradeable(this.ctx.exactPos, square.last())) {\n          //     this.state = \'upgrade\'\n          // } else if (this.unitSelected(square.last())) {\n          //     this.state = \'unit\';\n          // } else if (this.actionPoints > 1 && this.currentPlayer.units.length < MAX_UNITS\n          //     && this.barrackSelected(square.first())) {\n          //     this.ctx.menu = this.view.drawBarrackSelection(square.first().pos);\n          //     this.state = \'barrack\';\n          // } else {\n          //     this.state = \'unselected\';\n          // }\n          // this.ctx.selectedSquare = square;\n        }\n\n        this.noMoreMovesDisplay();\n        break;\n      case \'barrack\':\n        //if unit is bought\n        if (this.unitBought(this.ctx.exactPos, this.ctx.menu, this.ctx.selectedSquare)) {\n          this.ctx = {};\n          this.state = \'unselected\';\n          if (this.actionPoints === 0) {\n            this.switchPlayers();\n          }\n          this.view.drawBoard();\n        } //else if unit is not bought\n        else {\n          this.redirectState(square);\n        }\n        this.noMoreMovesDisplay();\n        break;\n      case \'upgrade\':\n        //if unit is upgraded\n        if (this.unitUpgraded(this.ctx.exactPos, this.ctx.selectedSquare)) {\n          this.state = \'unselected\';\n          if (this.actionPoints === 0) {\n            this.switchPlayers();\n          }\n          this.view.drawBoard();\n        } else {\n          this.redirectState(square);\n        }\n        this.noMoreMovesDisplay();\n        break;\n      default:\n      // console.log("ERROR: undefined state");\n    }\n  }\n\n  redirectState(square) {\n    console.log(square);\n    this.view.drawBoard();\n    if (this.unitUpgradeable(this.ctx.exactPos, square.last())) {\n      this.state = \'upgrade\';\n    } else if (this.unitSelected(square.last())) {\n      this.state = \'unit\';\n    } else if (this.actionPoints > 1 && this.currentPlayer.units.length < MAX_UNITS && this.barrackSelected(square.first())) {\n      this.ctx.menu = this.view.drawBarrackSelection(square.first().pos);\n      this.state = \'barrack\';\n    } else {\n      this.state = \'unselected\';\n    }\n    this.ctx.selectedSquare = square;\n  }\n  noMoreMovesDisplay() {\n    if (!this.movesAvailable() && this.actionPoints < MAX_AP) {\n      const noMoreMoves = this.view.noMoreMoves.querySelector(".noMoreMoves");\n      const button = noMoreMoves.querySelector(".movesButton");\n      noMoreMoves.innerHTML = this.view.updateNoMoreMovesStr();\n      noMoreMoves.appendChild(button);\n      this.view.noMoreMoves.style.visibility = "visible";\n    }\n  }\n  movesAvailable() {\n    let bool = false;\n    this.currentPlayer.units.forEach(unit => {\n      bool ||= !unit.hasMoved;\n      if (!unit.hasAttacked) {\n        unit.getAttacks();\n      }\n      bool ||= !unit.hasUpgraded && unit.attacks.length > 0;\n      bool ||= this.actionPoints > 1 && unit.isUpgradable(this.currentPlayer);\n      bool ||= this.actionPoints > 1 && this.barracksEmpty();\n    });\n    return bool;\n  }\n  barracksEmpty() {\n    let barracks;\n    if (this.currentPlayer === this.player) {\n      barracks = this.board.barracks.player;\n    } else {\n      barracks = this.board.barracks.enemy;\n    }\n    let res = false;\n    barracks.forEach(b => {\n      let bool = true;\n      const barrackSquare = this.board.grid.get(b.pos);\n      barrackSquare.forEach(unit => {\n        if (unit.parentType() === \'Unit\') bool = false;\n      });\n      res ||= bool;\n    });\n    return res;\n  }\n  unitUpgradeable(pos, unit) {\n    let unitUpgradeable = false;\n    if (this.actionPoints > 1 && unit && unit.parentType() === \'Unit\' && unit.isUpgradable(this.currentPlayer) && isUpgradeButton(unit.pos, pos)) {\n      unitUpgradeable = true;\n      this.view.drawBoard(unit.pos, pos);\n    }\n    return unitUpgradeable;\n  }\n  unitUpgraded(pos, square) {\n    let unitUpgraded = false;\n    let unit = square.last();\n    if (unit && unit.parentType() === \'Unit\' && unit.isUpgradable(this.currentPlayer) && isUpgradeConfirmation(unit.pos, pos)) {\n      unit.upgrades();\n      this.actionPoints -= 2;\n      unitUpgraded = true;\n    }\n    return unitUpgraded;\n  }\n  unitSelected(unit) {\n    let unitSelected = false;\n    if (unit && unit.parentType() === \'Unit\' && unit.team === this.currentPlayer.team) {\n      unit.resetActions(); //reset newly selected unit\'s action squares\n      if (!unit.board) {\n        unit.board = this.board;\n      }\n      if (!unit.view) {\n        unit.view = this.view;\n      }\n      this.unitCallDrawSelected(unit, this.view);\n      unitSelected = true;\n    }\n    return unitSelected;\n  }\n  unitCallDrawSelected(unit, view) {\n    if (!unit.hasMoved) {\n      unit.getMoves().forEach(pos => {\n        view.drawMoveHighlights(pos);\n        view.drawGridElems(pos);\n      });\n    }\n    if (!unit.hasAttacked && !unit.hasUpgraded) {\n      unit.getAttacks().forEach(pos => {\n        view.drawAttackHighlights(pos);\n        view.drawGridElems(pos);\n      });\n    }\n    view.drawOutline(unit.pos);\n  }\n  barrackSelected(barrack) {\n    return barrack && barrack.type() === \'Barrack\' && barrack.team === this.currentPlayer.team;\n  }\n  unitBought(pos, menu, square) {\n    let unitBought = false;\n    let newPos = this.adjustMenuPosition(square.first(), pos);\n    let unit;\n    if (unit = menu.find(e => e.pos.x === newPos.x && e.pos.y === newPos.y)) {\n      unit.pos = square.first().pos;\n      square.push(unit);\n      this.currentPlayer.units.push(unit);\n      this.actionPoints -= 2;\n      unitBought = true;\n    }\n    return unitBought;\n  }\n  adjustMenuPosition(barrack, pos) {\n    let xDifference = barrack.pos.x === 0 ? -0.25 : 0.25;\n    let yDifference = barrack.pos.y === 0 ? -1 : 0.5;\n    let x = Math.floor(pos.x + xDifference);\n    let y = Math.floor(pos.y + yDifference);\n    let newPos = {};\n    newPos.x = barrack.pos.x === 0 ? x + 0.25 : x - 0.25;\n    newPos.y = barrack.pos.y === 0 ? y + 1 : y - 0.5;\n    return newPos;\n  }\n  actionTaken(pos, square) {\n    return this.moveUnit(pos, square) || this.attackUnit(pos, square);\n  }\n  moveUnit(pos, square) {\n    let unitMoved = false;\n    let unit = square.last();\n    if (unit.moves && unit.moves.find(e => e.x === pos.x && e.y === pos.y)) {\n      unit.pos = pos; //reset unit position;\n      if (unit.onHomeTerf()) {\n        unit.downgrade();\n      }\n      square.pop();\n      let treasureIdx = this.getTreasureIdx(square);\n      if (treasureIdx !== null) {\n        square[treasureIdx].pos = pos;\n        this.board.grid.get(pos).push(square[treasureIdx]);\n        square.splice(treasureIdx, 1);\n      }\n      this.board.grid.get(pos).push(unit);\n      this.actionPoints--;\n      unit.hasMoved = true;\n      unitMoved = true;\n    }\n    return unitMoved;\n  }\n  getTreasureIdx(square) {\n    for (let i = 0; i < square.length; i++) {\n      if (square[i].team !== this.currentPlayer.team && square[i].type() === \'Treasure\') {\n        return i;\n      }\n    }\n    return null;\n  }\n  attackUnit(pos, square) {\n    let unitAttacked = false;\n    let unit = square.last();\n    if (unit.attacks && unit.attacks.find(e => e.x === pos.x && e.y === pos.y)) {\n      let attackedSquare = this.board.grid.get(pos);\n      let attackedUnit = attackedSquare.last();\n      attackedUnit.defense -= unit.attack;\n      if (attackedUnit.defense < 1) {\n        attackedSquare.pop();\n        this.currentPlayer.team === this.player.team ? this.enemy.removeUnit(attackedUnit) : this.player.removeUnit(attackedUnit);\n      }\n      this.actionPoints--;\n      unit.hasAttacked = true;\n      unitAttacked = true;\n    }\n    return unitAttacked;\n  }\n}\n/* harmony default export */ var src_game = (Game);\n;// CONCATENATED MODULE: ./src/index.js\n\n\ndocument.addEventListener("DOMContentLoaded", () => {\n  const canvas = document.getElementById(\'treasure-game\');\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n  const ctx = canvas.getContext("2d");\n  const el = document.querySelector(\'.buttons\');\n  const game = new src_game();\n  const view = new src_view(game, ctx, el);\n  game.view = view;\n  view.bindEvents(ctx);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///627\n')},37:function(){eval("// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcuanMiLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXByb2plY3QvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///37\n")}};__webpack_modules__[627]();var __webpack_exports__={};__webpack_modules__[37]()})();