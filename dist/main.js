(function(){"use strict";var __webpack_modules__={627:function(){eval('\n;// CONCATENATED MODULE: ./src/piece.js\nclass Piece {\n  constructor(team, pos) {\n    this.team = team;\n    this.pos = pos;\n    this.image = new Image();\n  }\n  parentType() {\n    return Object.getPrototypeOf(this.constructor).name;\n  }\n  type() {\n    return this.constructor.name;\n  }\n}\n/* harmony default export */ var piece = (Piece);\n;// CONCATENATED MODULE: ./src/pieces/barrack.js\n\nclass Barrack extends piece {\n  constructor(team, pos) {\n    super(team, pos);\n    this.image.src = "./resources/barracks2.png";\n  }\n}\n/* harmony default export */ var pieces_barrack = (Barrack);\n;// CONCATENATED MODULE: ./src/pieces/base.js\n\nclass Base extends piece {\n  constructor(team, pos) {\n    super(team, pos);\n  }\n}\n/* harmony default export */ var base = (Base);\n;// CONCATENATED MODULE: ./src/pieces/treasure.js\n\n\nclass Treasure extends piece {\n  constructor(team, pos) {\n    super(team, pos);\n    this.team === board.PLAYER_TEAM ? this.image.src = "./resources/treasureblue.png" : this.image.src = "./resources/treasurered.png";\n  }\n}\n/* harmony default export */ var treasure = (Treasure);\n;// CONCATENATED MODULE: ./src/board.js\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\nclass Board {\n  //0, 0 is top left corner\n\n  constructor() {\n    let pos1 = {\n      y: Board.GRID_HEIGHT - 1,\n      x: Math.floor(Board.GRID_WIDTH / 2)\n    };\n    let pos2 = {\n      y: 0,\n      x: Math.floor(Board.GRID_WIDTH / 2)\n    };\n    this.treasure = {\n      player: new treasure(Board.PLAYER_TEAM, pos1),\n      enemy: new treasure(Board.ENEMY_TEAM, pos2)\n    };\n    pos1 = {\n      y: 0,\n      x: Math.floor(Board.GRID_WIDTH / 2)\n    };\n    pos2 = {\n      y: Board.GRID_HEIGHT - 1,\n      x: Math.floor(Board.GRID_WIDTH / 2)\n    };\n    this.base = {\n      player: new base(Board.PLAYER_TEAM, pos2),\n      enemy: new base(Board.ENEMY_TEAM, pos1)\n    };\n    this.barracks = {\n      player: [],\n      enemy: []\n    };\n    this.grid = Board.makeGrid(this.treasure, this.base, this.barracks);\n  }\n  static makeGrid(treasure, base, barracks) {\n    let grid = [];\n    for (let i = 0; i < Board.GRID_HEIGHT; i++) {\n      grid.push([]);\n      for (let j = 0; j < Board.GRID_WIDTH; j++) {\n        grid[i].push([]);\n      }\n    }\n    let pos = {\n      y: 0,\n      x: 0\n    };\n    let barrack = new pieces_barrack(Board.ENEMY_TEAM, pos);\n    grid.get(pos).push(barrack);\n    barracks.enemy.push(barrack);\n    pos = {\n      y: 0,\n      x: Board.GRID_WIDTH - 1\n    };\n    barrack = new pieces_barrack(Board.ENEMY_TEAM, pos);\n    grid.get(pos).push(barrack);\n    barracks.enemy.push(barrack);\n    pos = {\n      y: Board.GRID_HEIGHT - 1,\n      x: 0\n    };\n    barrack = new pieces_barrack(Board.PLAYER_TEAM, pos);\n    grid.get(pos).push(barrack);\n    barracks.player.push(barrack);\n    pos = {\n      y: Board.GRID_HEIGHT - 1,\n      x: Board.GRID_WIDTH - 1\n    };\n    barrack = new pieces_barrack(Board.PLAYER_TEAM, pos);\n    grid.get(pos).push(barrack);\n    barracks.player.push(barrack);\n    grid.get(base.enemy.pos).push(base.enemy);\n    grid.get(base.player.pos).push(base.player);\n    grid.get(treasure.enemy.pos).push(treasure.enemy);\n    grid.get(treasure.player.pos).push(treasure.player);\n    return grid;\n  }\n  isWon() {\n    return this.treasure.player.pos.equals(this.base.enemy.pos) || this.treasure.enemy.pos.equals(this.base.player.pos);\n  }\n}\n_defineProperty(Board, "GRID_WIDTH", 7);\n_defineProperty(Board, "GRID_HEIGHT", 8);\n_defineProperty(Board, "PLAYER_TEAM", 1);\n_defineProperty(Board, "ENEMY_TEAM", 2);\n/* harmony default export */ var board = (Board);\n;// CONCATENATED MODULE: ./src/utils.js\n\nfunction isOnBoard(pos) {\n  return pos.x > -1 && pos.x < board.GRID_WIDTH && pos.y > -1 && pos.y < board.GRID_HEIGHT;\n}\nfunction isButton(pos) {\n  return pos.y > board.GRID_HEIGHT + 0.25 && pos.y < board.GRID_HEIGHT + 0.75 && pos.x > 4 && pos.x < 5;\n}\nfunction willPlayAgain(pos) {\n  return pos.x > board.GRID_WIDTH / 2 - 0.75 && pos.x < board.GRID_WIDTH / 2 + 0.75 && pos.y > Math.floor(board.GRID_HEIGHT / 2) && pos.y < Math.floor(board.GRID_HEIGHT / 2) + 0.5;\n}\nfunction isUpgradeButton(squarePos, clickPos) {\n  let x = clickPos.x - squarePos.x;\n  let y = clickPos.y - squarePos.y;\n  return x > 0 && x < 0.25 && y > 0 && y < 0.25;\n}\nfunction isUpgradeConfirmation(squarePos, clickPos) {\n  let x = clickPos.x - squarePos.x;\n  let y = clickPos.y - squarePos.y;\n  return x > 0 && x < 1 && y > 0 && y < 0.25;\n}\nArray.prototype.get = function (pos) {\n  return this[pos.y][pos.x];\n};\nArray.prototype.containsType = function (type) {\n  square.some();\n};\nArray.prototype.last = function () {\n  return this[this.length - 1];\n};\nArray.prototype.first = function () {\n  return this[0];\n};\nObject.prototype.left = function () {\n  return {\n    x: this.x - 1,\n    y: this.y\n  };\n};\nObject.prototype.right = function () {\n  return {\n    x: this.x + 1,\n    y: this.y\n  };\n};\nObject.prototype.up = function () {\n  return {\n    x: this.x,\n    y: this.y - 1\n  };\n};\nObject.prototype.down = function () {\n  return {\n    x: this.x,\n    y: this.y + 1\n  };\n};\nObject.prototype.equals = function (pos) {\n  return this.x === pos.x && this.y === pos.y;\n};\n/* harmony default export */ var utils = (Array);\n;// CONCATENATED MODULE: ./src/pieces/unit.js\n\n\n\nclass Unit extends piece {\n  constructor(team, pos) {\n    super(team, pos);\n    this.attack = null;\n    this.defense = null;\n    this.pointStandard = null;\n    this.upgrade = null;\n    this.level = 1;\n    this.attackDist = 1;\n    this.moves = null;\n    this.attacks = [];\n    this.hasMoved = false;\n    this.hasAttacked = false;\n    this.hasUpgraded = false;\n    this.board = null;\n    this.view = null;\n  }\n  resetActions() {\n    this.moves = null;\n    this.attacks = [];\n  }\n  upgrades() {\n    this.level = 2;\n    this.hasUpgraded = true;\n    this.attack = this.upgrade.attack;\n    this.defense = this.upgrade.defense;\n  }\n  downgrade() {\n    this.level = 1;\n    this.attack = this.pointStandard.attack;\n    this.defense = Math.min(this.pointStandard.defense, this.defense);\n  }\n  getMoves() {\n    this.moves = this.getMovesSetBFS();\n    this.moves.delete(JSON.stringify(this.pos));\n    this.moves = [...this.moves].map(elem => {\n      return JSON.parse(elem);\n    });\n    return this.moves;\n  }\n  getMovesSetDFS() {\n    let validVisited = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Set();\n    let maxDist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    let pos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.pos;\n    if (maxDist === 0) {\n      return validVisited;\n    }\n    for (let y = pos.y - 1; y <= pos.y + 1; y++) {\n      for (let x = pos.x - 1; x <= pos.x + 1; x++) {\n        let newPos = {\n          y: y,\n          x: x\n        };\n        if (isOnBoard(newPos) && !this.hasUnit(newPos)) {\n          if (!validVisited.has(JSON.stringify(newPos))) {\n            validVisited.add(JSON.stringify(newPos));\n          }\n          validVisited = this.getMovesSet(validVisited, maxDist - 1, newPos);\n        }\n      }\n    }\n    return validVisited;\n  }\n  getMovesSetBFS() {\n    let validVisited = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Set();\n    let maxDist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    let pos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.pos;\n    if (maxDist === 0) {\n      return validVisited;\n    }\n    var q = [pos];\n    while (q.length !== 0) {\n      let newPos = q.shift();\n      validVisited.add(JSON.stringify(newPos));\n      this.addToQueue(q, newPos.left(), validVisited, this.isWithinDist(pos, newPos.left(), maxDist));\n      this.addToQueue(q, newPos.right(), validVisited, this.isWithinDist(pos, newPos.right(), maxDist));\n      this.addToQueue(q, newPos.up(), validVisited, this.isWithinDist(pos, newPos.up(), maxDist));\n      this.addToQueue(q, newPos.down(), validVisited, this.isWithinDist(pos, newPos.down(), maxDist));\n    }\n    return validVisited;\n  }\n  addToQueue(q, pos, validVisited, withinDist) {\n    if (isOnBoard(pos) && withinDist && !this.hasUnit(pos) && !validVisited.has(JSON.stringify(pos))) q.push(pos);\n  }\n  isWithinDist(pos, newPos, maxDist) {\n    return Math.abs(pos.x - newPos.x) <= maxDist && Math.abs(pos.y - newPos.y) <= maxDist;\n  }\n  getAttacks() {\n    for (let y = this.pos.y - this.attackDist; y <= this.pos.y + this.attackDist; y++) {\n      for (let x = this.pos.x - this.attackDist; x <= this.pos.x + this.attackDist; x++) {\n        let newPos = {\n          y: y,\n          x: x\n        };\n        if (isOnBoard(newPos)) {\n          let square = this.board.grid.get(newPos);\n          if (this.hasUnit(newPos) && square.last().team !== this.team) {\n            this.attacks.push(newPos);\n          }\n        }\n      }\n    }\n    return this.attacks;\n  }\n  hasUnit(pos) {\n    let square = this.board.grid.get(pos);\n    if (square.length > 0) {\n      let elemType = square.last().parentType();\n      if (elemType === \'Unit\') {\n        return true;\n      }\n    }\n    return false;\n  }\n  isUpgradable(currentPlayer) {\n    return this.team === currentPlayer.team && this.level == 1 && (this.team === board.PLAYER_TEAM && this.pos.y < board.GRID_HEIGHT / 2 || this.team === board.ENEMY_TEAM && this.pos.y >= board.GRID_HEIGHT / 2);\n  }\n  onHomeTurf() {\n    return this.team === board.PLAYER_TEAM && this.pos.y >= board.GRID_HEIGHT / 2 || this.team === board.ENEMY_TEAM && this.pos.y < board.GRID_HEIGHT / 2;\n  }\n}\n/* harmony default export */ var unit = (Unit);\n;// CONCATENATED MODULE: ./src/pieces/units/archer.js\n\nclass Archer extends unit {\n  constructor(team, pos) {\n    super(team, pos);\n    this.attack = 1;\n    this.defense = 1;\n    this.attackDist = 3;\n    this.upgrade = {\n      attack: 2,\n      defense: 2\n    };\n    this.pointStandard = {\n      attack: 1,\n      defense: 1\n    };\n    this.image.src = "./resources/archer.png";\n  }\n}\n/* harmony default export */ var archer = (Archer);\n;// CONCATENATED MODULE: ./src/pieces/units/defender.js\n\nclass Defender extends unit {\n  constructor(team, pos) {\n    super(team, pos);\n    this.attack = 1;\n    this.defense = 3;\n    //if attack is changed to 1, unit.isUpgradable returns true when unit is already upgraded\n    //because it checks if upgraded using attack points. Need to implement different check\n    //if making upgraded attack points equal to standard attack points\n    this.upgrade = {\n      attack: 1,\n      defense: 5\n    };\n    this.pointStandard = {\n      attack: 1,\n      defense: 3\n    };\n    this.image.src = "./resources/defender.png";\n  }\n}\n/* harmony default export */ var defender = (Defender);\n;// CONCATENATED MODULE: ./src/pieces/units/infantry.js\n\nclass Infantry extends unit {\n  constructor(team, pos) {\n    super(team, pos);\n    this.attack = 2;\n    this.defense = 2;\n    this.upgrade = {\n      attack: 4,\n      defense: 3\n    };\n    this.pointStandard = {\n      attack: 2,\n      defense: 2\n    };\n    this.image.src = "./resources/infantry.png";\n  }\n}\n/* harmony default export */ var infantry = (Infantry);\n;// CONCATENATED MODULE: ./src/view.js\nfunction view_defineProperty(obj, key, value) { key = view_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction view_toPropertyKey(arg) { var key = view_toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }\nfunction view_toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n\n\n\n\n\nclass View {\n  constructor(game, ctx, el) {\n    this.game = game;\n    this.el = el;\n    this.ctx = ctx;\n    this.ratio = null;\n    this.images = this.renderImg();\n    this.drawBoard();\n    this.drawMenu({\n      y: board.GRID_HEIGHT,\n      x: board.GRID_WIDTH\n    });\n    this.noMoreMoves = this.drawNoMoreMovesModule();\n  }\n  resetView(game) {\n    this.game = game;\n    this.ratio = null;\n    this.drawBoard();\n  }\n  clearBoard() {\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n  }\n  drawBoard(unitPos, clickedPos) {\n    this.clearBoard();\n    this.invisifyButtons();\n    this.images.background.onload(unitPos, clickedPos);\n  }\n  invisifyButtons() {\n    const e = [];\n    e.push(document.querySelector(".about"));\n    e.push(document.querySelector(".rules"));\n    e.push(document.querySelector(".abouttitle"));\n    e.push(document.querySelector(".rulestitle"));\n    e.forEach(e => {\n      if (e) {\n        e.style.visibility = \'hidden\';\n      }\n    });\n  }\n  drawBoardWithoutOnload(unitPos, clickedPos) {\n    for (let y = 0; y < board.GRID_HEIGHT; y++) {\n      for (let x = 0; x < board.GRID_WIDTH; x++) {\n        this.drawGridSquare(x, y, "darkgreen");\n        this.drawGridElems({\n          y: y,\n          x: x\n        }, unitPos, clickedPos);\n      }\n    }\n    this.drawMidline();\n    this.drawEndTurnButton();\n    this.ctx.font = "40px Copperplate";\n    this.game.currentPlayer.team === board.ENEMY_TEAM ? this.ctx.fillStyle = "red" : this.ctx.fillStyle = "blue";\n    let str = "Action Points: " + this.game.actionPoints.toString();\n    this.ctx.strokeStyle = \'dimgrey\';\n    this.ctx.lineWidth = 3;\n    this.ctx.strokeText(str, 10, (board.GRID_HEIGHT + 0.5) * View.SQUARE_DIM);\n    this.ctx.fillText(str, 10, (board.GRID_HEIGHT + 0.5) * View.SQUARE_DIM);\n    this.ctx.font = "30px Copperplate";\n    str = "Troops: " + this.game.currentPlayer.units.length.toString() + "/8";\n    this.ctx.strokeText(str, 10, (board.GRID_HEIGHT + 0.75) * View.SQUARE_DIM);\n    this.ctx.fillText(str, 10, (board.GRID_HEIGHT + 0.75) * View.SQUARE_DIM);\n  }\n  drawMidline() {\n    this.ctx.strokeStyle = \'lightskyblue\';\n    this.ctx.beginPath();\n    this.ctx.moveTo(0, board.GRID_HEIGHT / 2 * View.SQUARE_DIM);\n    this.ctx.lineTo((board.GRID_HEIGHT - 1) * View.SQUARE_DIM, board.GRID_HEIGHT / 2 * View.SQUARE_DIM);\n    this.ctx.stroke();\n  }\n  drawEndTurnButton() {\n    this.ctx.fillStyle = \'lightskyblue\';\n    this.ctx.fillRect(View.SQUARE_DIM * 4, (board.GRID_HEIGHT + 0.25) * View.SQUARE_DIM, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.5);\n    this.ctx.strokeStyle = \'cornflowerblue\';\n    this.ctx.lineWidth = 1;\n    this.ctx.strokeRect(View.SQUARE_DIM * 4, (board.GRID_HEIGHT + 0.25) * View.SQUARE_DIM, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.5);\n    this.ctx.font = "25px Copperplate";\n    this.ctx.fillStyle = "dimgrey";\n    this.ctx.lineWidth = 2;\n    this.ctx.fillText("End", 4.25 * View.SQUARE_DIM, (board.GRID_HEIGHT + 0.45) * View.SQUARE_DIM);\n    this.ctx.fillText("Turn", 4.15 * View.SQUARE_DIM, (board.GRID_HEIGHT + 0.65) * View.SQUARE_DIM);\n  }\n  drawMenu(pos) {\n    const grid = document.createElement("ul");\n    grid.classList.add("grid");\n\n    // grid.style.position = "absolute";\n    // grid.style.right = "7.5%";\n    grid.style.bottom = "calc(0.2% - 32px)";\n    grid.style.width = "calc(14.29% - 40px)";\n    grid.style.height = "5.85%";\n    const cell = document.createElement("li");\n    cell.classList.add("menu");\n    cell.style.backgroundColor = "lightskyblue";\n    cell.style.border = "1px solid cornflowerblue";\n    cell.style.height = "calc(100% - 2px)";\n    cell.style.width = "calc(100% - 2px)";\n    cell.style.left = "0px";\n    cell.style.listStyle = "none";\n    cell.style.cursor = "pointer";\n    cell.innerHTML = "Test";\n    cell.style.font = 25 * this.ratio + "px Copperplate";\n    cell.style.color = "dimgrey";\n    cell.style.textAlign = "center";\n    cell.style.lineHeight = "200%";\n    cell.classList.add("button");\n    grid.appendChild(cell);\n    // this.el.appendChild(grid);\n    document.getElementsByClassName("background")[0].appendChild(grid);\n    this.drawMenuOptions(pos, cell);\n    const ruleBox = this.drawRules(pos);\n    const aboutBox = this.drawAbout(pos);\n    const windowResize = window.onresize;\n    window.onresize = () => {\n      windowResize();\n      if (this.ratio < 0.67) {\n        this.ratio = 0.67;\n      }\n      ruleBox.style.font = 19 * this.ratio - 2 + "px Copperplate";\n      ruleBox.style.lineHeight = "100%";\n      aboutBox.style.font = 20 * this.ratio - 2 + "px Copperplate";\n      aboutBox.style.lineHeight = "350%";\n    };\n  }\n  drawMenuOptions(pos, cell) {\n    const menu = document.createElement("ul");\n    menu.classList.add("menu");\n\n    // menu.style.position = "absolute";\n    // menu.style.right = "7.5%";\n    menu.style.bottom = "calc(5.85% - 16px)";\n    menu.style.width = "calc(14.29% - 42px)";\n    menu.style.height = "calc(5.85% - 2px)";\n    const rules = document.createElement("li");\n    this.drawButton("Rules", rules, {\n      x: "0%",\n      y: "100%"\n    });\n    rules.classList.add("rules");\n    const about = document.createElement("li");\n    this.drawButton("About", about, {\n      x: "0%",\n      y: "0%"\n    });\n    about.classList.add("about");\n    rules.style.font = 20 * this.ratio + "px Copperplate";\n    rules.style.lineHeight = "250%";\n    about.style.font = 20 * this.ratio + "px Copperplate";\n    about.style.lineHeight = "250%";\n    menu.appendChild(rules);\n    menu.appendChild(about);\n    menu.style.visibility = \'hidden\';\n    window.onresize = () => {\n      this.ratio = Math.min(window.innerHeight / this.ctx.canvas.height, window.innerWidth / this.ctx.canvas.width);\n      if (this.ratio < 0.67) {\n        this.ratio = 0.67;\n      }\n      cell.style.font = 25 * this.ratio + "px Copperplate";\n      cell.style.lineHeight = "200%";\n      rules.style.font = 20 * this.ratio + "px Copperplate";\n      rules.style.lineHeight = "250%";\n      about.style.font = 20 * this.ratio + "px Copperplate";\n      about.style.lineHeight = "250%";\n    };\n\n    // this.el.appendChild(menu);\n    document.getElementsByClassName("background")[0].appendChild(menu);\n  }\n  drawRules(pos) {\n    const title = document.createElement("ul");\n    title.classList.add("rulestitle");\n    this.drawMenuDisplayBox("How To Play&nbsp;&nbsp;&nbsp;", title, title);\n    const rules = document.createElement("li");\n    this.drawMenuInnerDisplayBox("Steal the enemy\'s treasure & bring it back to your base!<p>BUYING | Select the barracks to buy troops. All units can move up to 2 spaces in any direction. There are 3 types of troops:</p>-Infantry: Defense 2, Attack 1, Range 1<br>-Archer: Defense 1, Attack 1, Range 3<br>-Defender: Defense 3, Attack 1, Range 1<br><p>UPGRADING | When in enemy territory, units can be ugraded as follows:</p>-Infantry: Defense +1, Attack +2<br>-Archer: Defense +1, Attack +1<br>-Defender: Defense +2, Attack +0<br><p>Units cannot attack after upgrading until the next round. Stats return to normal once returning to friendly territory.</p><p>TREASURE | Pick up the treasure by moving a unit onto the square containing it. (You can only pick up enemy treasure.)</p><p>PRICE CHART<br>Moving or Attacking: 1 Action Point<br>Buying or Upgrading: 2 Action Points</p>", rules, title);\n    rules.style.font = "12px Copperplate";\n    if (this.ratio < 0.67) {\n      this.ratio = 0.67;\n    }\n    rules.style.font = 19 * this.ratio - 2 + "px Copperplate";\n    rules.style.lineHeight = "100%";\n    rules.classList.add("rulesbox");\n    title.appendChild(rules);\n    // title.style.visibility = \'hidden\'\n    // this.el.appendChild(title);\n    document.getElementsByClassName("background")[0].appendChild(title);\n    return rules;\n  }\n  drawAbout(pos) {\n    const title = document.createElement("ul");\n    title.classList.add("abouttitle");\n    this.drawMenuDisplayBox("About&nbsp;&nbsp;&nbsp;", title, title);\n    const about = document.createElement("li");\n    this.drawMenuInnerDisplayBox("<br><br><p>Game developed by <a href=\'https://www.linkedin.com/in/jdirksen/\'>Jasmine Kobata</a></p><p><a href=\'https://github.com/JasmineKobata/Javascript-Project\'>Treasure Wars! GitHub Repo</p><p><a href=\'https://www.appacademy.io/\'>App Academy</a> Javascript Project</p>", about, title);\n    if (this.ratio < 0.67) {\n      this.ratio = 0.67;\n    }\n    about.style.font = 20 * this.ratio - 2 + "px Copperplate";\n    about.style.lineHeight = "350%";\n    about.classList.add("aboutbox");\n    title.appendChild(about);\n    title.style.visibility = \'hidden\';\n    // this.el.appendChild(title);\n    document.getElementsByClassName("background")[0].appendChild(title);\n    return about;\n  }\n  drawMenuDisplayBox(str, box, title) {\n    box.style.width = "calc(75% - 42px)";\n    box.style.height = "calc(75% - 2px)";\n    box.style.backgroundColor = "lightskyblue";\n    box.style.border = "1px solid cornflowerblue";\n    // box.style.position = "absolute";\n    // box.style.left = "50%";\n    box.style.top = "45%";\n    box.style.transform = "translate(-50%, -50%)";\n    box.style.margin = "0px";\n    box.style.listStyle = "none";\n    box.style.cursor = "pointer";\n    box.innerHTML = str;\n    if (this.ratio < 0.67) {\n      this.ratio = 0.67;\n    }\n    box.style.font = 30 * this.ratio - 2 + "px Copperplate";\n    box.style.color = "dimgrey";\n    box.style.textAlign = "center";\n    box.style.lineHeight = "250%";\n    const windowResize = window.onresize;\n    window.onresize = () => {\n      windowResize();\n      if (this.ratio < 0.67) {\n        this.ratio = 0.67;\n      }\n      box.style.font = 30 * this.ratio - 2 + "px Copperplate";\n      box.style.lineHeight = "250%";\n    };\n  }\n  drawMenuInnerDisplayBox(str, box, title) {\n    box.style.width = "calc(80% - 42px)";\n    box.style.height = "calc(80% - 2px)";\n    box.style.backgroundColor = "cornflowerblue";\n    box.style.border = "1px solid cornflowerblue";\n    // box.style.position = "absolute";\n    // box.style.left = "50%";\n    box.style.top = "50%";\n    box.style.transform = "translate(-50%, -50%)";\n    // box.style.margin = "0px";\n    box.style.listStyle = "none";\n    box.style.cursor = "pointer";\n    box.innerHTML = str;\n    box.style.font = "25px Copperplate";\n    box.style.color = "white";\n  }\n  drawButton(str, cell, pos) {\n    cell.style.backgroundColor = "lightskyblue";\n    cell.style.border = "1px solid cornflowerblue";\n    cell.style.width = "100%";\n    cell.style.height = "100%";\n    cell.style.position = "absolute";\n    cell.style.right = pos.x;\n    cell.style.bottom = pos.y;\n    cell.style.margin = "0px";\n    cell.style.listStyle = "none";\n    cell.style.cursor = "pointer";\n    cell.innerHTML = str;\n    cell.style.color = "dimgrey";\n    cell.style.textAlign = "center";\n  }\n  updateNoMoreMovesStr() {\n    let str = "<br>No Moves Left!</br>";\n    str += this.game.currentPlayer.team === board.PLAYER_TEAM ? "Red" : "Blue";\n    str += "\'s Turn?";\n    return str;\n  }\n  drawNoMoreMovesModule() {\n    const background = document.createElement("div");\n    background.classList.add("movesBackground");\n    background.style.width = "100%";\n    background.style.height = "100%";\n    // background.style.position = "absolute";\n    background.style.top = "0px";\n    background.style.visibility = "hidden";\n    const module = document.createElement("ul");\n    module.classList.add("noMoreMoves");\n    module.style.width = "calc(40% - 42px)";\n    module.style.height = "calc(18% - 2px)";\n    module.style.backgroundColor = "lightskyblue";\n    module.style.border = "1px solid cornflowerblue";\n    // module.style.position = "absolute";\n    module.style.left = "50%";\n    module.style.top = "45%";\n    module.style.transform = "translate(-50%, -50%)";\n    module.style.margin = "0px";\n    module.style.paddingLeft = "10px";\n    module.style.paddingRight = module.style.paddingLeft;\n    module.style.listStyle = "none";\n    module.style.cursor = "pointer";\n    module.style.font = 27 * this.ratio - 2 + "px Copperplate";\n    module.style.color = "dimgrey";\n    module.style.textAlign = "center";\n    const button = document.createElement("li");\n    button.classList.add("movesButton");\n    button.innerHTML = "OK";\n    button.style.width = "50%";\n    button.style.height = "calc(18% - 2px)";\n    button.style.backgroundColor = "cornflowerblue";\n    button.style.border = "1px solid cornflowerblue";\n    button.style.marginLeft = "auto";\n    button.style.marginRight = "auto";\n    button.style.marginTop = "11%";\n    button.style.color = "white";\n    const windowResize = window.onresize;\n    window.onresize = () => {\n      windowResize();\n      if (this.ratio < 0.67) {\n        this.ratio = 0.67;\n      }\n      module.style.font = 27 * this.ratio - 2 + "px Copperplate";\n      // ruleBox.style.lineHeight = "100%"\n    };\n\n    module.appendChild(button);\n    background.appendChild(module);\n    document.getElementsByClassName("background")[0].appendChild(background);\n\n    // this.bindMovesButton();\n    return background;\n  }\n  drawWinningScreen() {\n    let img = new Image();\n    img.src = \'./resources/wood.png\';\n    img.onload = () => {\n      this.ctx.drawImage(img, View.SQUARE_DIM * Math.floor((board.GRID_WIDTH - 2) / 2), View.SQUARE_DIM * (Math.floor((board.GRID_HEIGHT - 2) / 2) + 0.25), View.SQUARE_DIM * 3, View.SQUARE_DIM * 1.5);\n      this.ctx.beginPath();\n      this.ctx.stroke();\n      this.ctx.font = "30px Copperplate";\n      this.ctx.lineWidth = 3;\n      let str = "";\n      if (this.game.currentPlayer.team === board.PLAYER_TEAM) {\n        this.ctx.fillStyle = "blue";\n        this.ctx.strokeStyle = "darkblue";\n        str += "Blue";\n      } else {\n        this.ctx.fillStyle = "red";\n        this.ctx.strokeStyle = "maroon";\n        str += "Red";\n      }\n      str += " Victory!";\n      this.ctx.strokeText(str, View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 1), View.SQUARE_DIM * (board.GRID_HEIGHT / 2 - 0.25));\n      this.ctx.fillText(str, View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 1), View.SQUARE_DIM * (board.GRID_HEIGHT / 2 - 0.25));\n      this.drawPlayAgainButton();\n    };\n  }\n  drawPlayAgainButton() {\n    this.ctx.lineWidth = 2;\n    this.ctx.fillStyle = \'cornflowerblue\';\n    this.ctx.strokeStyle = \'#543000\';\n    this.ctx.fillRect(View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 0.75), View.SQUARE_DIM * Math.floor(board.GRID_HEIGHT / 2), View.SQUARE_DIM * 1.5, View.SQUARE_DIM * 0.5);\n    this.ctx.strokeRect(View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 0.75), View.SQUARE_DIM * Math.floor(board.GRID_HEIGHT / 2), View.SQUARE_DIM * 1.5, View.SQUARE_DIM * 0.5);\n    this.ctx.strokeStyle = \'blue\';\n    this.ctx.font = "24px Copperplate";\n    this.ctx.lineWidth = 1;\n    this.ctx.fillStyle = "white";\n    this.ctx.strokeStyle = "grey";\n    this.ctx.strokeText("Play Again?", View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 0.70), View.SQUARE_DIM * (board.GRID_HEIGHT / 2 + 0.3));\n    this.ctx.fillText("Play Again?", View.SQUARE_DIM * (board.GRID_WIDTH / 2 - 0.70), View.SQUARE_DIM * (board.GRID_HEIGHT / 2 + 0.3));\n  }\n  drawUpgradeConfirmation(pos) {\n    this.ctx.fillStyle = \'lightskyblue\';\n    this.ctx.fillRect(View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.35);\n    this.ctx.strokeStyle = \'cornflowerblue\';\n    this.ctx.strokeRect(View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.35);\n    this.ctx.lineWidth = 1;\n    this.ctx.font = "20px Copperplate";\n    this.ctx.fillStyle = "dimgrey";\n    this.ctx.fillText("Upgrade?", View.SQUARE_DIM * pos.x, View.SQUARE_DIM * (pos.y + 0.25));\n  }\n  drawBarrackSelection(pos) {\n    let newPos = this.adjustMenuPosition(pos);\n    this.team === board.ENEMY_TEAM ? this.ctx.fillStyle = "red" : this.ctx.fillStyle = "blue";\n    let troopSelection = [];\n    this.images.barrack.onload(newPos);\n    this.ctx.font = "30px Copperplate";\n    this.ctx.fillStyle = "white";\n    this.ctx.lineWidth = 3;\n    this.ctx.fillText("Buy New Troop?", View.SQUARE_DIM * (newPos.x + 0.35), View.SQUARE_DIM * (newPos.y + 0.35));\n    let inf = new infantry(this.game.currentPlayer.team, {\n      y: newPos.y + 0.5,\n      x: newPos.x\n    });\n    let arch = new archer(this.game.currentPlayer.team, {\n      y: newPos.y + 0.5,\n      x: newPos.x + 1\n    });\n    let def = new defender(this.game.currentPlayer.team, {\n      y: newPos.y + 0.5,\n      x: newPos.x + 2\n    });\n    inf.board = this.game.board;\n    arch.board = this.game.board;\n    def.board = this.game.board;\n    inf.view = this.game.view;\n    arch.view = this.game.view;\n    def.view = this.game.view;\n    troopSelection.push(inf);\n    troopSelection.push(arch);\n    troopSelection.push(def);\n    troopSelection.forEach(unit => {\n      unit.draw(this.ctx, this.game.currentPlayer);\n    });\n    return troopSelection;\n  }\n  adjustMenuPosition(pos) {\n    let newPos = {};\n    pos.x === 0 ? newPos.x = pos.x + 0.25 : newPos.x = pos.x - 2.25;\n    pos.y === 0 ? newPos.y = pos.y + 0.5 : newPos.y = pos.y - 1;\n    return newPos;\n  }\n  drawOutline(pos) {\n    this.ctx.strokeStyle = \'yellow\';\n    this.ctx.lineWidth = 10;\n    this.ctx.strokeRect(View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM, View.SQUARE_DIM);\n  }\n  drawMoveHighlights(pos) {\n    this.drawGridSquare(pos.x, pos.y, \'seagreen\', "mediumseagreen");\n  }\n  drawAttackHighlights(pos) {\n    this.drawGridSquare(pos.x, pos.y, "cornflowerblue", "lightskyblue");\n  }\n  drawGridElems(pos, unitPos, clickedPos) {\n    let gridSquare = this.game.board.grid.get(pos);\n    for (let i = 0; i < gridSquare.length; i++) {\n      gridSquare[i].draw(this.ctx, this.game.currentPlayer, unitPos, clickedPos);\n    }\n    this.ctx.beginPath();\n  }\n  drawGridSquare(x, y, outlineColor, fillColor) {\n    if (fillColor) {\n      this.ctx.fillStyle = fillColor;\n      this.ctx.globalAlpha = 0.60;\n      this.ctx.fillRect(View.SQUARE_DIM * x, View.SQUARE_DIM * y, View.SQUARE_DIM, View.SQUARE_DIM);\n    }\n    this.ctx.strokeStyle = outlineColor;\n    this.ctx.lineWidth = 2;\n    this.ctx.strokeRect(View.SQUARE_DIM * x, View.SQUARE_DIM * y, View.SQUARE_DIM, View.SQUARE_DIM);\n    this.ctx.globalAlpha = 1;\n  }\n  renderImg() {\n    let pixelWidth = board.GRID_WIDTH * View.SQUARE_DIM;\n    let pixelHeight = (board.GRID_HEIGHT + 1) * View.SQUARE_DIM;\n    this.ctx.canvas.width = pixelWidth;\n    this.ctx.canvas.height = pixelHeight;\n    this.ratio = Math.min(window.innerHeight / this.ctx.canvas.height, window.innerWidth / this.ctx.canvas.width);\n    // this.ctx.scale(this.ratio, this.ratio);\n    let images = {};\n    images.background = new Image();\n    images.background.src = "./resources/grass2.png";\n    images.background.onload = (unitPos, clickedPos) => {\n      this.ctx.drawImage(images.background, 0, 0, pixelWidth, pixelHeight, 0, 0, pixelWidth, pixelHeight);\n      this.ctx.beginPath();\n      this.ctx.stroke();\n      this.drawBoardWithoutOnload(unitPos, clickedPos);\n    };\n    images.barrack = new Image();\n    images.barrack.src = "./resources/wood.png";\n    images.barrack.onload = pos => {\n      this.ctx.drawImage(images.barrack, View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM * 3, View.SQUARE_DIM * 1.5);\n      this.ctx.beginPath();\n      this.ctx.stroke();\n    };\n    return images;\n  }\n\n  // background.classList.add(".movesBackground")\n  // module.classList.add(".noMoreMoves");\n  // button.classList.add(".movesButton");\n\n  bindEvents(ctx) {\n    const button = document.querySelector(".button");\n    button.addEventListener("click", this.handleButton.bind(this));\n    const about = document.querySelector(".about");\n    if (about) {\n      about.addEventListener("click", this.handleAbout.bind(this));\n    }\n    const rules = document.querySelector(".rules");\n    if (rules) {\n      rules.addEventListener("click", this.handleRules.bind(this));\n    }\n    ctx.canvas.addEventListener(\'click\', this.handleClick.bind(this));\n    document.addEventListener("click", this.handleBackground.bind(this));\n    this.bindMovesButton();\n  }\n  bindMovesButton() {\n    const movesBackground = document.querySelector(".movesBackground");\n    if (movesBackground) {\n      movesBackground.addEventListener("click", this.handleMovesBackground.bind(this, movesBackground));\n    }\n    ;\n    const movesButton = document.querySelector(".movesButton");\n    if (movesButton) {\n      movesButton.addEventListener("click", this.handleMovesButton.bind(this, movesBackground));\n    }\n    ;\n    return movesButton;\n  }\n  handleAbout(event) {\n    const e = document.querySelector(".abouttitle");\n    this.invisifyButtons();\n    e.style.visibility = \'visible\';\n  }\n  handleRules(event) {\n    const e = document.querySelector(".rulestitle");\n    this.invisifyButtons();\n    e.style.visibility = \'visible\';\n  }\n  handleButton(event) {\n    const e1 = document.querySelector(".about");\n    const e2 = document.querySelector(".rules");\n    this.invisifyButtons();\n    e1.style.visibility = \'visible\';\n    e2.style.visibility = \'visible\';\n  }\n  handleClick(event) {\n    let x = Math.floor(event.offsetX / (View.SQUARE_DIM * this.ratio));\n    let y = Math.floor(event.offsetY / (View.SQUARE_DIM * this.ratio));\n    let xExact = event.offsetX / (View.SQUARE_DIM * this.ratio);\n    let yExact = event.offsetY / (View.SQUARE_DIM * this.ratio);\n    let pos = {\n      y,\n      x\n    };\n    let posExact = {\n      y: yExact,\n      x: xExact\n    };\n    if (this.game.board.isWon()) {\n      //    this.drawWinningScreen();\n      if (willPlayAgain(posExact)) {\n        this.game.resetGame(this);\n        this.drawBoard();\n      }\n    } else {\n      this.drawBoard();\n      if (isOnBoard(pos)) {\n        this.game.ctx.clickedPos = pos;\n        this.game.ctx.exactPos = posExact;\n        this.game.callStateMachine();\n      } else if (isButton(posExact)) {\n        this.game.switchPlayers();\n        this.drawBoard();\n      }\n    }\n  }\n  handleBackground(event) {\n    if (!document.querySelector(".background").contains(event.target)) {\n      this.drawBoard();\n      this.game.state = "unselected";\n      const movesBackground = document.querySelector(".movesBackground");\n      if (movesBackground) movesBackground.style.visibility = "hidden";\n    }\n  }\n  handleMovesButton(movesBackground, event) {\n    this.game.switchPlayers();\n    movesBackground.style.visibility = "hidden";\n    this.drawBoard();\n  }\n  handleMovesBackground(movesBackground, event) {\n    if (!document.querySelector(".noMoreMoves").contains(event.target)) {\n      movesBackground.style.visibility = "hidden";\n    }\n  }\n}\nview_defineProperty(View, "SQUARE_DIM", 100);\nfunction drawUpgradeButton(unit, ctx, x, y) {\n  unit.team === board.ENEMY_TEAM ? ctx.fillStyle = "red" : ctx.fillStyle = "blue";\n  ctx.beginPath();\n  ctx.arc(View.SQUARE_DIM * x + View.SQUARE_DIM * .15, View.SQUARE_DIM * y + View.SQUARE_DIM * .15, View.SQUARE_DIM * .1, 0, 2.0 * Math.PI);\n  ctx.fill();\n  ctx.fillStyle = "white";\n  ctx.font = "30px Copperplate";\n  ctx.fillText("+", View.SQUARE_DIM * x + View.SQUARE_DIM * 0.06, View.SQUARE_DIM * y + View.SQUARE_DIM * .22);\n}\nfunction drawStats(unit, ctx, x, y) {\n  unit.team === board.ENEMY_TEAM ? ctx.fillStyle = "red" : ctx.fillStyle = "blue";\n  ctx.font = "35px Copperplate";\n  ctx.strokeStyle = \'dimgrey\';\n  ctx.lineWidth = 3;\n  ctx.strokeText("A" + unit.attack.toString(), View.SQUARE_DIM * x + View.SQUARE_DIM * .3, View.SQUARE_DIM * y + View.SQUARE_DIM * .50);\n  ctx.strokeText("D" + unit.defense.toString(), View.SQUARE_DIM * x + View.SQUARE_DIM * .3, View.SQUARE_DIM * y + View.SQUARE_DIM * .75);\n  ctx.fillText("A" + unit.attack.toString(), View.SQUARE_DIM * x + View.SQUARE_DIM * .3, View.SQUARE_DIM * y + View.SQUARE_DIM * .50);\n  ctx.fillText("D" + unit.defense.toString(), View.SQUARE_DIM * x + View.SQUARE_DIM * .3, View.SQUARE_DIM * y + View.SQUARE_DIM * .75);\n}\npieces_barrack.prototype.draw = function (ctx) {\n  this.team === board.ENEMY_TEAM ? ctx.fillStyle = "red" : ctx.fillStyle = "blue";\n  ctx.fillRect(View.SQUARE_DIM * this.pos.x + View.SQUARE_DIM * .10, View.SQUARE_DIM * this.pos.y + View.SQUARE_DIM * .70, View.SQUARE_DIM * .80, View.SQUARE_DIM * .20);\n  this.image.onload = () => {\n    ctx.drawImage(this.image, View.SQUARE_DIM * this.pos.x, View.SQUARE_DIM * this.pos.y, View.SQUARE_DIM, View.SQUARE_DIM);\n    ctx.beginPath();\n    ctx.stroke();\n  };\n  this.image.onload();\n};\nbase.prototype.draw = function (ctx) {\n  this.team === board.ENEMY_TEAM ? ctx.fillStyle = "red" : ctx.fillStyle = "blue";\n  ctx.beginPath();\n  ctx.arc(View.SQUARE_DIM * this.pos.x + View.SQUARE_DIM * .50, View.SQUARE_DIM * this.pos.y + View.SQUARE_DIM * .50, View.SQUARE_DIM * .35, 0, 2.0 * Math.PI);\n  ctx.fill();\n};\ntreasure.prototype.draw = function (ctx) {\n  this.image.onload = () => {\n    ctx.drawImage(this.image, View.SQUARE_DIM * this.pos.x, View.SQUARE_DIM * this.pos.y, View.SQUARE_DIM, View.SQUARE_DIM);\n    ctx.beginPath();\n    ctx.stroke();\n  };\n  this.image.onload();\n};\nfunction drawUpgradeConfirmation(ctx, pos) {\n  ctx.fillStyle = \'lightskyblue\';\n  ctx.fillRect(View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.35);\n  ctx.strokeStyle = \'cornflowerblue\';\n  ctx.strokeRect(View.SQUARE_DIM * pos.x, View.SQUARE_DIM * pos.y, View.SQUARE_DIM * 1, View.SQUARE_DIM * 0.35);\n  ctx.lineWidth = 1;\n  ctx.font = "20px Copperplate";\n  ctx.fillStyle = "dimgrey";\n  ctx.fillText("Upgrade?", View.SQUARE_DIM * pos.x, View.SQUARE_DIM * (pos.y + 0.25));\n}\nunit.prototype.draw = function (ctx, currentPlayer, unitPos, clickedPos) {\n  this.team === board.ENEMY_TEAM ? ctx.fillStyle = "red" : ctx.fillStyle = "blue";\n  this.image.onload = () => {\n    ctx.drawImage(this.image, View.SQUARE_DIM * this.pos.x, View.SQUARE_DIM * this.pos.y, View.SQUARE_DIM, View.SQUARE_DIM);\n    ctx.beginPath();\n    ctx.stroke();\n    drawStats(this, ctx, this.pos.x, this.pos.y);\n    if (this.isUpgradable(currentPlayer)) {\n      drawUpgradeButton(this, ctx, this.pos.x, this.pos.y);\n      if (unitPos && clickedPos) {\n        drawUpgradeConfirmation(ctx, unitPos);\n      }\n    }\n  };\n  this.image.onload();\n  // this.image.src = this.image.src;\n};\n\n/* harmony default export */ var src_view = (View);\n;// CONCATENATED MODULE: ./src/player.js\nclass Player {\n  constructor(team, treasure, base) {\n    this.team = team;\n    this.units = [];\n    this.treasure = treasure;\n    this.base;\n  }\n  removeUnit(unit) {\n    let found = false;\n    let i = 0;\n    while (!found && i < this.units.length) {\n      if (this.units[i++].pos.equals(unit.pos)) {\n        found = true;\n      }\n    }\n    this.units.splice(i - 1, 1);\n    // console.log(this.units, u )\n    return this.units;\n  }\n  type() {\n    return this.constructor.name;\n  }\n}\n/* harmony default export */ var player = (Player);\n;// CONCATENATED MODULE: ./src/humanPlayer.js\n\nclass HumanPlayer extends player {\n  constructor(team, treasure) {\n    super(team, treasure);\n  }\n}\n/* harmony default export */ var humanPlayer = (HumanPlayer);\n;// CONCATENATED MODULE: ./src/game.js\n\n\n\nconst MAX_AP = 4;\nconst MAX_UNITS = 8;\nclass Game {\n  constructor() {\n    this.view = null;\n    this.setGame();\n    // this.setConnection();\n  }\n\n  resetGame(view) {\n    this.view = view;\n    this.setGame();\n  }\n  setGame() {\n    this.board = new board();\n    this.state = \'unselected\';\n    this.player = new humanPlayer(board.PLAYER_TEAM, this.board.treasure.player);\n    this.enemy = new humanPlayer(board.ENEMY_TEAM, this.board.treasure.enemy);\n    console.log(this.player);\n    this.currentPlayer = this.player;\n    this.actionPoints = MAX_AP;\n    this.ctx = {}; //{ clickedPos, selectedSquare }\n  }\n\n  //Next Steps:\n  //- check if player treasure gets updated when treasure changes position\n  //- if no units exist, buy unit\n\n  setConnection() {\n    reply = "";\n    conn = new Socket();\n\n    // if (conn.open("http://127.0.0.1:5500/index.html")) {\n    //     console.log("HI");\n    //     // conn.write("GET /index.html HTTP/1.0\\n\\n");\n    //     // reply = conn.read(999999);\n    //     conn.close();\n    // }\n  }\n\n  switchPlayers() {\n    this.board.grid.forEach(col => {\n      col.forEach(row => {\n        row.forEach(e => {\n          if (e.parentType() === \'Unit\') {\n            e.hasMoved = false;\n            e.hasAttacked = false;\n            e.hasUpgraded = false;\n          }\n        });\n      });\n    });\n    this.actionPoints = MAX_AP;\n    this.state = \'unselected\';\n    this.currentPlayer === this.player ? this.currentPlayer = this.enemy : this.currentPlayer = this.player;\n  }\n  callStateMachine() {\n    if (this.currentPlayer.type() === \'HumanPlayer\') this.stateMachine(this.board.grid.get(this.ctx.clickedPos));else this.stateMachine(this.currentPlayer.chooseMove());\n  }\n\n  //ctx -> {clickedPos always set, selectedSquare that will be set in unselected stage}\n  stateMachine(square) {\n    // let square = this.board.grid.get(this.ctx.clickedPos);\n\n    switch (this.state) {\n      case \'unselected\':\n        this.redirectState(square);\n        break;\n      case \'unit\':\n        //if action taken\n        if (this.actionTaken(this.ctx.clickedPos, this.ctx.selectedSquare)) {\n          this.ctx = {};\n          this.state = \'unselected\';\n          // this.view.drawBoard();\n          if (this.board.isWon()) {\n            this.view.drawBoard();\n            this.view.drawWinningScreen();\n          } else {\n            if (this.actionPoints === 0) {\n              this.switchPlayers();\n            }\n            this.view.drawBoard();\n          }\n        } //else if action not taken\n        else {\n          this.redirectState(square);\n        }\n        this.noMoreMovesDisplay();\n        break;\n      case \'barrack\':\n        //if unit is bought\n        if (this.unitBought(this.ctx.exactPos, this.ctx.menu, this.ctx.selectedSquare)) {\n          this.ctx = {};\n          this.state = \'unselected\';\n          if (this.actionPoints === 0) {\n            this.switchPlayers();\n          }\n          this.view.drawBoard();\n        } //else if unit is not bought\n        else {\n          this.redirectState(square);\n        }\n        this.noMoreMovesDisplay();\n        break;\n      case \'upgrade\':\n        //if unit is upgraded\n        if (this.unitUpgraded(this.ctx.exactPos, this.ctx.selectedSquare)) {\n          this.state = \'unselected\';\n          if (this.actionPoints === 0) {\n            this.switchPlayers();\n          }\n          this.view.drawBoard();\n        } else {\n          this.redirectState(square);\n        }\n        this.noMoreMovesDisplay();\n        break;\n      default:\n      // console.log("ERROR: undefined state");\n    }\n  }\n\n  redirectState(square) {\n    this.view.drawBoard();\n    //if unit upgrade is selected\n    if (this.unitUpgradeable(this.ctx.exactPos, square.last())) {\n      this.state = \'upgrade\';\n    } //if unit is selected\n    else if (this.unitSelected(square.last())) {\n      this.state = \'unit\';\n    } //else if barrack is selected\n    else if (this.actionPoints > 1 && this.currentPlayer.units.length < MAX_UNITS && this.barrackSelected(square.first())) {\n      this.ctx.menu = this.view.drawBarrackSelection(square.first().pos);\n      this.state = \'barrack\';\n    } else {\n      this.state = \'unselected\';\n    }\n    this.ctx.selectedSquare = square;\n  }\n  noMoreMovesDisplay() {\n    if (!this.movesAvailable() && this.actionPoints < MAX_AP) {\n      const noMoreMoves = this.view.noMoreMoves.querySelector(".noMoreMoves");\n      const button = noMoreMoves.querySelector(".movesButton");\n      noMoreMoves.innerHTML = this.view.updateNoMoreMovesStr();\n      noMoreMoves.appendChild(button);\n      this.view.noMoreMoves.style.visibility = "visible";\n    }\n  }\n  movesAvailable() {\n    let bool = false;\n    this.currentPlayer.units.forEach(unit => {\n      bool ||= !unit.hasMoved;\n      if (!unit.hasAttacked) {\n        unit.getAttacks();\n      }\n      bool ||= !unit.hasUpgraded && unit.attacks.length > 0;\n      bool ||= this.actionPoints > 1 && unit.isUpgradable(this.currentPlayer);\n      bool ||= this.actionPoints > 1 && this.barracksEmpty();\n    });\n    return bool;\n  }\n  barracksEmpty() {\n    let barracks;\n    if (this.currentPlayer === this.player) {\n      barracks = this.board.barracks.player;\n    } else {\n      barracks = this.board.barracks.enemy;\n    }\n    let res = false;\n    barracks.forEach(b => {\n      let bool = true;\n      const barrackSquare = this.board.grid.get(b.pos);\n      barrackSquare.forEach(unit => {\n        if (unit.parentType() === \'Unit\') bool = false;\n      });\n      res ||= bool;\n    });\n    return res;\n  }\n  unitUpgradeable(pos, unit) {\n    let unitUpgradeable = false;\n    if (this.actionPoints > 1 && unit && unit.parentType() === \'Unit\' && unit.isUpgradable(this.currentPlayer) && isUpgradeButton(unit.pos, pos)) {\n      unitUpgradeable = true;\n      this.view.drawBoard(unit.pos, pos);\n    }\n    return unitUpgradeable;\n  }\n  unitUpgraded(pos, square) {\n    let unitUpgraded = false;\n    let unit = square.last();\n    if (unit && unit.parentType() === \'Unit\' && unit.isUpgradable(this.currentPlayer) && isUpgradeConfirmation(unit.pos, pos)) {\n      unit.upgrades();\n      this.actionPoints -= 2;\n      unitUpgraded = true;\n    }\n    return unitUpgraded;\n  }\n  unitSelected(unit) {\n    let unitSelected = false;\n    if (unit && unit.parentType() === \'Unit\' && unit.team === this.currentPlayer.team) {\n      unit.resetActions(); //reset newly selected unit\'s action squares\n      if (!unit.board) {\n        unit.board = this.board;\n      }\n      if (!unit.view) {\n        unit.view = this.view;\n      }\n      this.unitCallDrawSelected(unit, this.view);\n      unitSelected = true;\n    }\n    return unitSelected;\n  }\n  unitCallDrawSelected(unit, view) {\n    if (!unit.hasMoved) {\n      unit.getMoves().forEach(pos => {\n        view.drawMoveHighlights(pos);\n        view.drawGridElems(pos);\n      });\n    }\n    if (!unit.hasAttacked && !unit.hasUpgraded) {\n      unit.getAttacks().forEach(pos => {\n        view.drawAttackHighlights(pos);\n        view.drawGridElems(pos);\n      });\n    }\n    view.drawOutline(unit.pos);\n  }\n  barrackSelected(barrack) {\n    return barrack && barrack.type() === \'Barrack\' && barrack.team === this.currentPlayer.team;\n  }\n  unitBought(pos, menu, square) {\n    let unitBought = false;\n    let newPos = this.adjustMenuPosition(square.first(), pos);\n    let unit;\n    if (unit = menu.find(e => e.pos.x === newPos.x && e.pos.y === newPos.y)) {\n      unit.pos = square.first().pos;\n      square.push(unit);\n      this.currentPlayer.units.push(unit);\n      this.actionPoints -= 2;\n      unitBought = true;\n    }\n    return unitBought;\n  }\n  adjustMenuPosition(barrack, pos) {\n    let xDifference = barrack.pos.x === 0 ? -0.25 : 0.25;\n    let yDifference = barrack.pos.y === 0 ? -1 : 0.5;\n    let x = Math.floor(pos.x + xDifference);\n    let y = Math.floor(pos.y + yDifference);\n    let newPos = {};\n    newPos.x = barrack.pos.x === 0 ? x + 0.25 : x - 0.25;\n    newPos.y = barrack.pos.y === 0 ? y + 1 : y - 0.5;\n    return newPos;\n  }\n  actionTaken(pos, square) {\n    return this.moveUnit(pos, square) || this.attackUnit(pos, square);\n  }\n  moveUnit(pos, square) {\n    let unitMoved = false;\n    let unit = square.last();\n    if (unit.moves && unit.moves.find(e => e.x === pos.x && e.y === pos.y)) {\n      unit.pos = pos; //reset unit position;\n      if (unit.onHomeTurf()) {\n        unit.downgrade();\n      }\n      square.pop();\n      let treasureIdx = this.getTreasureIdx(square);\n      if (treasureIdx !== null) {\n        square[treasureIdx].pos = pos;\n        this.board.grid.get(pos).push(square[treasureIdx]);\n        square.splice(treasureIdx, 1);\n      }\n      this.board.grid.get(pos).push(unit);\n      this.actionPoints--;\n      unit.hasMoved = true;\n      unitMoved = true;\n      console.log(this.player);\n    }\n    return unitMoved;\n  }\n  getTreasureIdx(square) {\n    for (let i = 0; i < square.length; i++) {\n      if (square[i].team !== this.currentPlayer.team && square[i].type() === \'Treasure\') {\n        return i;\n      }\n    }\n    return null;\n  }\n  attackUnit(pos, square) {\n    let unitAttacked = false;\n    let unit = square.last();\n    if (unit.attacks && unit.attacks.find(e => e.x === pos.x && e.y === pos.y)) {\n      let attackedSquare = this.board.grid.get(pos);\n      let attackedUnit = attackedSquare.last();\n      attackedUnit.defense -= unit.attack;\n      if (attackedUnit.defense < 1) {\n        attackedSquare.pop();\n        this.currentPlayer.team === this.player.team ? this.enemy.removeUnit(attackedUnit) : this.player.removeUnit(attackedUnit);\n      }\n      this.actionPoints--;\n      unit.hasAttacked = true;\n      unitAttacked = true;\n    }\n    return unitAttacked;\n  }\n}\n/* harmony default export */ var src_game = (Game);\n;// CONCATENATED MODULE: ./src/index.js\n\n\ndocument.addEventListener("DOMContentLoaded", () => {\n  const canvas = document.getElementById(\'treasure-game\');\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n  const ctx = canvas.getContext("2d");\n  const el = document.querySelector(\'.buttons\');\n  const game = new src_game();\n  const view = new src_view(game, ctx, el);\n  game.view = view;\n  view.bindEvents(ctx);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SSxHQUFHLElBQUkySixRQUFJLEVBQUU7RUFDdkIsTUFBTWhNLElBQUksR0FBRyxJQUFJb0MsUUFBSSxDQUFDQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsRUFBRSxDQUFDO0VBQ3BDRixJQUFJLENBQUNyQyxJQUFJLEdBQUdBLElBQUk7RUFFaEJBLElBQUksQ0FBQ3dKLFVBQVUsQ0FBQ2xILEdBQUcsQ0FBQztBQUN4QixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXByb2plY3QvLi9zcmMvcGllY2UuanM/NmMxYiIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXByb2plY3QvLi9zcmMvcGllY2VzL2JhcnJhY2suanM/YmI3MSIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXByb2plY3QvLi9zcmMvcGllY2VzL2Jhc2UuanM/Y2I5NCIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXByb2plY3QvLi9zcmMvcGllY2VzL3RyZWFzdXJlLmpzPzMwOTUiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1wcm9qZWN0Ly4vc3JjL2JvYXJkLmpzPzIzZGIiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1wcm9qZWN0Ly4vc3JjL3V0aWxzLmpzPzAyNWUiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1wcm9qZWN0Ly4vc3JjL3BpZWNlcy91bml0LmpzP2U1YTUiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1wcm9qZWN0Ly4vc3JjL3BpZWNlcy91bml0cy9hcmNoZXIuanM/ZTYxZiIsIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXByb2plY3QvLi9zcmMvcGllY2VzL3VuaXRzL2RlZmVuZGVyLmpzPzlkNDIiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1wcm9qZWN0Ly4vc3JjL3BpZWNlcy91bml0cy9pbmZhbnRyeS5qcz84ODRlIiwid2VicGFjazovL2phdmFzY3JpcHQtcHJvamVjdC8uL3NyYy92aWV3LmpzP2YwNzgiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1wcm9qZWN0Ly4vc3JjL3BsYXllci5qcz9hOGEyIiwid2VicGFjazovL2phdmFzY3JpcHQtcHJvamVjdC8uL3NyYy9odW1hblBsYXllci5qcz8wNzM3Iiwid2VicGFjazovL2phdmFzY3JpcHQtcHJvamVjdC8uL3NyYy9nYW1lLmpzPzdkZTAiLCJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1wcm9qZWN0Ly4vc3JjL2luZGV4LmpzP2I2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgUGllY2Uge1xuICAgIGNvbnN0cnVjdG9yKHRlYW0sIHBvcywgKSB7XG4gICAgICAgIHRoaXMudGVhbSA9IHRlYW07XG4gICAgICAgIHRoaXMucG9zID0gcG9zXG4gICAgICAgIHRoaXMuaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICB9XG5cbiAgICBwYXJlbnRUeXBlKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMuY29uc3RydWN0b3IpLm5hbWU7XG4gICAgfVxuXG4gICAgdHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBpZWNlOyIsImltcG9ydCBQaWVjZSBmcm9tIFwiLi4vcGllY2VcIjtcblxuY2xhc3MgQmFycmFjayBleHRlbmRzIFBpZWNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZWFtLCBwb3MpIHtcbiAgICAgICAgc3VwZXIodGVhbSwgcG9zKTtcbiAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcIi4vcmVzb3VyY2VzL2JhcnJhY2tzMi5wbmdcIjtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJhcnJhY2s7IiwiaW1wb3J0IFBpZWNlIGZyb20gXCIuLi9waWVjZVwiO1xuXG5jbGFzcyBCYXNlIGV4dGVuZHMgUGllY2Uge1xuICAgIGNvbnN0cnVjdG9yKHRlYW0sIHBvcykge1xuICAgICAgICBzdXBlcih0ZWFtLCBwb3MpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmFzZTsiLCJpbXBvcnQgUGllY2UgZnJvbSBcIi4uL3BpZWNlXCI7XG5pbXBvcnQgQm9hcmQgZnJvbSBcIi4uL2JvYXJkXCI7XG5cbmNsYXNzIFRyZWFzdXJlIGV4dGVuZHMgUGllY2Uge1xuICAgIGNvbnN0cnVjdG9yKHRlYW0sIHBvcykge1xuICAgICAgICBzdXBlcih0ZWFtLCBwb3MpO1xuICAgICAgICB0aGlzLnRlYW0gPT09IEJvYXJkLlBMQVlFUl9URUFNID8gdGhpcy5pbWFnZS5zcmMgPSBcIi4vcmVzb3VyY2VzL3RyZWFzdXJlYmx1ZS5wbmdcIiA6IHRoaXMuaW1hZ2Uuc3JjID0gXCIuL3Jlc291cmNlcy90cmVhc3VyZXJlZC5wbmdcIjtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRyZWFzdXJlOyIsImltcG9ydCBCYXJyYWNrIGZyb20gXCIuL3BpZWNlcy9iYXJyYWNrXCI7XG5pbXBvcnQgQmFzZSBmcm9tIFwiLi9waWVjZXMvYmFzZVwiO1xuaW1wb3J0IFRyZWFzdXJlIGZyb20gXCIuL3BpZWNlcy90cmVhc3VyZVwiO1xuXG5jbGFzcyBCb2FyZCB7XG4gICAgc3RhdGljIEdSSURfV0lEVEggPSA3O1xuICAgIHN0YXRpYyBHUklEX0hFSUdIVCA9IDg7IC8vMCwgMCBpcyB0b3AgbGVmdCBjb3JuZXJcbiAgICBzdGF0aWMgUExBWUVSX1RFQU0gPSAxO1xuICAgIHN0YXRpYyBFTkVNWV9URUFNID0gMjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBsZXQgcG9zMSA9IHt5OiBCb2FyZC5HUklEX0hFSUdIVC0xLCB4OiBNYXRoLmZsb29yKEJvYXJkLkdSSURfV0lEVEgvMil9XG4gICAgICAgIGxldCBwb3MyID0ge3k6IDAsIHg6IE1hdGguZmxvb3IoQm9hcmQuR1JJRF9XSURUSC8yKX1cbiAgICAgICAgdGhpcy50cmVhc3VyZSA9IHtcbiAgICAgICAgICAgIHBsYXllcjogbmV3IFRyZWFzdXJlKEJvYXJkLlBMQVlFUl9URUFNLCBwb3MxKSxcbiAgICAgICAgICAgIGVuZW15OiBuZXcgVHJlYXN1cmUoQm9hcmQuRU5FTVlfVEVBTSwgcG9zMil9O1xuXG4gICAgICAgIHBvczEgPSB7eTogMCwgeDogTWF0aC5mbG9vcihCb2FyZC5HUklEX1dJRFRILzIpfTtcbiAgICAgICAgcG9zMiA9IHt5OiBCb2FyZC5HUklEX0hFSUdIVC0xLCB4OiBNYXRoLmZsb29yKEJvYXJkLkdSSURfV0lEVEgvMil9XG4gICAgICAgIHRoaXMuYmFzZSA9IHtcbiAgICAgICAgICAgIHBsYXllcjogbmV3IEJhc2UoQm9hcmQuUExBWUVSX1RFQU0sIHBvczIpLFxuICAgICAgICAgICAgZW5lbXk6IG5ldyBCYXNlKEJvYXJkLkVORU1ZX1RFQU0sIHBvczEpfTtcbiAgICAgICAgdGhpcy5iYXJyYWNrcyA9IHtcbiAgICAgICAgICAgIHBsYXllcjogW10sXG4gICAgICAgICAgICBlbmVteTogW11cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5ncmlkID0gQm9hcmQubWFrZUdyaWQodGhpcy50cmVhc3VyZSwgdGhpcy5iYXNlLCB0aGlzLmJhcnJhY2tzKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgbWFrZUdyaWQodHJlYXN1cmUsIGJhc2UsIGJhcnJhY2tzKSB7XG4gICAgICAgIGxldCBncmlkID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaT0wOyBpIDwgQm9hcmQuR1JJRF9IRUlHSFQ7IGkrKykge1xuICAgICAgICAgICAgZ3JpZC5wdXNoKFtdKTtcbiAgICAgICAgICAgIGZvciAobGV0IGo9MDsgaiA8IEJvYXJkLkdSSURfV0lEVEg7IGorKykge1xuICAgICAgICAgICAgICAgIGdyaWRbaV0ucHVzaChbXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcG9zID0ge3k6IDAsIHg6IDB9O1xuICAgICAgICBsZXQgYmFycmFjayA9IG5ldyBCYXJyYWNrKEJvYXJkLkVORU1ZX1RFQU0sIHBvcyk7XG4gICAgICAgIGdyaWQuZ2V0KHBvcykucHVzaChiYXJyYWNrKTtcbiAgICAgICAgYmFycmFja3MuZW5lbXkucHVzaChiYXJyYWNrKTtcblxuICAgICAgICBwb3MgPSB7eTogMCwgeDogQm9hcmQuR1JJRF9XSURUSC0xfTtcbiAgICAgICAgYmFycmFjayA9IG5ldyBCYXJyYWNrKEJvYXJkLkVORU1ZX1RFQU0sIHBvcyk7XG4gICAgICAgIGdyaWQuZ2V0KHBvcykucHVzaChiYXJyYWNrKTtcbiAgICAgICAgYmFycmFja3MuZW5lbXkucHVzaChiYXJyYWNrKTtcblxuICAgICAgICBwb3MgPSB7eTogQm9hcmQuR1JJRF9IRUlHSFQtMSwgeDogMH07XG4gICAgICAgIGJhcnJhY2sgPSBuZXcgQmFycmFjayhCb2FyZC5QTEFZRVJfVEVBTSwgcG9zKTtcbiAgICAgICAgZ3JpZC5nZXQocG9zKS5wdXNoKGJhcnJhY2spO1xuICAgICAgICBiYXJyYWNrcy5wbGF5ZXIucHVzaChiYXJyYWNrKTtcblxuICAgICAgICBwb3MgPSB7eTogQm9hcmQuR1JJRF9IRUlHSFQtMSwgeDogQm9hcmQuR1JJRF9XSURUSC0xfTtcbiAgICAgICAgYmFycmFjayA9IG5ldyBCYXJyYWNrKEJvYXJkLlBMQVlFUl9URUFNLCBwb3MpO1xuICAgICAgICBncmlkLmdldChwb3MpLnB1c2goYmFycmFjayk7XG4gICAgICAgIGJhcnJhY2tzLnBsYXllci5wdXNoKGJhcnJhY2spO1xuXG4gICAgICAgIGdyaWQuZ2V0KGJhc2UuZW5lbXkucG9zKS5wdXNoKGJhc2UuZW5lbXkpO1xuICAgICAgICBncmlkLmdldChiYXNlLnBsYXllci5wb3MpLnB1c2goYmFzZS5wbGF5ZXIpO1xuXG4gICAgICAgIGdyaWQuZ2V0KHRyZWFzdXJlLmVuZW15LnBvcykucHVzaCh0cmVhc3VyZS5lbmVteSk7XG4gICAgICAgIGdyaWQuZ2V0KHRyZWFzdXJlLnBsYXllci5wb3MpLnB1c2godHJlYXN1cmUucGxheWVyKTtcblxuICAgICAgICByZXR1cm4gZ3JpZDtcbiAgICB9XG5cbiAgICBpc1dvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJlYXN1cmUucGxheWVyLnBvcy5lcXVhbHModGhpcy5iYXNlLmVuZW15LnBvcykgfHxcbiAgICAgICAgICAgIHRoaXMudHJlYXN1cmUuZW5lbXkucG9zLmVxdWFscyh0aGlzLmJhc2UucGxheWVyLnBvcyk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCb2FyZDsiLCJpbXBvcnQgQm9hcmQgZnJvbSBcIi4vYm9hcmRcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzT25Cb2FyZChwb3MpIHtcbiAgICByZXR1cm4gcG9zLnggPiAtMSAmJiBwb3MueCA8IEJvYXJkLkdSSURfV0lEVEggJiYgcG9zLnkgPiAtMSAmJiBwb3MueSA8IEJvYXJkLkdSSURfSEVJR0hUO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCdXR0b24ocG9zKSB7XG4gICAgcmV0dXJuIHBvcy55ID4gQm9hcmQuR1JJRF9IRUlHSFQgKyAwLjI1ICYmXG4gICAgICAgIHBvcy55IDwgQm9hcmQuR1JJRF9IRUlHSFQgKyAwLjc1ICYmXG4gICAgICAgIHBvcy54ID4gNCAmJiBwb3MueCA8IDU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aWxsUGxheUFnYWluKHBvcykge1xuICAgICByZXR1cm4gcG9zLnggPiBCb2FyZC5HUklEX1dJRFRIIC8gMiAtIDAuNzUgJiZcbiAgICAgICAgcG9zLnggPCBCb2FyZC5HUklEX1dJRFRIIC8gMiArIDAuNzUgJiZcbiAgICAgICAgcG9zLnkgPiBNYXRoLmZsb29yKChCb2FyZC5HUklEX0hFSUdIVCkgLyAyKSAmJlxuICAgICAgICBwb3MueSA8IE1hdGguZmxvb3IoKEJvYXJkLkdSSURfSEVJR0hUKSAvIDIpICsgMC41O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNVcGdyYWRlQnV0dG9uKHNxdWFyZVBvcywgY2xpY2tQb3MpIHtcbiAgICBsZXQgeCA9IGNsaWNrUG9zLnggLSBzcXVhcmVQb3MueDtcbiAgICBsZXQgeSA9IGNsaWNrUG9zLnkgLSBzcXVhcmVQb3MueTtcblxuICAgIHJldHVybiB4ID4gMCAmJiB4IDwgMC4yNSAmJiB5ID4gMCAmJiB5IDwgMC4yNTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVXBncmFkZUNvbmZpcm1hdGlvbihzcXVhcmVQb3MsIGNsaWNrUG9zKSB7XG4gICAgbGV0IHggPSBjbGlja1Bvcy54IC0gc3F1YXJlUG9zLng7XG4gICAgbGV0IHkgPSBjbGlja1Bvcy55IC0gc3F1YXJlUG9zLnk7XG4gICAgcmV0dXJuIHggPiAwICYmIHggPCAxICYmIHkgPiAwICYmIHkgPCAwLjI1O1xufVxuXG5BcnJheS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24ocG9zKSB7XG4gICAgcmV0dXJuIHRoaXNbcG9zLnldW3Bvcy54XTtcbn1cblxuQXJyYXkucHJvdG90eXBlLmNvbnRhaW5zVHlwZSA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICBzcXVhcmUuc29tZSgpXG59XG5cbkFycmF5LnByb3RvdHlwZS5sYXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXNbdGhpcy5sZW5ndGggLSAxXTtcbn1cblxuQXJyYXkucHJvdG90eXBlLmZpcnN0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXNbMF07XG59XG5cbk9iamVjdC5wcm90b3R5cGUubGVmdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7eDogdGhpcy54LTEsIHk6IHRoaXMueX07XG59XG5cbk9iamVjdC5wcm90b3R5cGUucmlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge3g6IHRoaXMueCsxLCB5OiB0aGlzLnl9XG59XG5cbk9iamVjdC5wcm90b3R5cGUudXAgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge3g6IHRoaXMueCwgeTogdGhpcy55IC0gMX07XG59XG5cbk9iamVjdC5wcm90b3R5cGUuZG93biA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7eDogdGhpcy54LCB5OiB0aGlzLnkgKyAxfTtcbn1cblxuT2JqZWN0LnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbihwb3MpIHtcbiAgICByZXR1cm4gdGhpcy54ID09PSBwb3MueCAmJiB0aGlzLnkgPT09IHBvcy55O1xufVxuXG5leHBvcnQgZGVmYXVsdCBBcnJheTsiLCJpbXBvcnQgQm9hcmQgZnJvbSBcIi4uL2JvYXJkXCI7XG5pbXBvcnQgUGllY2UgZnJvbSBcIi4uL3BpZWNlXCI7XG5pbXBvcnQge2lzT25Cb2FyZCwgbGVmdCwgcmlnaHQsIHVwLCBkb3dufSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuY2xhc3MgVW5pdCBleHRlbmRzIFBpZWNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZWFtLCBwb3MpIHtcbiAgICAgICAgc3VwZXIodGVhbSwgcG9zKTtcbiAgICAgICAgdGhpcy5hdHRhY2sgPSBudWxsO1xuICAgICAgICB0aGlzLmRlZmVuc2UgPSBudWxsO1xuICAgICAgICB0aGlzLnBvaW50U3RhbmRhcmQgPSBudWxsO1xuICAgICAgICB0aGlzLnVwZ3JhZGUgPSBudWxsO1xuICAgICAgICB0aGlzLmxldmVsID0gMTtcbiAgICAgICAgdGhpcy5hdHRhY2tEaXN0ID0gMTtcbiAgICAgICAgdGhpcy5tb3ZlcyA9IG51bGw7XG4gICAgICAgIHRoaXMuYXR0YWNrcyA9IFtdO1xuICAgICAgICB0aGlzLmhhc01vdmVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaGFzQXR0YWNrZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5oYXNVcGdyYWRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJvYXJkID0gbnVsbDtcbiAgICAgICAgdGhpcy52aWV3ID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXNldEFjdGlvbnMoKSB7XG4gICAgICAgIHRoaXMubW92ZXMgPSBudWxsO1xuICAgICAgICB0aGlzLmF0dGFja3MgPSBbXTtcbiAgICB9XG5cbiAgICB1cGdyYWRlcygpIHtcbiAgICAgICAgdGhpcy5sZXZlbCA9IDI7XG4gICAgICAgIHRoaXMuaGFzVXBncmFkZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmF0dGFjayA9IHRoaXMudXBncmFkZS5hdHRhY2s7XG4gICAgICAgIHRoaXMuZGVmZW5zZSA9IHRoaXMudXBncmFkZS5kZWZlbnNlO1xuICAgIH1cblxuICAgIGRvd25ncmFkZSgpIHtcbiAgICAgICAgdGhpcy5sZXZlbCA9IDE7XG4gICAgICAgIHRoaXMuYXR0YWNrID0gdGhpcy5wb2ludFN0YW5kYXJkLmF0dGFjaztcbiAgICAgICAgdGhpcy5kZWZlbnNlID0gTWF0aC5taW4odGhpcy5wb2ludFN0YW5kYXJkLmRlZmVuc2UsIHRoaXMuZGVmZW5zZSk7XG4gICAgfVxuXG4gICAgZ2V0TW92ZXMoKSB7XG4gICAgICAgIHRoaXMubW92ZXMgPSB0aGlzLmdldE1vdmVzU2V0QkZTKCk7XG4gICAgICAgIHRoaXMubW92ZXMuZGVsZXRlKEpTT04uc3RyaW5naWZ5KHRoaXMucG9zKSk7XG4gICAgICAgIHRoaXMubW92ZXMgPSBbLi4udGhpcy5tb3Zlc10ubWFwKGVsZW0gPT4ge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZWxlbSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5tb3ZlcztcbiAgICB9XG5cbiAgICBnZXRNb3Zlc1NldERGUyh2YWxpZFZpc2l0ZWQgPSBuZXcgU2V0KCksIG1heERpc3QgPSAyLCBwb3MgPSB0aGlzLnBvcykge1xuICAgICAgICBpZiAobWF4RGlzdCA9PT0gMCkgeyByZXR1cm4gdmFsaWRWaXNpdGVkOyB9XG5cbiAgICAgICAgZm9yIChsZXQgeT1wb3MueS0xOyB5IDw9IHBvcy55ICsgMTsgeSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB4PXBvcy54LTE7IHggPD0gcG9zLnggKyAxOyB4KyspIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV3UG9zID0ge3k6IHksIHg6IHh9O1xuICAgICAgICAgICAgICAgIGlmIChpc09uQm9hcmQobmV3UG9zKSAmJiAhdGhpcy5oYXNVbml0KG5ld1BvcykpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWxpZFZpc2l0ZWQuaGFzKEpTT04uc3RyaW5naWZ5KG5ld1BvcykpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZFZpc2l0ZWQuYWRkKEpTT04uc3RyaW5naWZ5KG5ld1BvcykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhbGlkVmlzaXRlZCA9IHRoaXMuZ2V0TW92ZXNTZXQodmFsaWRWaXNpdGVkLCBtYXhEaXN0LTEsIG5ld1Bvcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbGlkVmlzaXRlZDtcbiAgICB9XG4gICAgXG4gICAgZ2V0TW92ZXNTZXRCRlModmFsaWRWaXNpdGVkID0gbmV3IFNldCgpLCBtYXhEaXN0ID0gMiwgcG9zID0gdGhpcy5wb3MpIHtcbiAgICAgICAgaWYgKG1heERpc3QgPT09IDApIHsgcmV0dXJuIHZhbGlkVmlzaXRlZDsgfVxuICAgICAgICB2YXIgcSA9IFtwb3NdO1xuXG4gICAgICAgIHdoaWxlIChxLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgbGV0IG5ld1BvcyA9IHEuc2hpZnQoKTtcbiAgICAgICAgICAgIHZhbGlkVmlzaXRlZC5hZGQoSlNPTi5zdHJpbmdpZnkobmV3UG9zKSk7XG5cbiAgICAgICAgICAgIHRoaXMuYWRkVG9RdWV1ZShxLCBuZXdQb3MubGVmdCgpLCB2YWxpZFZpc2l0ZWQsIHRoaXMuaXNXaXRoaW5EaXN0KHBvcywgbmV3UG9zLmxlZnQoKSwgbWF4RGlzdCkpO1xuICAgICAgICAgICAgdGhpcy5hZGRUb1F1ZXVlKHEsIG5ld1Bvcy5yaWdodCgpLCB2YWxpZFZpc2l0ZWQsIHRoaXMuaXNXaXRoaW5EaXN0KHBvcywgbmV3UG9zLnJpZ2h0KCksIG1heERpc3QpKTtcbiAgICAgICAgICAgIHRoaXMuYWRkVG9RdWV1ZShxLCBuZXdQb3MudXAoKSwgdmFsaWRWaXNpdGVkLCB0aGlzLmlzV2l0aGluRGlzdChwb3MsIG5ld1Bvcy51cCgpLCBtYXhEaXN0KSk7XG4gICAgICAgICAgICB0aGlzLmFkZFRvUXVldWUocSwgbmV3UG9zLmRvd24oKSwgdmFsaWRWaXNpdGVkLCB0aGlzLmlzV2l0aGluRGlzdChwb3MsIG5ld1Bvcy5kb3duKCksIG1heERpc3QpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWxpZFZpc2l0ZWQ7XG4gICAgfVxuXG4gICAgYWRkVG9RdWV1ZShxLCBwb3MsIHZhbGlkVmlzaXRlZCwgd2l0aGluRGlzdCkge1xuICAgICAgICBpZiAoaXNPbkJvYXJkKHBvcykgJiYgd2l0aGluRGlzdCAmJiAhdGhpcy5oYXNVbml0KHBvcylcbiAgICAgICAgICAgICYmICF2YWxpZFZpc2l0ZWQuaGFzKEpTT04uc3RyaW5naWZ5KHBvcykpKVxuICAgICAgICAgICAgcS5wdXNoKHBvcyk7XG4gICAgfVxuXG4gICAgaXNXaXRoaW5EaXN0KHBvcywgbmV3UG9zLCBtYXhEaXN0KSB7XG4gICAgICAgIHJldHVybiBNYXRoLmFicyhwb3MueCAtIG5ld1Bvcy54KSA8PSBtYXhEaXN0ICYmIE1hdGguYWJzKHBvcy55IC0gbmV3UG9zLnkpIDw9IG1heERpc3Q7XG4gICAgfVxuXG4gICAgZ2V0QXR0YWNrcygpIHtcbiAgICAgICAgZm9yIChsZXQgeT10aGlzLnBvcy55LXRoaXMuYXR0YWNrRGlzdDsgeSA8PSB0aGlzLnBvcy55ICsgdGhpcy5hdHRhY2tEaXN0OyB5KyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHg9dGhpcy5wb3MueC10aGlzLmF0dGFja0Rpc3Q7IHggPD0gdGhpcy5wb3MueCArIHRoaXMuYXR0YWNrRGlzdDsgeCsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5ld1BvcyA9IHt5OiB5LCB4OiB4fTtcbiAgICAgICAgICAgICAgICBpZiAoaXNPbkJvYXJkKG5ld1BvcykpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNxdWFyZSA9IHRoaXMuYm9hcmQuZ3JpZC5nZXQobmV3UG9zKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzVW5pdChuZXdQb3MpICYmIHNxdWFyZS5sYXN0KCkudGVhbSAhPT0gdGhpcy50ZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dGFja3MucHVzaChuZXdQb3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmF0dGFja3M7XG4gICAgfVxuXG4gICAgaGFzVW5pdChwb3MpIHtcbiAgICAgICAgbGV0IHNxdWFyZSA9IHRoaXMuYm9hcmQuZ3JpZC5nZXQocG9zKTtcbiAgICAgICAgaWYgKHNxdWFyZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBsZXQgZWxlbVR5cGUgPSBzcXVhcmUubGFzdCgpLnBhcmVudFR5cGUoKTtcbiAgICAgICAgICAgIGlmIChlbGVtVHlwZSA9PT0gJ1VuaXQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlzVXBncmFkYWJsZShjdXJyZW50UGxheWVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRlYW0gPT09IGN1cnJlbnRQbGF5ZXIudGVhbSAmJlxuICAgICAgICAgICAgdGhpcy5sZXZlbCA9PSAxICYmXG4gICAgICAgICAgICAoKHRoaXMudGVhbSA9PT0gQm9hcmQuUExBWUVSX1RFQU0gJiYgdGhpcy5wb3MueSA8IEJvYXJkLkdSSURfSEVJR0hUIC8gMikgfHxcbiAgICAgICAgICAgICh0aGlzLnRlYW0gPT09IEJvYXJkLkVORU1ZX1RFQU0gJiYgdGhpcy5wb3MueSA+PSBCb2FyZC5HUklEX0hFSUdIVCAvIDIpKTtcbiAgICB9XG5cbiAgICBvbkhvbWVUdXJmKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMudGVhbSA9PT0gQm9hcmQuUExBWUVSX1RFQU0gJiYgdGhpcy5wb3MueSA+PSBCb2FyZC5HUklEX0hFSUdIVCAvIDIpIHx8XG4gICAgICAgICAgICAodGhpcy50ZWFtID09PSBCb2FyZC5FTkVNWV9URUFNICYmIHRoaXMucG9zLnkgPCBCb2FyZC5HUklEX0hFSUdIVCAvIDIpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVW5pdDsiLCJpbXBvcnQgVW5pdCBmcm9tIFwiLi4vdW5pdFwiO1xuXG5jbGFzcyBBcmNoZXIgZXh0ZW5kcyBVbml0IHtcbiAgICBjb25zdHJ1Y3Rvcih0ZWFtLCBwb3MpIHtcbiAgICAgICAgc3VwZXIodGVhbSwgcG9zKTtcbiAgICAgICAgdGhpcy5hdHRhY2sgPSAxO1xuICAgICAgICB0aGlzLmRlZmVuc2UgPSAxO1xuICAgICAgICB0aGlzLmF0dGFja0Rpc3QgPSAzO1xuICAgICAgICB0aGlzLnVwZ3JhZGUgPSB7YXR0YWNrOiAyLCBkZWZlbnNlOiAyfVxuICAgICAgICB0aGlzLnBvaW50U3RhbmRhcmQgPSB7YXR0YWNrOiAxLCBkZWZlbnNlOiAxfVxuICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiLi9yZXNvdXJjZXMvYXJjaGVyLnBuZ1wiO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXJjaGVyOyIsImltcG9ydCBVbml0IGZyb20gXCIuLi91bml0XCI7XG5cbmNsYXNzIERlZmVuZGVyIGV4dGVuZHMgVW5pdCB7XG4gICAgY29uc3RydWN0b3IodGVhbSwgcG9zKSB7XG4gICAgICAgIHN1cGVyKHRlYW0sIHBvcyk7XG4gICAgICAgIHRoaXMuYXR0YWNrID0gMTtcbiAgICAgICAgdGhpcy5kZWZlbnNlID0gMztcbiAgICAgICAgLy9pZiBhdHRhY2sgaXMgY2hhbmdlZCB0byAxLCB1bml0LmlzVXBncmFkYWJsZSByZXR1cm5zIHRydWUgd2hlbiB1bml0IGlzIGFscmVhZHkgdXBncmFkZWRcbiAgICAgICAgLy9iZWNhdXNlIGl0IGNoZWNrcyBpZiB1cGdyYWRlZCB1c2luZyBhdHRhY2sgcG9pbnRzLiBOZWVkIHRvIGltcGxlbWVudCBkaWZmZXJlbnQgY2hlY2tcbiAgICAgICAgLy9pZiBtYWtpbmcgdXBncmFkZWQgYXR0YWNrIHBvaW50cyBlcXVhbCB0byBzdGFuZGFyZCBhdHRhY2sgcG9pbnRzXG4gICAgICAgIHRoaXMudXBncmFkZSA9IHthdHRhY2s6IDEsIGRlZmVuc2U6IDV9XG4gICAgICAgIHRoaXMucG9pbnRTdGFuZGFyZCA9IHthdHRhY2s6IDEsIGRlZmVuc2U6IDN9XG4gICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCIuL3Jlc291cmNlcy9kZWZlbmRlci5wbmdcIjtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERlZmVuZGVyOyIsImltcG9ydCBVbml0IGZyb20gXCIuLi91bml0XCI7XG5cbmNsYXNzIEluZmFudHJ5IGV4dGVuZHMgVW5pdCB7XG4gICAgY29uc3RydWN0b3IodGVhbSwgcG9zKSB7XG4gICAgICAgIHN1cGVyKHRlYW0sIHBvcyk7XG4gICAgICAgIHRoaXMuYXR0YWNrID0gMjtcbiAgICAgICAgdGhpcy5kZWZlbnNlID0gMjtcbiAgICAgICAgdGhpcy51cGdyYWRlID0ge2F0dGFjazogNCwgZGVmZW5zZTogM31cbiAgICAgICAgdGhpcy5wb2ludFN0YW5kYXJkID0ge2F0dGFjazogMiwgZGVmZW5zZTogMn1cbiAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcIi4vcmVzb3VyY2VzL2luZmFudHJ5LnBuZ1wiO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW5mYW50cnk7IiwiaW1wb3J0IEJvYXJkIGZyb20gXCIuL2JvYXJkXCI7XG5pbXBvcnQgQmFycmFjayBmcm9tIFwiLi9waWVjZXMvYmFycmFja1wiO1xuaW1wb3J0IEJhc2UgZnJvbSBcIi4vcGllY2VzL2Jhc2VcIjtcbmltcG9ydCBUcmVhc3VyZSBmcm9tIFwiLi9waWVjZXMvdHJlYXN1cmVcIjtcbmltcG9ydCBVbml0IGZyb20gXCIuL3BpZWNlcy91bml0XCI7XG5pbXBvcnQgQXJjaGVyIGZyb20gXCIuL3BpZWNlcy91bml0cy9hcmNoZXJcIjtcbmltcG9ydCBEZWZlbmRlciBmcm9tIFwiLi9waWVjZXMvdW5pdHMvZGVmZW5kZXJcIjtcbmltcG9ydCBJbmZhbnRyeSBmcm9tIFwiLi9waWVjZXMvdW5pdHMvaW5mYW50cnlcIjtcbmltcG9ydCB7IGlzT25Cb2FyZCwgaXNCdXR0b24sIHdpbGxQbGF5QWdhaW4gfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5jbGFzcyBWaWV3IHtcbiAgICBzdGF0aWMgU1FVQVJFX0RJTSA9IDEwMDtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIGN0eCwgZWwpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5lbCA9IGVsO1xuICAgICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgICAgdGhpcy5yYXRpbyA9IG51bGw7XG4gICAgICAgIHRoaXMuaW1hZ2VzID0gdGhpcy5yZW5kZXJJbWcoKTtcbiAgICAgICAgdGhpcy5kcmF3Qm9hcmQoKTtcbiAgICAgICAgdGhpcy5kcmF3TWVudSh7eTogQm9hcmQuR1JJRF9IRUlHSFQsIHg6IEJvYXJkLkdSSURfV0lEVEh9KTtcbiAgICAgICAgdGhpcy5ub01vcmVNb3ZlcyA9IHRoaXMuZHJhd05vTW9yZU1vdmVzTW9kdWxlKCk7XG4gICAgfVxuXG4gICAgcmVzZXRWaWV3KGdhbWUpIHtcbiAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgdGhpcy5yYXRpbyA9IG51bGw7XG4gICAgICAgIHRoaXMuZHJhd0JvYXJkKCk7XG4gICAgfVxuXG4gICAgY2xlYXJCb2FyZCgpIHtcbiAgICAgICAgdGhpcy5jdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMuY3R4LmNhbnZhcy53aWR0aCwgdGhpcy5jdHguY2FudmFzLmhlaWdodCk7XG4gICAgfVxuXG4gICAgZHJhd0JvYXJkKHVuaXRQb3MsIGNsaWNrZWRQb3MpIHtcbiAgICAgICAgdGhpcy5jbGVhckJvYXJkKCk7XG4gICAgICAgIHRoaXMuaW52aXNpZnlCdXR0b25zKCk7XG5cbiAgICAgICAgdGhpcy5pbWFnZXMuYmFja2dyb3VuZC5vbmxvYWQodW5pdFBvcywgY2xpY2tlZFBvcyk7XG4gICAgfVxuXG4gICAgaW52aXNpZnlCdXR0b25zKCkge1xuICAgICAgICBjb25zdCBlID0gW107XG4gICAgICAgIGUucHVzaChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFib3V0XCIpKTtcbiAgICAgICAgZS5wdXNoKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucnVsZXNcIikpO1xuICAgICAgICBlLnB1c2goZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hYm91dHRpdGxlXCIpKTtcbiAgICAgICAgZS5wdXNoKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucnVsZXN0aXRsZVwiKSk7XG5cbiAgICAgICAgZS5mb3JFYWNoKGUgPT4ge2lmIChlKSB7ZS5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbid9fSk7XG4gICAgfVxuXG4gICAgZHJhd0JvYXJkV2l0aG91dE9ubG9hZCh1bml0UG9zLCBjbGlja2VkUG9zKSB7XG4gICAgICAgIGZvciAobGV0IHk9MDsgeSA8IEJvYXJkLkdSSURfSEVJR0hUOyB5KyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHg9MDsgeCA8IEJvYXJkLkdSSURfV0lEVEg7IHgrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhd0dyaWRTcXVhcmUoeCwgeSwgXCJkYXJrZ3JlZW5cIik7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3R3JpZEVsZW1zKHt5OiB5LCB4OiB4fSwgdW5pdFBvcywgY2xpY2tlZFBvcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kcmF3TWlkbGluZSgpO1xuXG4gICAgICAgIHRoaXMuZHJhd0VuZFR1cm5CdXR0b24oKTtcblxuICAgICAgICB0aGlzLmN0eC5mb250ID0gXCI0MHB4IENvcHBlcnBsYXRlXCI7XG4gICAgICAgIHRoaXMuZ2FtZS5jdXJyZW50UGxheWVyLnRlYW0gPT09IEJvYXJkLkVORU1ZX1RFQU0gPyB0aGlzLmN0eC5maWxsU3R5bGUgPSBcInJlZFwiIDogdGhpcy5jdHguZmlsbFN0eWxlID0gXCJibHVlXCI7XG4gICAgICAgIGxldCBzdHIgPSBcIkFjdGlvbiBQb2ludHM6IFwiICsgdGhpcy5nYW1lLmFjdGlvblBvaW50cy50b1N0cmluZygpO1xuICAgICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9ICdkaW1ncmV5JztcbiAgICAgICAgdGhpcy5jdHgubGluZVdpZHRoID0gMztcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlVGV4dChzdHIsIDEwLCAoQm9hcmQuR1JJRF9IRUlHSFQrMC41KSAqIFZpZXcuU1FVQVJFX0RJTSk7XG4gICAgICAgIHRoaXMuY3R4LmZpbGxUZXh0KHN0ciwgMTAsIChCb2FyZC5HUklEX0hFSUdIVCswLjUpICogVmlldy5TUVVBUkVfRElNKTtcblxuICAgICAgICB0aGlzLmN0eC5mb250ID0gXCIzMHB4IENvcHBlcnBsYXRlXCI7XG4gICAgICAgIHN0ciA9IFwiVHJvb3BzOiBcIiArIHRoaXMuZ2FtZS5jdXJyZW50UGxheWVyLnVuaXRzLmxlbmd0aC50b1N0cmluZygpICsgXCIvOFwiO1xuICAgICAgICB0aGlzLmN0eC5zdHJva2VUZXh0KHN0ciwgMTAsIChCb2FyZC5HUklEX0hFSUdIVCswLjc1KSAqIFZpZXcuU1FVQVJFX0RJTSk7XG4gICAgICAgIHRoaXMuY3R4LmZpbGxUZXh0KHN0ciwgMTAsIChCb2FyZC5HUklEX0hFSUdIVCswLjc1KSAqIFZpZXcuU1FVQVJFX0RJTSk7XG4gICAgfVxuXG4gICAgZHJhd01pZGxpbmUoKSB7XG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gJ2xpZ2h0c2t5Ymx1ZSc7ICAgIFxuICAgICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgdGhpcy5jdHgubW92ZVRvKDAsIEJvYXJkLkdSSURfSEVJR0hUIC8gMiAqIFZpZXcuU1FVQVJFX0RJTSk7XG4gICAgICAgIHRoaXMuY3R4LmxpbmVUbygoQm9hcmQuR1JJRF9IRUlHSFQtMSkgKiBWaWV3LlNRVUFSRV9ESU0sIEJvYXJkLkdSSURfSEVJR0hUIC8gMiAqIFZpZXcuU1FVQVJFX0RJTSk7XG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpO1xuICAgIH1cblxuICAgIGRyYXdFbmRUdXJuQnV0dG9uKCkge1xuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSAnbGlnaHRza3libHVlJzsgICAgICAgIFxuICAgICAgICB0aGlzLmN0eC5maWxsUmVjdChcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIDQsXG4gICAgICAgICAgICAoQm9hcmQuR1JJRF9IRUlHSFQrMC4yNSkgKiBWaWV3LlNRVUFSRV9ESU0sXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAxLFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogMC41KTtcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSAnY29ybmZsb3dlcmJsdWUnO1xuICAgICAgICB0aGlzLmN0eC5saW5lV2lkdGggPSAxO1xuICAgICAgICB0aGlzLmN0eC5zdHJva2VSZWN0KFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogNCxcbiAgICAgICAgICAgIChCb2FyZC5HUklEX0hFSUdIVCswLjI1KSAqIFZpZXcuU1FVQVJFX0RJTSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIDEsXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAwLjUpO1xuICAgICAgICB0aGlzLmN0eC5mb250ID0gXCIyNXB4IENvcHBlcnBsYXRlXCI7XG4gICAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IFwiZGltZ3JleVwiO1xuICAgICAgICB0aGlzLmN0eC5saW5lV2lkdGggPSAyO1xuICAgICAgICB0aGlzLmN0eC5maWxsVGV4dChcIkVuZFwiLCA0LjI1ICogVmlldy5TUVVBUkVfRElNLCAoQm9hcmQuR1JJRF9IRUlHSFQrMC40NSkgKiBWaWV3LlNRVUFSRV9ESU0pO1xuICAgICAgICB0aGlzLmN0eC5maWxsVGV4dChcIlR1cm5cIiwgNC4xNSAqIFZpZXcuU1FVQVJFX0RJTSwgKEJvYXJkLkdSSURfSEVJR0hUKzAuNjUpICogVmlldy5TUVVBUkVfRElNKTtcbiAgICB9XG5cbiAgICBkcmF3TWVudShwb3MpIHtcbiAgICAgICAgY29uc3QgZ3JpZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiKTtcbiAgICAgICAgZ3JpZC5jbGFzc0xpc3QuYWRkKFwiZ3JpZFwiKTtcblxuICAgICAgICAvLyBncmlkLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICAvLyBncmlkLnN0eWxlLnJpZ2h0ID0gXCI3LjUlXCI7XG4gICAgICAgIGdyaWQuc3R5bGUuYm90dG9tID0gXCJjYWxjKDAuMiUgLSAzMnB4KVwiO1xuICAgICAgICBncmlkLnN0eWxlLndpZHRoID0gXCJjYWxjKDE0LjI5JSAtIDQwcHgpXCI7XG4gICAgICAgIGdyaWQuc3R5bGUuaGVpZ2h0ID0gXCI1Ljg1JVwiO1xuXG4gICAgICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcIm1lbnVcIilcbiAgICAgICAgY2VsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImxpZ2h0c2t5Ymx1ZVwiO1xuICAgICAgICBjZWxsLnN0eWxlLmJvcmRlciA9IFwiMXB4IHNvbGlkIGNvcm5mbG93ZXJibHVlXCI7XG4gICAgICAgIGNlbGwuc3R5bGUuaGVpZ2h0ID0gXCJjYWxjKDEwMCUgLSAycHgpXCI7XG4gICAgICAgIGNlbGwuc3R5bGUud2lkdGggPSBcImNhbGMoMTAwJSAtIDJweClcIjtcbiAgICAgICAgY2VsbC5zdHlsZS5sZWZ0ID0gXCIwcHhcIjtcblxuICAgICAgICBjZWxsLnN0eWxlLmxpc3RTdHlsZSA9IFwibm9uZVwiO1xuICAgICAgICBjZWxsLnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xuICAgICAgICBjZWxsLmlubmVySFRNTCA9IFwiVGVzdFwiXG4gICAgICAgIGNlbGwuc3R5bGUuZm9udCA9ICgyNSp0aGlzLnJhdGlvKSArIFwicHggQ29wcGVycGxhdGVcIlxuXG4gICAgICAgIGNlbGwuc3R5bGUuY29sb3IgPSBcImRpbWdyZXlcIlxuICAgICAgICBjZWxsLnN0eWxlLnRleHRBbGlnbiA9IFwiY2VudGVyXCJcbiAgICAgICAgY2VsbC5zdHlsZS5saW5lSGVpZ2h0ID0gXCIyMDAlXCJcbiAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKFwiYnV0dG9uXCIpO1xuXG4gICAgICAgIGdyaWQuYXBwZW5kQ2hpbGQoY2VsbCk7XG4gICAgICAgIC8vIHRoaXMuZWwuYXBwZW5kQ2hpbGQoZ3JpZCk7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJiYWNrZ3JvdW5kXCIpWzBdLmFwcGVuZENoaWxkKGdyaWQpXG5cbiAgICAgICAgdGhpcy5kcmF3TWVudU9wdGlvbnMocG9zLCBjZWxsKTtcbiAgICAgICAgY29uc3QgcnVsZUJveCA9IHRoaXMuZHJhd1J1bGVzKHBvcyk7XG4gICAgICAgIGNvbnN0IGFib3V0Qm94ID0gdGhpcy5kcmF3QWJvdXQocG9zKTtcblxuICAgICAgICBjb25zdCB3aW5kb3dSZXNpemUgPSB3aW5kb3cub25yZXNpemU7XG4gICAgICAgIHdpbmRvdy5vbnJlc2l6ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHdpbmRvd1Jlc2l6ZSgpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5yYXRpbyA8IDAuNjcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJhdGlvID0gMC42NztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJ1bGVCb3guc3R5bGUuZm9udCA9ICgxOSp0aGlzLnJhdGlvIC0gMikgKyBcInB4IENvcHBlcnBsYXRlXCJcbiAgICAgICAgICAgIHJ1bGVCb3guc3R5bGUubGluZUhlaWdodCA9IFwiMTAwJVwiXG4gICAgICAgICAgICBhYm91dEJveC5zdHlsZS5mb250ID0gKDIwKnRoaXMucmF0aW8gLSAyKSArIFwicHggQ29wcGVycGxhdGVcIlxuICAgICAgICAgICAgYWJvdXRCb3guc3R5bGUubGluZUhlaWdodCA9IFwiMzUwJVwiXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkcmF3TWVudU9wdGlvbnMocG9zLCBjZWxsKSB7XG4gICAgICAgIGNvbnN0IG1lbnUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XG4gICAgICAgIG1lbnUuY2xhc3NMaXN0LmFkZChcIm1lbnVcIik7XG5cbiAgICAgICAgLy8gbWVudS5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgLy8gbWVudS5zdHlsZS5yaWdodCA9IFwiNy41JVwiO1xuICAgICAgICBtZW51LnN0eWxlLmJvdHRvbSA9IFwiY2FsYyg1Ljg1JSAtIDE2cHgpXCI7XG4gICAgICAgIG1lbnUuc3R5bGUud2lkdGggPSBcImNhbGMoMTQuMjklIC0gNDJweClcIjtcbiAgICAgICAgbWVudS5zdHlsZS5oZWlnaHQgPSBcImNhbGMoNS44NSUgLSAycHgpXCI7XG4gICAgXG4gICAgICAgIGNvbnN0IHJ1bGVzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgICAgICB0aGlzLmRyYXdCdXR0b24oXCJSdWxlc1wiLCBydWxlcywge3g6IFwiMCVcIiwgeTogXCIxMDAlXCJ9KTtcbiAgICAgICAgcnVsZXMuY2xhc3NMaXN0LmFkZChcInJ1bGVzXCIpO1xuICAgICAgICBjb25zdCBhYm91dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICAgICAgdGhpcy5kcmF3QnV0dG9uKFwiQWJvdXRcIiwgYWJvdXQsIHt4OiBcIjAlXCIsIHk6IFwiMCVcIn0pO1xuICAgICAgICBhYm91dC5jbGFzc0xpc3QuYWRkKFwiYWJvdXRcIik7XG5cbiAgICAgICAgcnVsZXMuc3R5bGUuZm9udCA9IDIwKnRoaXMucmF0aW8gKyBcInB4IENvcHBlcnBsYXRlXCI7XG4gICAgICAgIHJ1bGVzLnN0eWxlLmxpbmVIZWlnaHQgPSBcIjI1MCVcIlxuICAgICAgICBhYm91dC5zdHlsZS5mb250ID0gMjAqdGhpcy5yYXRpbyArIFwicHggQ29wcGVycGxhdGVcIjtcbiAgICAgICAgYWJvdXQuc3R5bGUubGluZUhlaWdodCA9IFwiMjUwJVwiXG5cbiAgICAgICAgbWVudS5hcHBlbmRDaGlsZChydWxlcyk7XG4gICAgICAgIG1lbnUuYXBwZW5kQ2hpbGQoYWJvdXQpO1xuICAgICAgICBtZW51LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJ1xuXG4gICAgICAgIHdpbmRvdy5vbnJlc2l6ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmF0aW8gPSBNYXRoLm1pbihcbiAgICAgICAgICAgICAgICB3aW5kb3cuaW5uZXJIZWlnaHQgLyB0aGlzLmN0eC5jYW52YXMuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHdpbmRvdy5pbm5lcldpZHRoIC8gdGhpcy5jdHguY2FudmFzLndpZHRoXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBpZiAodGhpcy5yYXRpbyA8IDAuNjcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJhdGlvID0gMC42NztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNlbGwuc3R5bGUuZm9udCA9ICgyNSp0aGlzLnJhdGlvKSArIFwicHggQ29wcGVycGxhdGVcIlxuICAgICAgICAgICAgY2VsbC5zdHlsZS5saW5lSGVpZ2h0ID0gXCIyMDAlXCJcblxuICAgICAgICAgICAgcnVsZXMuc3R5bGUuZm9udCA9ICgyMCp0aGlzLnJhdGlvKSArIFwicHggQ29wcGVycGxhdGVcIlxuICAgICAgICAgICAgcnVsZXMuc3R5bGUubGluZUhlaWdodCA9IFwiMjUwJVwiXG4gICAgICAgICAgICBhYm91dC5zdHlsZS5mb250ID0gKDIwKnRoaXMucmF0aW8pICsgXCJweCBDb3BwZXJwbGF0ZVwiXG4gICAgICAgICAgICBhYm91dC5zdHlsZS5saW5lSGVpZ2h0ID0gXCIyNTAlXCJcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoaXMuZWwuYXBwZW5kQ2hpbGQobWVudSk7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJiYWNrZ3JvdW5kXCIpWzBdLmFwcGVuZENoaWxkKG1lbnUpXG4gICAgfVxuXG4gICAgZHJhd1J1bGVzKHBvcykge1xuICAgICAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiKTtcbiAgICAgICAgdGl0bGUuY2xhc3NMaXN0LmFkZChcInJ1bGVzdGl0bGVcIik7XG4gICAgICAgIHRoaXMuZHJhd01lbnVEaXNwbGF5Qm94KFwiSG93IFRvIFBsYXkmbmJzcDsmbmJzcDsmbmJzcDtcIiwgdGl0bGUsIHRpdGxlKTtcbiAgICBcbiAgICAgICAgY29uc3QgcnVsZXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgICAgIHRoaXMuZHJhd01lbnVJbm5lckRpc3BsYXlCb3goXCJTdGVhbCB0aGUgZW5lbXkncyB0cmVhc3VyZSAmIGJyaW5nIGl0IGJhY2sgdG8geW91ciBiYXNlITxwPkJVWUlORyB8IFNlbGVjdCB0aGUgYmFycmFja3MgdG8gYnV5IHRyb29wcy4gQWxsIHVuaXRzIGNhbiBtb3ZlIHVwIHRvIDIgc3BhY2VzIGluIGFueSBkaXJlY3Rpb24uIFRoZXJlIGFyZSAzIHR5cGVzIG9mIHRyb29wczo8L3A+LUluZmFudHJ5OiBEZWZlbnNlIDIsIEF0dGFjayAxLCBSYW5nZSAxPGJyPi1BcmNoZXI6IERlZmVuc2UgMSwgQXR0YWNrIDEsIFJhbmdlIDM8YnI+LURlZmVuZGVyOiBEZWZlbnNlIDMsIEF0dGFjayAxLCBSYW5nZSAxPGJyPjxwPlVQR1JBRElORyB8IFdoZW4gaW4gZW5lbXkgdGVycml0b3J5LCB1bml0cyBjYW4gYmUgdWdyYWRlZCBhcyBmb2xsb3dzOjwvcD4tSW5mYW50cnk6IERlZmVuc2UgKzEsIEF0dGFjayArMjxicj4tQXJjaGVyOiBEZWZlbnNlICsxLCBBdHRhY2sgKzE8YnI+LURlZmVuZGVyOiBEZWZlbnNlICsyLCBBdHRhY2sgKzA8YnI+PHA+VW5pdHMgY2Fubm90IGF0dGFjayBhZnRlciB1cGdyYWRpbmcgdW50aWwgdGhlIG5leHQgcm91bmQuIFN0YXRzIHJldHVybiB0byBub3JtYWwgb25jZSByZXR1cm5pbmcgdG8gZnJpZW5kbHkgdGVycml0b3J5LjwvcD48cD5UUkVBU1VSRSB8IFBpY2sgdXAgdGhlIHRyZWFzdXJlIGJ5IG1vdmluZyBhIHVuaXQgb250byB0aGUgc3F1YXJlIGNvbnRhaW5pbmcgaXQuIChZb3UgY2FuIG9ubHkgcGljayB1cCBlbmVteSB0cmVhc3VyZS4pPC9wPjxwPlBSSUNFIENIQVJUPGJyPk1vdmluZyBvciBBdHRhY2tpbmc6IDEgQWN0aW9uIFBvaW50PGJyPkJ1eWluZyBvciBVcGdyYWRpbmc6IDIgQWN0aW9uIFBvaW50czwvcD5cIixcbiAgICAgICAgcnVsZXMsIHRpdGxlKTtcbiAgICAgICAgcnVsZXMuc3R5bGUuZm9udCA9IFwiMTJweCBDb3BwZXJwbGF0ZVwiO1xuICAgICAgICBpZiAodGhpcy5yYXRpbyA8IDAuNjcpIHtcbiAgICAgICAgICAgIHRoaXMucmF0aW8gPSAwLjY3O1xuICAgICAgICB9XG4gICAgICAgIHJ1bGVzLnN0eWxlLmZvbnQgPSAoMTkqdGhpcy5yYXRpbyAtIDIpICsgXCJweCBDb3BwZXJwbGF0ZVwiXG4gICAgICAgIHJ1bGVzLnN0eWxlLmxpbmVIZWlnaHQgPSBcIjEwMCVcIjtcbiAgICAgICAgcnVsZXMuY2xhc3NMaXN0LmFkZChcInJ1bGVzYm94XCIpO1xuXG4gICAgICAgIHRpdGxlLmFwcGVuZENoaWxkKHJ1bGVzKTtcbiAgICAgICAgLy8gdGl0bGUuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nXG4gICAgICAgIC8vIHRoaXMuZWwuYXBwZW5kQ2hpbGQodGl0bGUpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiYmFja2dyb3VuZFwiKVswXS5hcHBlbmRDaGlsZCh0aXRsZSlcbiAgICAgICAgcmV0dXJuIHJ1bGVzO1xuICAgIH1cblxuICAgIGRyYXdBYm91dChwb3MpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XG4gICAgICAgIHRpdGxlLmNsYXNzTGlzdC5hZGQoXCJhYm91dHRpdGxlXCIpO1xuXG4gICAgICAgIHRoaXMuZHJhd01lbnVEaXNwbGF5Qm94KFwiQWJvdXQmbmJzcDsmbmJzcDsmbmJzcDtcIiwgdGl0bGUsIHRpdGxlKTtcbiAgICBcbiAgICAgICAgY29uc3QgYWJvdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgICAgIHRoaXMuZHJhd01lbnVJbm5lckRpc3BsYXlCb3goXCI8YnI+PGJyPjxwPkdhbWUgZGV2ZWxvcGVkIGJ5IDxhIGhyZWY9J2h0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9pbi9qZGlya3Nlbi8nPkphc21pbmUgS29iYXRhPC9hPjwvcD48cD48YSBocmVmPSdodHRwczovL2dpdGh1Yi5jb20vSmFzbWluZUtvYmF0YS9KYXZhc2NyaXB0LVByb2plY3QnPlRyZWFzdXJlIFdhcnMhIEdpdEh1YiBSZXBvPC9wPjxwPjxhIGhyZWY9J2h0dHBzOi8vd3d3LmFwcGFjYWRlbXkuaW8vJz5BcHAgQWNhZGVteTwvYT4gSmF2YXNjcmlwdCBQcm9qZWN0PC9wPlwiLCBhYm91dCwgdGl0bGUpO1xuICAgICAgICBpZiAodGhpcy5yYXRpbyA8IDAuNjcpIHtcbiAgICAgICAgICAgIHRoaXMucmF0aW8gPSAwLjY3O1xuICAgICAgICB9XG4gICAgICAgIGFib3V0LnN0eWxlLmZvbnQgPSAoMjAqdGhpcy5yYXRpbyAtIDIpICsgXCJweCBDb3BwZXJwbGF0ZVwiO1xuICAgICAgICBhYm91dC5zdHlsZS5saW5lSGVpZ2h0ID0gXCIzNTAlXCJcbiAgICAgICAgYWJvdXQuY2xhc3NMaXN0LmFkZChcImFib3V0Ym94XCIpO1xuXG4gICAgICAgIHRpdGxlLmFwcGVuZENoaWxkKGFib3V0KTtcbiAgICAgICAgdGl0bGUuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nXG4gICAgICAgIC8vIHRoaXMuZWwuYXBwZW5kQ2hpbGQodGl0bGUpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiYmFja2dyb3VuZFwiKVswXS5hcHBlbmRDaGlsZCh0aXRsZSlcbiAgICAgICAgcmV0dXJuIGFib3V0O1xuICAgIH1cblxuICAgIGRyYXdNZW51RGlzcGxheUJveChzdHIsIGJveCwgdGl0bGUpIHtcbiAgICAgICAgYm94LnN0eWxlLndpZHRoID0gXCJjYWxjKDc1JSAtIDQycHgpXCJcbiAgICAgICAgYm94LnN0eWxlLmhlaWdodCA9IFwiY2FsYyg3NSUgLSAycHgpXCJcbiAgICAgICAgYm94LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwibGlnaHRza3libHVlXCI7XG4gICAgICAgIGJveC5zdHlsZS5ib3JkZXIgPSBcIjFweCBzb2xpZCBjb3JuZmxvd2VyYmx1ZVwiO1xuICAgICAgICAvLyBib3guc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgIC8vIGJveC5zdHlsZS5sZWZ0ID0gXCI1MCVcIjtcbiAgICAgICAgYm94LnN0eWxlLnRvcCA9IFwiNDUlXCI7XG4gICAgICAgIGJveC5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZSgtNTAlLCAtNTAlKVwiO1xuICAgICAgICBib3guc3R5bGUubWFyZ2luID0gXCIwcHhcIlxuICAgICAgICBib3guc3R5bGUubGlzdFN0eWxlID0gXCJub25lXCI7XG4gICAgICAgIGJveC5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgYm94LmlubmVySFRNTCA9IHN0cjtcbiAgICAgICAgaWYgKHRoaXMucmF0aW8gPCAwLjY3KSB7XG4gICAgICAgICAgICB0aGlzLnJhdGlvID0gMC42NztcbiAgICAgICAgfVxuICAgICAgICBib3guc3R5bGUuZm9udCA9ICgzMCp0aGlzLnJhdGlvIC0gMikgKyBcInB4IENvcHBlcnBsYXRlXCJcbiAgICAgICAgYm94LnN0eWxlLmNvbG9yID0gXCJkaW1ncmV5XCJcbiAgICAgICAgYm94LnN0eWxlLnRleHRBbGlnbiA9IFwiY2VudGVyXCJcbiAgICAgICAgYm94LnN0eWxlLmxpbmVIZWlnaHQgPSBcIjI1MCVcIjtcblxuICAgICAgICBjb25zdCB3aW5kb3dSZXNpemUgPSB3aW5kb3cub25yZXNpemU7XG4gICAgICAgIHdpbmRvdy5vbnJlc2l6ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHdpbmRvd1Jlc2l6ZSgpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5yYXRpbyA8IDAuNjcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJhdGlvID0gMC42NztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJveC5zdHlsZS5mb250ID0gKDMwKnRoaXMucmF0aW8gLSAyKSArIFwicHggQ29wcGVycGxhdGVcIlxuICAgICAgICAgICAgYm94LnN0eWxlLmxpbmVIZWlnaHQgPSBcIjI1MCVcIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRyYXdNZW51SW5uZXJEaXNwbGF5Qm94KHN0ciwgYm94LCB0aXRsZSkge1xuICAgICAgICBib3guc3R5bGUud2lkdGggPSBcImNhbGMoODAlIC0gNDJweClcIlxuICAgICAgICBib3guc3R5bGUuaGVpZ2h0ID0gXCJjYWxjKDgwJSAtIDJweClcIlxuICAgICAgICBib3guc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJjb3JuZmxvd2VyYmx1ZVwiO1xuICAgICAgICBib3guc3R5bGUuYm9yZGVyID0gXCIxcHggc29saWQgY29ybmZsb3dlcmJsdWVcIjtcbiAgICAgICAgLy8gYm94LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICAvLyBib3guc3R5bGUubGVmdCA9IFwiNTAlXCI7XG4gICAgICAgIGJveC5zdHlsZS50b3AgPSBcIjUwJVwiO1xuICAgICAgICBib3guc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoLTUwJSwgLTUwJSlcIjtcbiAgICAgICAgLy8gYm94LnN0eWxlLm1hcmdpbiA9IFwiMHB4XCI7XG4gICAgICAgIGJveC5zdHlsZS5saXN0U3R5bGUgPSBcIm5vbmVcIjtcbiAgICAgICAgYm94LnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xuICAgICAgICBib3guaW5uZXJIVE1MID0gc3RyO1xuICAgICAgICBib3guc3R5bGUuZm9udCA9IFwiMjVweCBDb3BwZXJwbGF0ZVwiXG4gICAgICAgIGJveC5zdHlsZS5jb2xvciA9IFwid2hpdGVcIlxuICAgIH1cblxuICAgIGRyYXdCdXR0b24oc3RyLCBjZWxsLCBwb3MpIHtcbiAgICAgICAgY2VsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImxpZ2h0c2t5Ymx1ZVwiO1xuICAgICAgICBjZWxsLnN0eWxlLmJvcmRlciA9IFwiMXB4IHNvbGlkIGNvcm5mbG93ZXJibHVlXCI7XG4gICAgICAgIGNlbGwuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgICAgICAgY2VsbC5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcbiAgICAgICAgY2VsbC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgY2VsbC5zdHlsZS5yaWdodCA9IHBvcy54O1xuICAgICAgICBjZWxsLnN0eWxlLmJvdHRvbSA9IHBvcy55O1xuICAgICAgICBjZWxsLnN0eWxlLm1hcmdpbiA9IFwiMHB4XCJcbiAgICAgICAgY2VsbC5zdHlsZS5saXN0U3R5bGUgPSBcIm5vbmVcIjtcbiAgICAgICAgY2VsbC5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgY2VsbC5pbm5lckhUTUwgPSBzdHJcbiAgICAgICAgY2VsbC5zdHlsZS5jb2xvciA9IFwiZGltZ3JleVwiXG4gICAgICAgIGNlbGwuc3R5bGUudGV4dEFsaWduID0gXCJjZW50ZXJcIlxuICAgIH1cblxuICAgIHVwZGF0ZU5vTW9yZU1vdmVzU3RyKCkge1xuICAgICAgICBsZXQgc3RyID0gXCI8YnI+Tm8gTW92ZXMgTGVmdCE8L2JyPlwiO1xuICAgICAgICBzdHIgKz0gdGhpcy5nYW1lLmN1cnJlbnRQbGF5ZXIudGVhbSA9PT0gQm9hcmQuUExBWUVSX1RFQU0gPyBcIlJlZFwiIDogXCJCbHVlXCI7XG4gICAgICAgIHN0ciArPSBcIidzIFR1cm4/XCJcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICBkcmF3Tm9Nb3JlTW92ZXNNb2R1bGUoKSB7XG4gICAgICAgIGNvbnN0IGJhY2tncm91bmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBiYWNrZ3JvdW5kLmNsYXNzTGlzdC5hZGQoXCJtb3Zlc0JhY2tncm91bmRcIilcbiAgICAgICAgYmFja2dyb3VuZC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuICAgICAgICBiYWNrZ3JvdW5kLnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xuICAgICAgICAvLyBiYWNrZ3JvdW5kLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICBiYWNrZ3JvdW5kLnN0eWxlLnRvcCA9IFwiMHB4XCI7XG4gICAgICAgIGJhY2tncm91bmQuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG5cbiAgICAgICAgY29uc3QgbW9kdWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xuICAgICAgICBtb2R1bGUuY2xhc3NMaXN0LmFkZChcIm5vTW9yZU1vdmVzXCIpO1xuXG4gICAgICAgIG1vZHVsZS5zdHlsZS53aWR0aCA9IFwiY2FsYyg0MCUgLSA0MnB4KVwiXG4gICAgICAgIG1vZHVsZS5zdHlsZS5oZWlnaHQgPSBcImNhbGMoMTglIC0gMnB4KVwiXG4gICAgICAgIG1vZHVsZS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImxpZ2h0c2t5Ymx1ZVwiO1xuICAgICAgICBtb2R1bGUuc3R5bGUuYm9yZGVyID0gXCIxcHggc29saWQgY29ybmZsb3dlcmJsdWVcIjtcbiAgICAgICAgLy8gbW9kdWxlLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICBtb2R1bGUuc3R5bGUubGVmdCA9IFwiNTAlXCI7XG4gICAgICAgIG1vZHVsZS5zdHlsZS50b3AgPSBcIjQ1JVwiO1xuICAgICAgICBtb2R1bGUuc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoLTUwJSwgLTUwJSlcIjtcbiAgICAgICAgbW9kdWxlLnN0eWxlLm1hcmdpbiA9IFwiMHB4XCJcbiAgICAgICAgbW9kdWxlLnN0eWxlLnBhZGRpbmdMZWZ0ID0gXCIxMHB4XCI7XG4gICAgICAgIG1vZHVsZS5zdHlsZS5wYWRkaW5nUmlnaHQgPSBtb2R1bGUuc3R5bGUucGFkZGluZ0xlZnQ7XG4gICAgICAgIG1vZHVsZS5zdHlsZS5saXN0U3R5bGUgPSBcIm5vbmVcIjtcbiAgICAgICAgbW9kdWxlLnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xuICAgICAgICBtb2R1bGUuc3R5bGUuZm9udCA9ICgyNyp0aGlzLnJhdGlvIC0gMikgKyBcInB4IENvcHBlcnBsYXRlXCJcbiAgICAgICAgbW9kdWxlLnN0eWxlLmNvbG9yID0gXCJkaW1ncmV5XCJcbiAgICAgICAgbW9kdWxlLnN0eWxlLnRleHRBbGlnbiA9IFwiY2VudGVyXCJcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJtb3Zlc0J1dHRvblwiKTtcbiAgICAgICAgYnV0dG9uLmlubmVySFRNTCA9IFwiT0tcIlxuICAgICAgICBidXR0b24uc3R5bGUud2lkdGggPSBcIjUwJVwiXG4gICAgICAgIGJ1dHRvbi5zdHlsZS5oZWlnaHQgPSBcImNhbGMoMTglIC0gMnB4KVwiXG4gICAgICAgIGJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImNvcm5mbG93ZXJibHVlXCI7XG4gICAgICAgIGJ1dHRvbi5zdHlsZS5ib3JkZXIgPSBcIjFweCBzb2xpZCBjb3JuZmxvd2VyYmx1ZVwiO1xuICAgICAgICBidXR0b24uc3R5bGUubWFyZ2luTGVmdCA9IFwiYXV0b1wiO1xuICAgICAgICBidXR0b24uc3R5bGUubWFyZ2luUmlnaHQgPSBcImF1dG9cIjtcbiAgICAgICAgYnV0dG9uLnN0eWxlLm1hcmdpblRvcCA9IFwiMTElXCJcbiAgICAgICAgYnV0dG9uLnN0eWxlLmNvbG9yID0gXCJ3aGl0ZVwiXG5cbiAgICAgICAgY29uc3Qgd2luZG93UmVzaXplID0gd2luZG93Lm9ucmVzaXplO1xuICAgICAgICB3aW5kb3cub25yZXNpemUgPSAoKSA9PiB7XG4gICAgICAgICAgICB3aW5kb3dSZXNpemUoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMucmF0aW8gPCAwLjY3KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yYXRpbyA9IDAuNjc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtb2R1bGUuc3R5bGUuZm9udCA9ICgyNyp0aGlzLnJhdGlvIC0gMikgKyBcInB4IENvcHBlcnBsYXRlXCJcbiAgICAgICAgICAgIC8vIHJ1bGVCb3guc3R5bGUubGluZUhlaWdodCA9IFwiMTAwJVwiXG4gICAgICAgIH1cblxuICAgICAgICBtb2R1bGUuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcbiAgICAgICAgYmFja2dyb3VuZC5hcHBlbmRDaGlsZChtb2R1bGUpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiYmFja2dyb3VuZFwiKVswXS5hcHBlbmRDaGlsZChiYWNrZ3JvdW5kKVxuXG4gICAgICAgIC8vIHRoaXMuYmluZE1vdmVzQnV0dG9uKCk7XG4gICAgICAgIHJldHVybiBiYWNrZ3JvdW5kO1xuICAgIH1cblxuICAgIGRyYXdXaW5uaW5nU2NyZWVuKCkge1xuICAgICAgICBsZXQgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgIGltZy5zcmMgPSAnLi9yZXNvdXJjZXMvd29vZC5wbmcnO1xuICAgICAgICBpbWcub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jdHguZHJhd0ltYWdlKFxuICAgICAgICAgICAgICAgIGltZyxcbiAgICAgICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiBNYXRoLmZsb29yKChCb2FyZC5HUklEX1dJRFRILTIpIC8gMiksXG4gICAgICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogKE1hdGguZmxvb3IoKEJvYXJkLkdSSURfSEVJR0hULTIpIC8gMikrMC4yNSksXG4gICAgICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogMywgVmlldy5TUVVBUkVfRElNICogMS41KTtcbiAgICAgICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgdGhpcy5jdHguc3Ryb2tlKCk7XG5cbiAgICAgICAgICAgIHRoaXMuY3R4LmZvbnQgPSBcIjMwcHggQ29wcGVycGxhdGVcIjtcbiAgICAgICAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IDM7XG4gICAgICAgICAgICBsZXQgc3RyID0gXCJcIjtcbiAgICAgICAgICAgIGlmICh0aGlzLmdhbWUuY3VycmVudFBsYXllci50ZWFtID09PSBCb2FyZC5QTEFZRVJfVEVBTSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IFwiYmx1ZVwiO1xuICAgICAgICAgICAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gXCJkYXJrYmx1ZVwiO1xuICAgICAgICAgICAgICAgIHN0ciArPSBcIkJsdWVcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gXCJyZWRcIjtcbiAgICAgICAgICAgICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9IFwibWFyb29uXCI7XG4gICAgICAgICAgICAgICAgc3RyICs9IFwiUmVkXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHIgKz0gXCIgVmljdG9yeSFcIlxuICAgICAgICAgICAgdGhpcy5jdHguc3Ryb2tlVGV4dChzdHIsXG4gICAgICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogKEJvYXJkLkdSSURfV0lEVEggLyAyIC0gMSksXG4gICAgICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogKEJvYXJkLkdSSURfSEVJR0hUIC8gMiAtIDAuMjUpKTtcbiAgICAgICAgICAgIHRoaXMuY3R4LmZpbGxUZXh0KHN0cixcbiAgICAgICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAoQm9hcmQuR1JJRF9XSURUSCAvIDIgLSAxKSxcbiAgICAgICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAoQm9hcmQuR1JJRF9IRUlHSFQgLyAyIC0gMC4yNSkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmRyYXdQbGF5QWdhaW5CdXR0b24oKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBkcmF3UGxheUFnYWluQnV0dG9uKCkge1xuICAgICAgICB0aGlzLmN0eC5saW5lV2lkdGggPSAyO1xuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSAnY29ybmZsb3dlcmJsdWUnOyAgXG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gJyM1NDMwMDAnOyAgICAgIFxuICAgICAgICB0aGlzLmN0eC5maWxsUmVjdChcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIChCb2FyZC5HUklEX1dJRFRIIC8gMiAtIDAuNzUpLFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogKE1hdGguZmxvb3IoKEJvYXJkLkdSSURfSEVJR0hUKSAvIDIpKSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIDEuNSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIDAuNSk7XG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVJlY3QoXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAoQm9hcmQuR1JJRF9XSURUSCAvIDIgLSAwLjc1KSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIChNYXRoLmZsb29yKChCb2FyZC5HUklEX0hFSUdIVCkgLyAyKSksXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAxLjUsXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAwLjUpO1xuICAgICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9ICdibHVlJztcbiAgICAgICAgdGhpcy5jdHguZm9udCA9IFwiMjRweCBDb3BwZXJwbGF0ZVwiO1xuICAgICAgICB0aGlzLmN0eC5saW5lV2lkdGggPSAxO1xuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBcIndoaXRlXCI7XG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gXCJncmV5XCJcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlVGV4dChcIlBsYXkgQWdhaW4/XCIsXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAoQm9hcmQuR1JJRF9XSURUSCAvIDIgLSAwLjcwKSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIChCb2FyZC5HUklEX0hFSUdIVCAvIDIgKyAwLjMpKTtcbiAgICAgICAgdGhpcy5jdHguZmlsbFRleHQoXCJQbGF5IEFnYWluP1wiLFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogKEJvYXJkLkdSSURfV0lEVEggLyAyIC0gMC43MCksXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAoQm9hcmQuR1JJRF9IRUlHSFQgLyAyICsgMC4zKSk7XG4gICAgfVxuXG4gICAgZHJhd1VwZ3JhZGVDb25maXJtYXRpb24ocG9zKSB7XG4gICAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9ICdsaWdodHNreWJsdWUnOyAgICAgICAgXG4gICAgICAgIHRoaXMuY3R4LmZpbGxSZWN0KFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogcG9zLngsXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiBwb3MueSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIDEsXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAwLjM1KTtcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSAnY29ybmZsb3dlcmJsdWUnO1xuICAgICAgICB0aGlzLmN0eC5zdHJva2VSZWN0KFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogcG9zLngsXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiBwb3MueSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIDEsXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAwLjM1KTtcbiAgICAgICAgdGhpcy5jdHgubGluZVdpZHRoID0gMTtcbiAgICAgICAgdGhpcy5jdHguZm9udCA9IFwiMjBweCBDb3BwZXJwbGF0ZVwiO1xuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBcImRpbWdyZXlcIjtcbiAgICAgICAgdGhpcy5jdHguZmlsbFRleHQoXCJVcGdyYWRlP1wiLFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogcG9zLngsXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAocG9zLnkgKyAwLjI1KSk7XG4gICAgfVxuXG4gICAgZHJhd0JhcnJhY2tTZWxlY3Rpb24ocG9zKSB7XG4gICAgICAgIGxldCBuZXdQb3MgPSB0aGlzLmFkanVzdE1lbnVQb3NpdGlvbihwb3MpO1xuICAgICAgICB0aGlzLnRlYW0gPT09IEJvYXJkLkVORU1ZX1RFQU0gPyB0aGlzLmN0eC5maWxsU3R5bGUgPSBcInJlZFwiIDogdGhpcy5jdHguZmlsbFN0eWxlID0gXCJibHVlXCI7XG4gICAgICAgIGxldCB0cm9vcFNlbGVjdGlvbiA9IFtdO1xuICAgICAgICAgICAgdGhpcy5pbWFnZXMuYmFycmFjay5vbmxvYWQobmV3UG9zKTtcblxuICAgICAgICB0aGlzLmN0eC5mb250ID0gXCIzMHB4IENvcHBlcnBsYXRlXCI7XG4gICAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IFwid2hpdGVcIjtcbiAgICAgICAgdGhpcy5jdHgubGluZVdpZHRoID0gMztcbiAgICAgICAgdGhpcy5jdHguZmlsbFRleHQoXCJCdXkgTmV3IFRyb29wP1wiLFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogKG5ld1Bvcy54ICsgMC4zNSksXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAobmV3UG9zLnkgKyAwLjM1KSk7XG4gICAgXG4gICAgICAgIGxldCBpbmYgPSBuZXcgSW5mYW50cnkodGhpcy5nYW1lLmN1cnJlbnRQbGF5ZXIudGVhbSwge3k6IG5ld1Bvcy55KzAuNSwgeDogbmV3UG9zLnh9KTtcbiAgICAgICAgbGV0IGFyY2ggPSBuZXcgQXJjaGVyKHRoaXMuZ2FtZS5jdXJyZW50UGxheWVyLnRlYW0sIHt5OiBuZXdQb3MueSswLjUsIHg6IG5ld1Bvcy54KzF9KTtcbiAgICAgICAgbGV0IGRlZiA9IG5ldyBEZWZlbmRlcih0aGlzLmdhbWUuY3VycmVudFBsYXllci50ZWFtLCB7eTogbmV3UG9zLnkrMC41LCB4OiBuZXdQb3MueCsyfSk7XG4gICAgICAgIGluZi5ib2FyZCA9IHRoaXMuZ2FtZS5ib2FyZDtcbiAgICAgICAgYXJjaC5ib2FyZCA9IHRoaXMuZ2FtZS5ib2FyZDtcbiAgICAgICAgZGVmLmJvYXJkID0gdGhpcy5nYW1lLmJvYXJkO1xuICAgICAgICBpbmYudmlldyA9IHRoaXMuZ2FtZS52aWV3O1xuICAgICAgICBhcmNoLnZpZXcgPSB0aGlzLmdhbWUudmlldztcbiAgICAgICAgZGVmLnZpZXcgPSB0aGlzLmdhbWUudmlldztcbiAgICAgICAgdHJvb3BTZWxlY3Rpb24ucHVzaChpbmYpO1xuICAgICAgICB0cm9vcFNlbGVjdGlvbi5wdXNoKGFyY2gpO1xuICAgICAgICB0cm9vcFNlbGVjdGlvbi5wdXNoKGRlZik7XG4gICAgICAgIHRyb29wU2VsZWN0aW9uLmZvckVhY2goICh1bml0KSA9PiB7XG4gICAgICAgICAgICB1bml0LmRyYXcodGhpcy5jdHgsIHRoaXMuZ2FtZS5jdXJyZW50UGxheWVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cm9vcFNlbGVjdGlvbjtcbiAgICB9XG5cbiAgICBhZGp1c3RNZW51UG9zaXRpb24ocG9zKSB7XG4gICAgICAgIGxldCBuZXdQb3MgPSB7fTtcbiAgICAgICAgcG9zLnggPT09IDAgPyBuZXdQb3MueCA9IHBvcy54ICsgMC4yNSA6IG5ld1Bvcy54ID0gcG9zLnggLSAyLjI1O1xuICAgICAgICBwb3MueSA9PT0gMCA/IG5ld1Bvcy55ID0gcG9zLnkgKyAwLjUgOiBuZXdQb3MueSA9IHBvcy55IC0gMTtcbiAgICAgICAgcmV0dXJuIG5ld1BvcztcbiAgICB9XG5cbiAgICBkcmF3T3V0bGluZShwb3MpIHtcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSAneWVsbG93JztcbiAgICAgICAgdGhpcy5jdHgubGluZVdpZHRoID0gMTA7XG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVJlY3QoXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiBwb3MueCxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHBvcy55LFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNLFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNXG4gICAgICAgIClcbiAgICB9XG5cbiAgICBkcmF3TW92ZUhpZ2hsaWdodHMocG9zKSB7XG4gICAgICAgIHRoaXMuZHJhd0dyaWRTcXVhcmUocG9zLngsIHBvcy55LCAnc2VhZ3JlZW4nLCBcIm1lZGl1bXNlYWdyZWVuXCIpO1xuICAgIH1cblxuICAgIGRyYXdBdHRhY2tIaWdobGlnaHRzKHBvcykge1xuICAgICAgICB0aGlzLmRyYXdHcmlkU3F1YXJlKHBvcy54LCBwb3MueSwgXCJjb3JuZmxvd2VyYmx1ZVwiLCBcImxpZ2h0c2t5Ymx1ZVwiKVxuICAgIH1cblxuICAgIGRyYXdHcmlkRWxlbXMocG9zLCB1bml0UG9zLCBjbGlja2VkUG9zKSB7XG4gICAgICAgIGxldCBncmlkU3F1YXJlID0gdGhpcy5nYW1lLmJvYXJkLmdyaWQuZ2V0KHBvcyk7XG4gICAgICAgIGZvciAobGV0IGk9MDsgaSA8IGdyaWRTcXVhcmUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGdyaWRTcXVhcmVbaV0uZHJhdyh0aGlzLmN0eCwgdGhpcy5nYW1lLmN1cnJlbnRQbGF5ZXIsIHVuaXRQb3MsIGNsaWNrZWRQb3MpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpO1xuICAgIH1cblxuICAgIGRyYXdHcmlkU3F1YXJlKHgsIHksIG91dGxpbmVDb2xvciwgZmlsbENvbG9yKSB7XG4gICAgICAgIGlmIChmaWxsQ29sb3IpIHtcbiAgICAgICAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IGZpbGxDb2xvcjtcbiAgICAgICAgICAgIHRoaXMuY3R4Lmdsb2JhbEFscGhhID0gMC42MDtcbiAgICAgICAgICAgIHRoaXMuY3R4LmZpbGxSZWN0KFxuICAgICAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHgsXG4gICAgICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogeSxcbiAgICAgICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0sXG4gICAgICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSBvdXRsaW5lQ29sb3I7XG4gICAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IDI7XG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVJlY3QoXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB4LFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNICogeSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTVxuICAgICAgICApXG4gICAgICAgIHRoaXMuY3R4Lmdsb2JhbEFscGhhID0gMTtcbiAgICB9XG5cbiAgICByZW5kZXJJbWcoKSB7XG4gICAgICAgIGxldCBwaXhlbFdpZHRoID0gQm9hcmQuR1JJRF9XSURUSCAqIFZpZXcuU1FVQVJFX0RJTTtcbiAgICAgICAgbGV0IHBpeGVsSGVpZ2h0ID0gKEJvYXJkLkdSSURfSEVJR0hUKzEpICogVmlldy5TUVVBUkVfRElNO1xuICAgICAgICB0aGlzLmN0eC5jYW52YXMud2lkdGggPSBwaXhlbFdpZHRoO1xuICAgICAgICB0aGlzLmN0eC5jYW52YXMuaGVpZ2h0ID0gcGl4ZWxIZWlnaHQ7XG4gICAgICAgIHRoaXMucmF0aW8gPSBNYXRoLm1pbihcbiAgICAgICAgICAgIHdpbmRvdy5pbm5lckhlaWdodCAvIHRoaXMuY3R4LmNhbnZhcy5oZWlnaHQsXG4gICAgICAgICAgICB3aW5kb3cuaW5uZXJXaWR0aCAvIHRoaXMuY3R4LmNhbnZhcy53aWR0aFxuICAgICAgICApXG4gICAgICAgIC8vIHRoaXMuY3R4LnNjYWxlKHRoaXMucmF0aW8sIHRoaXMucmF0aW8pO1xuICAgICAgICBsZXQgaW1hZ2VzID0ge307XG4gICAgICAgIGltYWdlcy5iYWNrZ3JvdW5kID0gbmV3IEltYWdlKCk7XG4gICAgICAgIGltYWdlcy5iYWNrZ3JvdW5kLnNyYyA9IFwiLi9yZXNvdXJjZXMvZ3Jhc3MyLnBuZ1wiO1xuICAgICAgICBpbWFnZXMuYmFja2dyb3VuZC5vbmxvYWQgPSAodW5pdFBvcywgY2xpY2tlZFBvcykgPT4ge1xuICAgICAgICAgICAgdGhpcy5jdHguZHJhd0ltYWdlKFxuICAgICAgICAgICAgICAgIGltYWdlcy5iYWNrZ3JvdW5kLCAwLCAwLFxuICAgICAgICAgICAgICAgcGl4ZWxXaWR0aCwgcGl4ZWxIZWlnaHQsXG4gICAgICAgICAgICAgICAwLCAwLFxuICAgICAgICAgICAgICAgcGl4ZWxXaWR0aCwgcGl4ZWxIZWlnaHQpO1xuICAgICAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICB0aGlzLmN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgIHRoaXMuZHJhd0JvYXJkV2l0aG91dE9ubG9hZCh1bml0UG9zLCBjbGlja2VkUG9zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGltYWdlcy5iYXJyYWNrID0gbmV3IEltYWdlKCk7XG4gICAgICAgIGltYWdlcy5iYXJyYWNrLnNyYyA9IFwiLi9yZXNvdXJjZXMvd29vZC5wbmdcIjtcbiAgICAgICAgaW1hZ2VzLmJhcnJhY2sub25sb2FkID0gKHBvcykgPT4ge1xuICAgICAgICAgICAgdGhpcy5jdHguZHJhd0ltYWdlKFxuICAgICAgICAgICAgICAgIGltYWdlcy5iYXJyYWNrLFxuICAgICAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHBvcy54LFxuICAgICAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHBvcy55LFxuICAgICAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIDMsIFZpZXcuU1FVQVJFX0RJTSAqIDEuNSk7XG4gICAgICAgICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBpbWFnZXM7XG4gICAgfVxuXG4gICAgLy8gYmFja2dyb3VuZC5jbGFzc0xpc3QuYWRkKFwiLm1vdmVzQmFja2dyb3VuZFwiKVxuICAgIC8vIG1vZHVsZS5jbGFzc0xpc3QuYWRkKFwiLm5vTW9yZU1vdmVzXCIpO1xuICAgIC8vIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiLm1vdmVzQnV0dG9uXCIpO1xuXG4gICAgYmluZEV2ZW50cyhjdHgpIHtcbiAgICAgICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5idXR0b25cIik7XG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVCdXR0b24uYmluZCh0aGlzKSk7XG4gICAgICAgIGNvbnN0IGFib3V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hYm91dFwiKTtcbiAgICAgICAgaWYgKGFib3V0KSB7YWJvdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuaGFuZGxlQWJvdXQuYmluZCh0aGlzKSk7fVxuICAgICAgICBjb25zdCBydWxlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucnVsZXNcIik7XG4gICAgICAgIGlmIChydWxlcykge3J1bGVzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhhbmRsZVJ1bGVzLmJpbmQodGhpcykpO31cbiAgICAgICAgY3R4LmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlQ2xpY2suYmluZCh0aGlzKSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhhbmRsZUJhY2tncm91bmQuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuYmluZE1vdmVzQnV0dG9uKCk7XG4gICAgfVxuXG4gICAgYmluZE1vdmVzQnV0dG9uKCkge1xuICAgICAgICBjb25zdCBtb3Zlc0JhY2tncm91bmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vdmVzQmFja2dyb3VuZFwiKTtcbiAgICAgICAgaWYgKG1vdmVzQmFja2dyb3VuZCkge1xuICAgICAgICAgICAgbW92ZXNCYWNrZ3JvdW5kLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhhbmRsZU1vdmVzQmFja2dyb3VuZC5iaW5kKHRoaXMsIG1vdmVzQmFja2dyb3VuZCkpXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IG1vdmVzQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb3Zlc0J1dHRvblwiKTtcbiAgICAgICAgaWYgKG1vdmVzQnV0dG9uKSB7XG4gICAgICAgICAgICBtb3Zlc0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVNb3Zlc0J1dHRvbi5iaW5kKHRoaXMsIG1vdmVzQmFja2dyb3VuZCkpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBtb3Zlc0J1dHRvbjtcbiAgICB9XG5cbiAgICBoYW5kbGVBYm91dChldmVudCkge1xuICAgICAgICBjb25zdCBlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hYm91dHRpdGxlXCIpO1xuICAgICAgICB0aGlzLmludmlzaWZ5QnV0dG9ucygpO1xuICAgICAgICBlLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgfVxuXG4gICAgaGFuZGxlUnVsZXMoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucnVsZXN0aXRsZVwiKTtcbiAgICAgICAgdGhpcy5pbnZpc2lmeUJ1dHRvbnMoKTtcbiAgICAgICAgZS5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgIH1cblxuICAgIGhhbmRsZUJ1dHRvbihldmVudCkge1xuICAgICAgICBjb25zdCBlMSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWJvdXRcIilcbiAgICAgICAgY29uc3QgZTIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJ1bGVzXCIpXG5cbiAgICAgICAgdGhpcy5pbnZpc2lmeUJ1dHRvbnMoKTtcbiAgICAgICAgZTEuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICAgICAgZTIuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICB9XG5cbiAgICBoYW5kbGVDbGljayhldmVudCkge1xuICAgICAgICBsZXQgeCA9IE1hdGguZmxvb3IoZXZlbnQub2Zmc2V0WCAvIChWaWV3LlNRVUFSRV9ESU0gKiB0aGlzLnJhdGlvKSlcbiAgICAgICAgbGV0IHkgPSBNYXRoLmZsb29yKGV2ZW50Lm9mZnNldFkgLyAoVmlldy5TUVVBUkVfRElNICogdGhpcy5yYXRpbykpXG4gICAgICAgIGxldCB4RXhhY3QgPSBldmVudC5vZmZzZXRYIC8gKFZpZXcuU1FVQVJFX0RJTSAqIHRoaXMucmF0aW8pO1xuICAgICAgICBsZXQgeUV4YWN0ID0gZXZlbnQub2Zmc2V0WSAvIChWaWV3LlNRVUFSRV9ESU0gKiB0aGlzLnJhdGlvKTtcbiAgICAgICAgbGV0IHBvcyA9IHt5LCB4fTtcbiAgICAgICAgbGV0IHBvc0V4YWN0ID0ge3k6IHlFeGFjdCwgeDogeEV4YWN0fTtcblxuICAgICAgICBpZiAodGhpcy5nYW1lLmJvYXJkLmlzV29uKCkpIHtcbiAgICAgICAgLy8gICAgdGhpcy5kcmF3V2lubmluZ1NjcmVlbigpO1xuICAgICAgICAgICAgaWYgKHdpbGxQbGF5QWdhaW4ocG9zRXhhY3QpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLnJlc2V0R2FtZSh0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdCb2FyZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kcmF3Qm9hcmQoKTtcbiAgICAgICAgICAgIGlmIChpc09uQm9hcmQocG9zKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5jdHguY2xpY2tlZFBvcyA9IHBvc1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5jdHguZXhhY3RQb3MgPSBwb3NFeGFjdDtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUuY2FsbFN0YXRlTWFjaGluZSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0J1dHRvbihwb3NFeGFjdCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUuc3dpdGNoUGxheWVycygpO1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhd0JvYXJkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoYW5kbGVCYWNrZ3JvdW5kKGV2ZW50KSB7XG4gICAgICAgIGlmICghZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5iYWNrZ3JvdW5kXCIpLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd0JvYXJkKCk7XG4gICAgICAgICAgICB0aGlzLmdhbWUuc3RhdGUgPSBcInVuc2VsZWN0ZWRcIjtcbiAgICAgICAgICAgIGNvbnN0IG1vdmVzQmFja2dyb3VuZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW92ZXNCYWNrZ3JvdW5kXCIpO1xuICAgICAgICAgICAgaWYgKG1vdmVzQmFja2dyb3VuZCkgbW92ZXNCYWNrZ3JvdW5kLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlTW92ZXNCdXR0b24obW92ZXNCYWNrZ3JvdW5kLCBldmVudCkge1xuICAgICAgICB0aGlzLmdhbWUuc3dpdGNoUGxheWVycygpO1xuICAgICAgICBtb3Zlc0JhY2tncm91bmQuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gICAgICAgIHRoaXMuZHJhd0JvYXJkKCk7XG4gICAgfVxuXG4gICAgaGFuZGxlTW92ZXNCYWNrZ3JvdW5kKG1vdmVzQmFja2dyb3VuZCwgZXZlbnQpIHtcbiAgICAgICAgaWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5vTW9yZU1vdmVzXCIpLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgICAgIG1vdmVzQmFja2dyb3VuZC5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhd1VwZ3JhZGVCdXR0b24odW5pdCwgY3R4LCB4LCB5KSB7XG4gICAgdW5pdC50ZWFtID09PSBCb2FyZC5FTkVNWV9URUFNID8gY3R4LmZpbGxTdHlsZSA9IFwicmVkXCIgOiBjdHguZmlsbFN0eWxlID0gXCJibHVlXCI7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5hcmMoXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHggKyBWaWV3LlNRVUFSRV9ESU0gKiAuMTUsXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHkgKyBWaWV3LlNRVUFSRV9ESU0gKiAuMTUsXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIC4xLFxuICAgICAgICAwLCAyLjAgKiBNYXRoLlBJKTtcbiAgICBjdHguZmlsbCgpO1xuXG4gICAgY3R4LmZpbGxTdHlsZSA9IFwid2hpdGVcIjtcbiAgICBjdHguZm9udCA9IFwiMzBweCBDb3BwZXJwbGF0ZVwiO1xuICAgIGN0eC5maWxsVGV4dChcIitcIiwgVmlldy5TUVVBUkVfRElNICogeCArIFZpZXcuU1FVQVJFX0RJTSAqIDAuMDYsXG4gICAgVmlldy5TUVVBUkVfRElNICogeSArIFZpZXcuU1FVQVJFX0RJTSAqIC4yMik7XG59XG5cbmZ1bmN0aW9uIGRyYXdTdGF0cyh1bml0LCBjdHgsIHgsIHkpIHtcbiAgICB1bml0LnRlYW0gPT09IEJvYXJkLkVORU1ZX1RFQU0gPyBjdHguZmlsbFN0eWxlID0gXCJyZWRcIiA6IGN0eC5maWxsU3R5bGUgPSBcImJsdWVcIjtcbiAgICBjdHguZm9udCA9IFwiMzVweCBDb3BwZXJwbGF0ZVwiO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9ICdkaW1ncmV5JztcbiAgICBjdHgubGluZVdpZHRoID0gMztcbiAgICBjdHguc3Ryb2tlVGV4dChcbiAgICAgICAgXCJBXCIrdW5pdC5hdHRhY2sudG9TdHJpbmcoKSxcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogeCArIFZpZXcuU1FVQVJFX0RJTSAqIC4zLFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB5ICsgVmlldy5TUVVBUkVfRElNICogLjUwKTtcbiAgICBjdHguc3Ryb2tlVGV4dChcbiAgICAgICAgXCJEXCIrdW5pdC5kZWZlbnNlLnRvU3RyaW5nKCksXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHggKyBWaWV3LlNRVUFSRV9ESU0gKiAuMyxcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogeSArIFZpZXcuU1FVQVJFX0RJTSAqIC43NSk7XG4gICAgY3R4LmZpbGxUZXh0KFxuICAgICAgICBcIkFcIit1bml0LmF0dGFjay50b1N0cmluZygpLFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB4ICsgVmlldy5TUVVBUkVfRElNICogLjMsXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHkgKyBWaWV3LlNRVUFSRV9ESU0gKiAuNTApO1xuICAgIGN0eC5maWxsVGV4dChcbiAgICAgICAgXCJEXCIrdW5pdC5kZWZlbnNlLnRvU3RyaW5nKCksXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHggKyBWaWV3LlNRVUFSRV9ESU0gKiAuMyxcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogeSArIFZpZXcuU1FVQVJFX0RJTSAqIC43NSk7XG59XG5cbkJhcnJhY2sucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihjdHgpIHtcbiAgICB0aGlzLnRlYW0gPT09IEJvYXJkLkVORU1ZX1RFQU0gPyBjdHguZmlsbFN0eWxlID0gXCJyZWRcIiA6IGN0eC5maWxsU3R5bGUgPSBcImJsdWVcIjtcbiAgICBjdHguZmlsbFJlY3QoXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHRoaXMucG9zLnggKyBWaWV3LlNRVUFSRV9ESU0gKiAuMTAsXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHRoaXMucG9zLnkgKyBWaWV3LlNRVUFSRV9ESU0gKiAuNzAsXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIC44MCxcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogLjIwKTtcblxuICAgIHRoaXMuaW1hZ2Uub25sb2FkID0gKCkgPT4ge1xuICAgICAgICBjdHguZHJhd0ltYWdlKFxuICAgICAgICAgICAgdGhpcy5pbWFnZSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHRoaXMucG9zLngsXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB0aGlzLnBvcy55LFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNLCBWaWV3LlNRVUFSRV9ESU0pO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9O1xuICAgIHRoaXMuaW1hZ2Uub25sb2FkKCk7XG59XG5cbkJhc2UucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihjdHgpIHtcbiAgICB0aGlzLnRlYW0gPT09IEJvYXJkLkVORU1ZX1RFQU0gPyBjdHguZmlsbFN0eWxlID0gXCJyZWRcIiA6IGN0eC5maWxsU3R5bGUgPSBcImJsdWVcIjtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LmFyYyhcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogdGhpcy5wb3MueCArIFZpZXcuU1FVQVJFX0RJTSAqIC41MCxcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogdGhpcy5wb3MueSArIFZpZXcuU1FVQVJFX0RJTSAqIC41MCxcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogLjM1LFxuICAgICAgICAwLCAyLjAgKiBNYXRoLlBJKTtcbiAgICBjdHguZmlsbCgpO1xufVxuXG5UcmVhc3VyZS5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uKGN0eCkge1xuICAgIHRoaXMuaW1hZ2Uub25sb2FkID0gKCkgPT4ge1xuICAgICAgICBjdHguZHJhd0ltYWdlKFxuICAgICAgICAgICAgdGhpcy5pbWFnZSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHRoaXMucG9zLngsXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB0aGlzLnBvcy55LFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNLCBWaWV3LlNRVUFSRV9ESU0pO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9O1xuICAgIHRoaXMuaW1hZ2Uub25sb2FkKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkcmF3VXBncmFkZUNvbmZpcm1hdGlvbihjdHgsIHBvcykge1xuICAgIGN0eC5maWxsU3R5bGUgPSAnbGlnaHRza3libHVlJzsgICAgICAgIFxuICAgIGN0eC5maWxsUmVjdChcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogcG9zLngsXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHBvcy55LFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAxLFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAwLjM1KTtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSAnY29ybmZsb3dlcmJsdWUnO1xuICAgIGN0eC5zdHJva2VSZWN0KFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiBwb3MueCxcbiAgICAgICAgVmlldy5TUVVBUkVfRElNICogcG9zLnksXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIDEsXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIDAuMzUpO1xuICAgIGN0eC5saW5lV2lkdGggPSAxO1xuICAgIGN0eC5mb250ID0gXCIyMHB4IENvcHBlcnBsYXRlXCI7XG4gICAgY3R4LmZpbGxTdHlsZSA9IFwiZGltZ3JleVwiO1xuICAgIGN0eC5maWxsVGV4dChcIlVwZ3JhZGU/XCIsXG4gICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHBvcy54LFxuICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiAocG9zLnkgKyAwLjI1KSk7XG59XG5cblVuaXQucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihjdHgsIGN1cnJlbnRQbGF5ZXIsIHVuaXRQb3MsIGNsaWNrZWRQb3MpIHtcbiAgICB0aGlzLnRlYW0gPT09IEJvYXJkLkVORU1ZX1RFQU0gPyBjdHguZmlsbFN0eWxlID0gXCJyZWRcIiA6IGN0eC5maWxsU3R5bGUgPSBcImJsdWVcIjtcblxuICAgIHRoaXMuaW1hZ2Uub25sb2FkID0gKCkgPT4ge1xuICAgICAgICBjdHguZHJhd0ltYWdlKFxuICAgICAgICAgICAgdGhpcy5pbWFnZSxcbiAgICAgICAgICAgIFZpZXcuU1FVQVJFX0RJTSAqIHRoaXMucG9zLngsXG4gICAgICAgICAgICBWaWV3LlNRVUFSRV9ESU0gKiB0aGlzLnBvcy55LFxuICAgICAgICAgICAgVmlldy5TUVVBUkVfRElNLCBWaWV3LlNRVUFSRV9ESU0pO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgZHJhd1N0YXRzKHRoaXMsIGN0eCwgdGhpcy5wb3MueCwgdGhpcy5wb3MueSk7XG4gICAgICAgIGlmICh0aGlzLmlzVXBncmFkYWJsZShjdXJyZW50UGxheWVyKSkge1xuICAgICAgICAgICAgZHJhd1VwZ3JhZGVCdXR0b24odGhpcywgY3R4LCB0aGlzLnBvcy54LCB0aGlzLnBvcy55KTtcbiAgICAgICAgICAgIGlmICh1bml0UG9zICYmIGNsaWNrZWRQb3MpIHtcbiAgICAgICAgICAgICAgICBkcmF3VXBncmFkZUNvbmZpcm1hdGlvbihjdHgsIHVuaXRQb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmltYWdlLm9ubG9hZCgpO1xuICAgIC8vIHRoaXMuaW1hZ2Uuc3JjID0gdGhpcy5pbWFnZS5zcmM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFZpZXc7IiwiY2xhc3MgUGxheWVyIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZWFtLCB0cmVhc3VyZSwgYmFzZSkge1xuICAgICAgICB0aGlzLnRlYW0gPSB0ZWFtO1xuICAgICAgICB0aGlzLnVuaXRzID0gW107XG4gICAgICAgIHRoaXMudHJlYXN1cmUgPSB0cmVhc3VyZTtcbiAgICAgICAgdGhpcy5iYXNlO1xuICAgIH1cblxuICAgIHJlbW92ZVVuaXQodW5pdCkge1xuICAgICAgICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICB3aGlsZSAoIWZvdW5kICYmIGkgPCB0aGlzLnVuaXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudW5pdHNbaSsrXS5wb3MuZXF1YWxzKHVuaXQucG9zKSkge1xuICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVuaXRzLnNwbGljZShpLTEsIDEpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnVuaXRzLCB1IClcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pdHM7XG4gICAgfVxuXG4gICAgdHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBsYXllcjsiLCJpbXBvcnQgUGxheWVyIGZyb20gXCIuL3BsYXllclwiO1xuXG5jbGFzcyBIdW1hblBsYXllciBleHRlbmRzIFBsYXllciB7XG4gICAgY29uc3RydWN0b3IodGVhbSwgdHJlYXN1cmUpIHtcbiAgICAgICAgc3VwZXIodGVhbSwgdHJlYXN1cmUpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSHVtYW5QbGF5ZXI7IiwiaW1wb3J0IEJvYXJkIGZyb20gXCIuL2JvYXJkXCI7XG5pbXBvcnQgSHVtYW5QbGF5ZXIgZnJvbSBcIi4vaHVtYW5QbGF5ZXJcIjtcbmltcG9ydCB7IGlzVXBncmFkZUJ1dHRvbiwgaXNVcGdyYWRlQ29uZmlybWF0aW9uIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuY29uc3QgTUFYX0FQID0gNDtcbmNvbnN0IE1BWF9VTklUUyA9IDg7XG5cbmNsYXNzIEdhbWUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnZpZXcgPSBudWxsO1xuICAgICAgICB0aGlzLnNldEdhbWUoKTtcbiAgICAgICAgLy8gdGhpcy5zZXRDb25uZWN0aW9uKCk7XG4gICAgfVxuXG4gICAgcmVzZXRHYW1lKHZpZXcpIHtcbiAgICAgICAgdGhpcy52aWV3ID0gdmlldztcbiAgICAgICAgdGhpcy5zZXRHYW1lKCk7XG4gICAgfVxuXG4gICAgc2V0R2FtZSgpIHtcbiAgICAgICAgdGhpcy5ib2FyZCA9IG5ldyBCb2FyZCgpO1xuICAgICAgICB0aGlzLnN0YXRlID0gJ3Vuc2VsZWN0ZWQnO1xuICAgICAgICB0aGlzLnBsYXllciA9IG5ldyBIdW1hblBsYXllcihCb2FyZC5QTEFZRVJfVEVBTSwgdGhpcy5ib2FyZC50cmVhc3VyZS5wbGF5ZXIpO1xuICAgICAgICB0aGlzLmVuZW15ID0gbmV3IEh1bWFuUGxheWVyKEJvYXJkLkVORU1ZX1RFQU0sIHRoaXMuYm9hcmQudHJlYXN1cmUuZW5lbXkpO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnBsYXllcik7XG4gICAgICAgIHRoaXMuY3VycmVudFBsYXllciA9IHRoaXMucGxheWVyO1xuICAgICAgICB0aGlzLmFjdGlvblBvaW50cyA9IE1BWF9BUDtcbiAgICAgICAgdGhpcy5jdHggPSB7fTsgLy97IGNsaWNrZWRQb3MsIHNlbGVjdGVkU3F1YXJlIH1cbiAgICB9XG5cbiAgICAvL05leHQgU3RlcHM6XG4gICAgLy8tIGNoZWNrIGlmIHBsYXllciB0cmVhc3VyZSBnZXRzIHVwZGF0ZWQgd2hlbiB0cmVhc3VyZSBjaGFuZ2VzIHBvc2l0aW9uXG4gICAgLy8tIGlmIG5vIHVuaXRzIGV4aXN0LCBidXkgdW5pdFxuXG4gICAgc2V0Q29ubmVjdGlvbigpIHtcbiAgICAgICAgcmVwbHkgPSBcIlwiO1xuICAgICAgICBjb25uID0gbmV3IFNvY2tldDtcblxuICAgICAgICAvLyBpZiAoY29ubi5vcGVuKFwiaHR0cDovLzEyNy4wLjAuMTo1NTAwL2luZGV4Lmh0bWxcIikpIHtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKFwiSElcIik7XG4gICAgICAgIC8vICAgICAvLyBjb25uLndyaXRlKFwiR0VUIC9pbmRleC5odG1sIEhUVFAvMS4wXFxuXFxuXCIpO1xuICAgICAgICAvLyAgICAgLy8gcmVwbHkgPSBjb25uLnJlYWQoOTk5OTk5KTtcbiAgICAgICAgLy8gICAgIGNvbm4uY2xvc2UoKTtcbiAgICAgICAgLy8gfVxuICAgIH1cblxuICAgIHN3aXRjaFBsYXllcnMoKSB7XG4gICAgICAgIHRoaXMuYm9hcmQuZ3JpZC5mb3JFYWNoKChjb2wpID0+IHtcbiAgICAgICAgICAgIGNvbC5mb3JFYWNoKChyb3cpID0+IHtcbiAgICAgICAgICAgICAgICByb3cuZm9yRWFjaCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5wYXJlbnRUeXBlKCkgPT09ICdVbml0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5oYXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5oYXNBdHRhY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5oYXNVcGdyYWRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMuYWN0aW9uUG9pbnRzID0gTUFYX0FQO1xuICAgICAgICB0aGlzLnN0YXRlID0gJ3Vuc2VsZWN0ZWQnO1xuICAgICAgICB0aGlzLmN1cnJlbnRQbGF5ZXIgPT09IHRoaXMucGxheWVyID8gdGhpcy5jdXJyZW50UGxheWVyID0gdGhpcy5lbmVteSA6IHRoaXMuY3VycmVudFBsYXllciA9IHRoaXMucGxheWVyO1xuICAgIH1cblxuICAgIGNhbGxTdGF0ZU1hY2hpbmUoKSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRQbGF5ZXIudHlwZSgpID09PSAnSHVtYW5QbGF5ZXInKVxuICAgICAgICAgICAgdGhpcy5zdGF0ZU1hY2hpbmUodGhpcy5ib2FyZC5ncmlkLmdldCh0aGlzLmN0eC5jbGlja2VkUG9zKSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMuc3RhdGVNYWNoaW5lKHRoaXMuY3VycmVudFBsYXllci5jaG9vc2VNb3ZlKCkpO1xuICAgIH1cblxuICAgIC8vY3R4IC0+IHtjbGlja2VkUG9zIGFsd2F5cyBzZXQsIHNlbGVjdGVkU3F1YXJlIHRoYXQgd2lsbCBiZSBzZXQgaW4gdW5zZWxlY3RlZCBzdGFnZX1cbiAgICBzdGF0ZU1hY2hpbmUoc3F1YXJlKSB7XG4gICAgICAgIC8vIGxldCBzcXVhcmUgPSB0aGlzLmJvYXJkLmdyaWQuZ2V0KHRoaXMuY3R4LmNsaWNrZWRQb3MpO1xuICAgICAgICBcbiAgICAgICAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlICd1bnNlbGVjdGVkJzpcbiAgICAgICAgICAgICAgICB0aGlzLnJlZGlyZWN0U3RhdGUoc3F1YXJlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3VuaXQnOlxuICAgICAgICAgICAgICAgIC8vaWYgYWN0aW9uIHRha2VuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uVGFrZW4odGhpcy5jdHguY2xpY2tlZFBvcywgdGhpcy5jdHguc2VsZWN0ZWRTcXVhcmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4ID0ge307XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAndW5zZWxlY3RlZCc7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMudmlldy5kcmF3Qm9hcmQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYm9hcmQuaXNXb24oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3LmRyYXdCb2FyZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3LmRyYXdXaW5uaW5nU2NyZWVuKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hY3Rpb25Qb2ludHMgPT09IDApIHsgdGhpcy5zd2l0Y2hQbGF5ZXJzKCk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5kcmF3Qm9hcmQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gLy9lbHNlIGlmIGFjdGlvbiBub3QgdGFrZW5cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWRpcmVjdFN0YXRlKHNxdWFyZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMubm9Nb3JlTW92ZXNEaXNwbGF5KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdiYXJyYWNrJzpcbiAgICAgICAgICAgICAgICAvL2lmIHVuaXQgaXMgYm91Z2h0XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudW5pdEJvdWdodCh0aGlzLmN0eC5leGFjdFBvcywgdGhpcy5jdHgubWVudSwgdGhpcy5jdHguc2VsZWN0ZWRTcXVhcmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4ID0ge307XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAndW5zZWxlY3RlZCc7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGlvblBvaW50cyA9PT0gMCkgeyB0aGlzLnN3aXRjaFBsYXllcnMoKTsgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXcuZHJhd0JvYXJkKCk7XG4gICAgICAgICAgICAgICAgfSAvL2Vsc2UgaWYgdW5pdCBpcyBub3QgYm91Z2h0XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVkaXJlY3RTdGF0ZShzcXVhcmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm5vTW9yZU1vdmVzRGlzcGxheSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndXBncmFkZSc6XG4gICAgICAgICAgICAgICAgLy9pZiB1bml0IGlzIHVwZ3JhZGVkXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudW5pdFVwZ3JhZGVkKHRoaXMuY3R4LmV4YWN0UG9zLCB0aGlzLmN0eC5zZWxlY3RlZFNxdWFyZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9ICd1bnNlbGVjdGVkJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uUG9pbnRzID09PSAwKSB7IHRoaXMuc3dpdGNoUGxheWVycygpOyB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5kcmF3Qm9hcmQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVkaXJlY3RTdGF0ZShzcXVhcmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm5vTW9yZU1vdmVzRGlzcGxheSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkVSUk9SOiB1bmRlZmluZWQgc3RhdGVcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWRpcmVjdFN0YXRlKHNxdWFyZSkge1xuICAgICAgICB0aGlzLnZpZXcuZHJhd0JvYXJkKCk7XG4gICAgICAgIC8vaWYgdW5pdCB1cGdyYWRlIGlzIHNlbGVjdGVkXG4gICAgICAgIGlmICh0aGlzLnVuaXRVcGdyYWRlYWJsZSh0aGlzLmN0eC5leGFjdFBvcywgc3F1YXJlLmxhc3QoKSkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAndXBncmFkZSc7XG4gICAgICAgIH0gLy9pZiB1bml0IGlzIHNlbGVjdGVkXG4gICAgICAgIGVsc2UgaWYgKHRoaXMudW5pdFNlbGVjdGVkKHNxdWFyZS5sYXN0KCkpKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gJ3VuaXQnO1xuICAgICAgICB9IC8vZWxzZSBpZiBiYXJyYWNrIGlzIHNlbGVjdGVkXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuYWN0aW9uUG9pbnRzID4gMSAmJiB0aGlzLmN1cnJlbnRQbGF5ZXIudW5pdHMubGVuZ3RoIDwgTUFYX1VOSVRTXG4gICAgICAgICAgICAmJiB0aGlzLmJhcnJhY2tTZWxlY3RlZChzcXVhcmUuZmlyc3QoKSkpIHtcbiAgICAgICAgICAgIHRoaXMuY3R4Lm1lbnUgPSB0aGlzLnZpZXcuZHJhd0JhcnJhY2tTZWxlY3Rpb24oc3F1YXJlLmZpcnN0KCkucG9zKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAnYmFycmFjayc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gJ3Vuc2VsZWN0ZWQnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3R4LnNlbGVjdGVkU3F1YXJlID0gc3F1YXJlO1xuICAgIH1cblxuICAgIG5vTW9yZU1vdmVzRGlzcGxheSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1vdmVzQXZhaWxhYmxlKCkgJiYgdGhpcy5hY3Rpb25Qb2ludHMgPCBNQVhfQVApIHtcbiAgICAgICAgICAgIGNvbnN0IG5vTW9yZU1vdmVzID0gdGhpcy52aWV3Lm5vTW9yZU1vdmVzLnF1ZXJ5U2VsZWN0b3IoXCIubm9Nb3JlTW92ZXNcIik7XG4gICAgICAgICAgICBjb25zdCBidXR0b24gPSBub01vcmVNb3Zlcy5xdWVyeVNlbGVjdG9yKFwiLm1vdmVzQnV0dG9uXCIpXG4gICAgICAgIFxuICAgICAgICAgICAgbm9Nb3JlTW92ZXMuaW5uZXJIVE1MID0gdGhpcy52aWV3LnVwZGF0ZU5vTW9yZU1vdmVzU3RyKCk7XG4gICAgICAgICAgICBub01vcmVNb3Zlcy5hcHBlbmRDaGlsZChidXR0b24pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnZpZXcubm9Nb3JlTW92ZXMuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBtb3Zlc0F2YWlsYWJsZSgpIHtcbiAgICAgICAgbGV0IGJvb2wgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jdXJyZW50UGxheWVyLnVuaXRzLmZvckVhY2godW5pdCA9PiB7XG4gICAgICAgICAgICBib29sIHx8PSAhdW5pdC5oYXNNb3ZlZDtcbiAgICAgICAgICAgIGlmICghdW5pdC5oYXNBdHRhY2tlZCkge1xuICAgICAgICAgICAgICAgIHVuaXQuZ2V0QXR0YWNrcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYm9vbCB8fD0gIXVuaXQuaGFzVXBncmFkZWQgJiYgdW5pdC5hdHRhY2tzLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICBib29sIHx8PSB0aGlzLmFjdGlvblBvaW50cyA+IDEgJiYgdW5pdC5pc1VwZ3JhZGFibGUodGhpcy5jdXJyZW50UGxheWVyKTtcbiAgICAgICAgICAgIGJvb2wgfHw9IHRoaXMuYWN0aW9uUG9pbnRzID4gMSAmJiB0aGlzLmJhcnJhY2tzRW1wdHkoKTtcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIGJvb2w7XG4gICAgfVxuXG4gICAgYmFycmFja3NFbXB0eSgpIHtcbiAgICAgICAgbGV0IGJhcnJhY2tzO1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50UGxheWVyID09PSB0aGlzLnBsYXllcikge1xuICAgICAgICAgICAgYmFycmFja3MgPSB0aGlzLmJvYXJkLmJhcnJhY2tzLnBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJhcnJhY2tzID0gdGhpcy5ib2FyZC5iYXJyYWNrcy5lbmVteTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXMgPSBmYWxzZTtcbiAgICAgICAgYmFycmFja3MuZm9yRWFjaChiID0+IHtcbiAgICAgICAgICAgIGxldCBib29sID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnN0IGJhcnJhY2tTcXVhcmUgPSB0aGlzLmJvYXJkLmdyaWQuZ2V0KGIucG9zKVxuICAgICAgICAgICAgYmFycmFja1NxdWFyZS5mb3JFYWNoKHVuaXQgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh1bml0LnBhcmVudFR5cGUoKSA9PT0gJ1VuaXQnKSBib29sID0gZmFsc2U7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgcmVzIHx8PSBib29sO1xuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIHVuaXRVcGdyYWRlYWJsZShwb3MsIHVuaXQpIHtcbiAgICAgICAgbGV0IHVuaXRVcGdyYWRlYWJsZSA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5hY3Rpb25Qb2ludHMgPiAxICYmIHVuaXQgJiYgdW5pdC5wYXJlbnRUeXBlKCkgPT09ICdVbml0JyAmJlxuICAgICAgICAgICAgdW5pdC5pc1VwZ3JhZGFibGUodGhpcy5jdXJyZW50UGxheWVyKSAmJiBpc1VwZ3JhZGVCdXR0b24odW5pdC5wb3MsIHBvcykpIHtcbiAgICAgICAgICAgICAgICB1bml0VXBncmFkZWFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMudmlldy5kcmF3Qm9hcmQodW5pdC5wb3MsIHBvcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuaXRVcGdyYWRlYWJsZTtcbiAgICB9XG5cbiAgICB1bml0VXBncmFkZWQocG9zLCBzcXVhcmUpIHtcbiAgICAgICAgbGV0IHVuaXRVcGdyYWRlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgdW5pdCA9IHNxdWFyZS5sYXN0KCk7XG4gICAgICAgIGlmICh1bml0ICYmIHVuaXQucGFyZW50VHlwZSgpID09PSAnVW5pdCcgJiZcbiAgICAgICAgICAgIHVuaXQuaXNVcGdyYWRhYmxlKHRoaXMuY3VycmVudFBsYXllcikgJiYgaXNVcGdyYWRlQ29uZmlybWF0aW9uKHVuaXQucG9zLCBwb3MpKSB7XG4gICAgICAgICAgICAgICAgdW5pdC51cGdyYWRlcygpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uUG9pbnRzIC09IDI7XG4gICAgICAgICAgICAgICAgdW5pdFVwZ3JhZGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5pdFVwZ3JhZGVkO1xuICAgIH1cblxuICAgIHVuaXRTZWxlY3RlZCh1bml0KSB7XG4gICAgICAgIGxldCB1bml0U2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHVuaXQgJiYgdW5pdC5wYXJlbnRUeXBlKCkgPT09ICdVbml0JyAmJiB1bml0LnRlYW0gPT09IHRoaXMuY3VycmVudFBsYXllci50ZWFtKSB7XG4gICAgICAgICAgICB1bml0LnJlc2V0QWN0aW9ucygpOyAvL3Jlc2V0IG5ld2x5IHNlbGVjdGVkIHVuaXQncyBhY3Rpb24gc3F1YXJlc1xuICAgICAgICAgICAgaWYgKCF1bml0LmJvYXJkKSB7IHVuaXQuYm9hcmQgPSB0aGlzLmJvYXJkOyB9XG4gICAgICAgICAgICBpZiAoIXVuaXQudmlldykgeyB1bml0LnZpZXcgPSB0aGlzLnZpZXc7IH1cblxuICAgICAgICAgICAgdGhpcy51bml0Q2FsbERyYXdTZWxlY3RlZCh1bml0LCB0aGlzLnZpZXcpO1xuICAgICAgICAgICAgdW5pdFNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5pdFNlbGVjdGVkO1xuICAgIH1cblxuICAgIHVuaXRDYWxsRHJhd1NlbGVjdGVkKHVuaXQsIHZpZXcpIHtcbiAgICAgICAgaWYgKCF1bml0Lmhhc01vdmVkKSB7XG4gICAgICAgICAgICB1bml0LmdldE1vdmVzKCkuZm9yRWFjaCgocG9zKSA9PiB7XG4gICAgICAgICAgICAgICAgdmlldy5kcmF3TW92ZUhpZ2hsaWdodHMocG9zKTtcbiAgICAgICAgICAgICAgICB2aWV3LmRyYXdHcmlkRWxlbXMocG9zKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF1bml0Lmhhc0F0dGFja2VkICYmICF1bml0Lmhhc1VwZ3JhZGVkKSB7XG4gICAgICAgICAgICB1bml0LmdldEF0dGFja3MoKS5mb3JFYWNoKChwb3MpID0+IHtcbiAgICAgICAgICAgICAgICB2aWV3LmRyYXdBdHRhY2tIaWdobGlnaHRzKHBvcyk7XG4gICAgICAgICAgICAgICAgdmlldy5kcmF3R3JpZEVsZW1zKHBvcyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHZpZXcuZHJhd091dGxpbmUodW5pdC5wb3MpO1xuICAgIH1cblxuICAgIGJhcnJhY2tTZWxlY3RlZChiYXJyYWNrKSB7XG4gICAgICAgIHJldHVybiBiYXJyYWNrICYmIGJhcnJhY2sudHlwZSgpID09PSAnQmFycmFjaycgJiYgYmFycmFjay50ZWFtID09PSB0aGlzLmN1cnJlbnRQbGF5ZXIudGVhbTtcbiAgICB9XG5cbiAgICB1bml0Qm91Z2h0KHBvcywgbWVudSwgc3F1YXJlKSB7XG4gICAgICAgIGxldCB1bml0Qm91Z2h0ID0gZmFsc2U7XG4gICAgICAgIGxldCBuZXdQb3MgPSB0aGlzLmFkanVzdE1lbnVQb3NpdGlvbihzcXVhcmUuZmlyc3QoKSwgcG9zKTtcbiAgICAgICAgbGV0IHVuaXQ7XG4gICAgICAgIGlmICh1bml0ID0gbWVudS5maW5kKGUgPT4gZS5wb3MueCA9PT0gbmV3UG9zLnggJiYgZS5wb3MueSA9PT0gbmV3UG9zLnkpKSB7XG4gICAgICAgICAgICB1bml0LnBvcyA9IHNxdWFyZS5maXJzdCgpLnBvcztcbiAgICAgICAgICAgIHNxdWFyZS5wdXNoKHVuaXQpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGxheWVyLnVuaXRzLnB1c2godW5pdCk7XG4gICAgICAgICAgICB0aGlzLmFjdGlvblBvaW50cyAtPSAyO1xuICAgICAgICAgICAgdW5pdEJvdWdodCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5pdEJvdWdodDtcbiAgICB9XG5cbiAgICBhZGp1c3RNZW51UG9zaXRpb24oYmFycmFjaywgcG9zKSB7XG4gICAgICAgIGxldCB4RGlmZmVyZW5jZSA9IGJhcnJhY2sucG9zLnggPT09IDAgPyAtMC4yNSA6IDAuMjU7XG4gICAgICAgIGxldCB5RGlmZmVyZW5jZSA9IGJhcnJhY2sucG9zLnkgPT09IDAgPyAtMSA6IDAuNTtcbiAgICAgICAgbGV0IHggPSBNYXRoLmZsb29yKChwb3MueCArIHhEaWZmZXJlbmNlKSk7XG4gICAgICAgIGxldCB5ID0gTWF0aC5mbG9vcigocG9zLnkgKyB5RGlmZmVyZW5jZSkpO1xuICAgICAgICBsZXQgbmV3UG9zID0ge307XG4gICAgICAgIG5ld1Bvcy54ID0gYmFycmFjay5wb3MueCA9PT0gMCA/IHggKyAwLjI1IDogeCAtIDAuMjU7XG4gICAgICAgIG5ld1Bvcy55ID0gYmFycmFjay5wb3MueSA9PT0gMCA/IHkgKyAxIDogeSAtIDAuNTtcbiAgICAgICAgcmV0dXJuIG5ld1BvcztcbiAgICB9XG5cbiAgICBhY3Rpb25UYWtlbihwb3MsIHNxdWFyZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb3ZlVW5pdChwb3MsIHNxdWFyZSkgfHwgdGhpcy5hdHRhY2tVbml0KHBvcywgc3F1YXJlKTtcbiAgICB9XG5cbiAgICBtb3ZlVW5pdChwb3MsIHNxdWFyZSkge1xuICAgICAgICBsZXQgdW5pdE1vdmVkID0gZmFsc2U7XG4gICAgICAgIGxldCB1bml0ID0gc3F1YXJlLmxhc3QoKTtcblxuICAgICAgICBpZiAodW5pdC5tb3ZlcyAmJiB1bml0Lm1vdmVzLmZpbmQoZSA9PiBlLnggPT09IHBvcy54ICYmIGUueSA9PT0gcG9zLnkpKSB7XG4gICAgICAgICAgICB1bml0LnBvcyA9IHBvczsgLy9yZXNldCB1bml0IHBvc2l0aW9uO1xuICAgICAgICAgICAgaWYgKHVuaXQub25Ib21lVHVyZigpKSB7XG4gICAgICAgICAgICAgICAgdW5pdC5kb3duZ3JhZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNxdWFyZS5wb3AoKTtcbiAgICAgICAgICAgIGxldCB0cmVhc3VyZUlkeCA9IHRoaXMuZ2V0VHJlYXN1cmVJZHgoc3F1YXJlKTtcbiAgICAgICAgICAgIGlmICh0cmVhc3VyZUlkeCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNxdWFyZVt0cmVhc3VyZUlkeF0ucG9zID0gcG9zO1xuICAgICAgICAgICAgICAgIHRoaXMuYm9hcmQuZ3JpZC5nZXQocG9zKS5wdXNoKHNxdWFyZVt0cmVhc3VyZUlkeF0pO1xuICAgICAgICAgICAgICAgIHNxdWFyZS5zcGxpY2UodHJlYXN1cmVJZHgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ib2FyZC5ncmlkLmdldChwb3MpLnB1c2godW5pdCk7XG5cbiAgICAgICAgICAgIHRoaXMuYWN0aW9uUG9pbnRzLS07XG4gICAgICAgICAgICB1bml0Lmhhc01vdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHVuaXRNb3ZlZCA9IHRydWU7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnBsYXllcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuaXRNb3ZlZDtcbiAgICB9XG5cbiAgICBnZXRUcmVhc3VyZUlkeChzcXVhcmUpIHtcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPHNxdWFyZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHNxdWFyZVtpXS50ZWFtICE9PSB0aGlzLmN1cnJlbnRQbGF5ZXIudGVhbVxuICAgICAgICAgICAgICAgICYmIHNxdWFyZVtpXS50eXBlKCkgPT09ICdUcmVhc3VyZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGF0dGFja1VuaXQocG9zLCBzcXVhcmUpIHtcbiAgICAgICAgbGV0IHVuaXRBdHRhY2tlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgdW5pdCA9IHNxdWFyZS5sYXN0KCk7XG4gICAgICAgIGlmICh1bml0LmF0dGFja3MgJiYgdW5pdC5hdHRhY2tzLmZpbmQoZSA9PiBlLnggPT09IHBvcy54ICYmIGUueSA9PT0gcG9zLnkpKSB7XG4gICAgICAgICAgICBsZXQgYXR0YWNrZWRTcXVhcmUgPSB0aGlzLmJvYXJkLmdyaWQuZ2V0KHBvcyk7XG4gICAgICAgICAgICBsZXQgYXR0YWNrZWRVbml0ID0gYXR0YWNrZWRTcXVhcmUubGFzdCgpO1xuICAgICAgICAgICAgYXR0YWNrZWRVbml0LmRlZmVuc2UgLT0gdW5pdC5hdHRhY2s7XG4gICAgICAgICAgICBpZiAoYXR0YWNrZWRVbml0LmRlZmVuc2UgPCAxKSB7XG4gICAgICAgICAgICAgICAgYXR0YWNrZWRTcXVhcmUucG9wKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGxheWVyLnRlYW0gPT09IHRoaXMucGxheWVyLnRlYW0gPyB0aGlzLmVuZW15LnJlbW92ZVVuaXQoYXR0YWNrZWRVbml0KSA6IHRoaXMucGxheWVyLnJlbW92ZVVuaXQoYXR0YWNrZWRVbml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWN0aW9uUG9pbnRzLS07XG4gICAgICAgICAgICB1bml0Lmhhc0F0dGFja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHVuaXRBdHRhY2tlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuaXRBdHRhY2tlZDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdhbWU7IiwiaW1wb3J0IFZpZXcgZnJvbSAnLi92aWV3LmpzJztcbmltcG9ydCBHYW1lIGZyb20gJy4vZ2FtZS5qcyc7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IHtcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHJlYXN1cmUtZ2FtZScpO1xuICAgIGNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5idXR0b25zJyk7XG5cbiAgICBjb25zdCBnYW1lID0gbmV3IEdhbWUoKTtcbiAgICBjb25zdCB2aWV3ID0gbmV3IFZpZXcoZ2FtZSwgY3R4LCBlbCk7XG4gICAgZ2FtZS52aWV3ID0gdmlldztcblxuICAgIHZpZXcuYmluZEV2ZW50cyhjdHgpO1xufSk7Il0sIm5hbWVzIjpbIlBpZWNlIiwiY29uc3RydWN0b3IiLCJ0ZWFtIiwicG9zIiwiaW1hZ2UiLCJJbWFnZSIsInBhcmVudFR5cGUiLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsIm5hbWUiLCJ0eXBlIiwiQmFycmFjayIsInNyYyIsIkJhc2UiLCJCb2FyZCIsIlRyZWFzdXJlIiwiUExBWUVSX1RFQU0iLCJwb3MxIiwieSIsIkdSSURfSEVJR0hUIiwieCIsIk1hdGgiLCJmbG9vciIsIkdSSURfV0lEVEgiLCJwb3MyIiwidHJlYXN1cmUiLCJwbGF5ZXIiLCJlbmVteSIsIkVORU1ZX1RFQU0iLCJiYXNlIiwiYmFycmFja3MiLCJncmlkIiwibWFrZUdyaWQiLCJpIiwicHVzaCIsImoiLCJiYXJyYWNrIiwiZ2V0IiwiaXNXb24iLCJlcXVhbHMiLCJpc09uQm9hcmQiLCJpc0J1dHRvbiIsIndpbGxQbGF5QWdhaW4iLCJpc1VwZ3JhZGVCdXR0b24iLCJzcXVhcmVQb3MiLCJjbGlja1BvcyIsImlzVXBncmFkZUNvbmZpcm1hdGlvbiIsIkFycmF5IiwicHJvdG90eXBlIiwiY29udGFpbnNUeXBlIiwic3F1YXJlIiwic29tZSIsImxhc3QiLCJsZW5ndGgiLCJmaXJzdCIsImxlZnQiLCJyaWdodCIsInVwIiwiZG93biIsIlVuaXQiLCJhdHRhY2siLCJkZWZlbnNlIiwicG9pbnRTdGFuZGFyZCIsInVwZ3JhZGUiLCJsZXZlbCIsImF0dGFja0Rpc3QiLCJtb3ZlcyIsImF0dGFja3MiLCJoYXNNb3ZlZCIsImhhc0F0dGFja2VkIiwiaGFzVXBncmFkZWQiLCJib2FyZCIsInZpZXciLCJyZXNldEFjdGlvbnMiLCJ1cGdyYWRlcyIsImRvd25ncmFkZSIsIm1pbiIsImdldE1vdmVzIiwiZ2V0TW92ZXNTZXRCRlMiLCJkZWxldGUiLCJKU09OIiwic3RyaW5naWZ5IiwibWFwIiwiZWxlbSIsInBhcnNlIiwiZ2V0TW92ZXNTZXRERlMiLCJ2YWxpZFZpc2l0ZWQiLCJTZXQiLCJtYXhEaXN0IiwibmV3UG9zIiwiaGFzVW5pdCIsImhhcyIsImFkZCIsImdldE1vdmVzU2V0IiwicSIsInNoaWZ0IiwiYWRkVG9RdWV1ZSIsImlzV2l0aGluRGlzdCIsIndpdGhpbkRpc3QiLCJhYnMiLCJnZXRBdHRhY2tzIiwiZWxlbVR5cGUiLCJpc1VwZ3JhZGFibGUiLCJjdXJyZW50UGxheWVyIiwib25Ib21lVHVyZiIsIkFyY2hlciIsIkRlZmVuZGVyIiwiSW5mYW50cnkiLCJWaWV3IiwiZ2FtZSIsImN0eCIsImVsIiwicmF0aW8iLCJpbWFnZXMiLCJyZW5kZXJJbWciLCJkcmF3Qm9hcmQiLCJkcmF3TWVudSIsIm5vTW9yZU1vdmVzIiwiZHJhd05vTW9yZU1vdmVzTW9kdWxlIiwicmVzZXRWaWV3IiwiY2xlYXJCb2FyZCIsImNsZWFyUmVjdCIsImNhbnZhcyIsIndpZHRoIiwiaGVpZ2h0IiwidW5pdFBvcyIsImNsaWNrZWRQb3MiLCJpbnZpc2lmeUJ1dHRvbnMiLCJiYWNrZ3JvdW5kIiwib25sb2FkIiwiZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImZvckVhY2giLCJzdHlsZSIsInZpc2liaWxpdHkiLCJkcmF3Qm9hcmRXaXRob3V0T25sb2FkIiwiZHJhd0dyaWRTcXVhcmUiLCJkcmF3R3JpZEVsZW1zIiwiZHJhd01pZGxpbmUiLCJkcmF3RW5kVHVybkJ1dHRvbiIsImZvbnQiLCJmaWxsU3R5bGUiLCJzdHIiLCJhY3Rpb25Qb2ludHMiLCJ0b1N0cmluZyIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwic3Ryb2tlVGV4dCIsIlNRVUFSRV9ESU0iLCJmaWxsVGV4dCIsInVuaXRzIiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlIiwiZmlsbFJlY3QiLCJzdHJva2VSZWN0IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImJvdHRvbSIsImNlbGwiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXIiLCJsaXN0U3R5bGUiLCJjdXJzb3IiLCJpbm5lckhUTUwiLCJjb2xvciIsInRleHRBbGlnbiIsImxpbmVIZWlnaHQiLCJhcHBlbmRDaGlsZCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJkcmF3TWVudU9wdGlvbnMiLCJydWxlQm94IiwiZHJhd1J1bGVzIiwiYWJvdXRCb3giLCJkcmF3QWJvdXQiLCJ3aW5kb3dSZXNpemUiLCJ3aW5kb3ciLCJvbnJlc2l6ZSIsIm1lbnUiLCJydWxlcyIsImRyYXdCdXR0b24iLCJhYm91dCIsImlubmVySGVpZ2h0IiwiaW5uZXJXaWR0aCIsInRpdGxlIiwiZHJhd01lbnVEaXNwbGF5Qm94IiwiZHJhd01lbnVJbm5lckRpc3BsYXlCb3giLCJib3giLCJ0b3AiLCJ0cmFuc2Zvcm0iLCJtYXJnaW4iLCJwb3NpdGlvbiIsInVwZGF0ZU5vTW9yZU1vdmVzU3RyIiwibW9kdWxlIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJidXR0b24iLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Ub3AiLCJkcmF3V2lubmluZ1NjcmVlbiIsImltZyIsImRyYXdJbWFnZSIsImRyYXdQbGF5QWdhaW5CdXR0b24iLCJkcmF3VXBncmFkZUNvbmZpcm1hdGlvbiIsImRyYXdCYXJyYWNrU2VsZWN0aW9uIiwiYWRqdXN0TWVudVBvc2l0aW9uIiwidHJvb3BTZWxlY3Rpb24iLCJpbmYiLCJhcmNoIiwiZGVmIiwidW5pdCIsImRyYXciLCJkcmF3T3V0bGluZSIsImRyYXdNb3ZlSGlnaGxpZ2h0cyIsImRyYXdBdHRhY2tIaWdobGlnaHRzIiwiZ3JpZFNxdWFyZSIsIm91dGxpbmVDb2xvciIsImZpbGxDb2xvciIsImdsb2JhbEFscGhhIiwicGl4ZWxXaWR0aCIsInBpeGVsSGVpZ2h0IiwiYmluZEV2ZW50cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVCdXR0b24iLCJiaW5kIiwiaGFuZGxlQWJvdXQiLCJoYW5kbGVSdWxlcyIsImhhbmRsZUNsaWNrIiwiaGFuZGxlQmFja2dyb3VuZCIsImJpbmRNb3Zlc0J1dHRvbiIsIm1vdmVzQmFja2dyb3VuZCIsImhhbmRsZU1vdmVzQmFja2dyb3VuZCIsIm1vdmVzQnV0dG9uIiwiaGFuZGxlTW92ZXNCdXR0b24iLCJldmVudCIsImUxIiwiZTIiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInhFeGFjdCIsInlFeGFjdCIsInBvc0V4YWN0IiwicmVzZXRHYW1lIiwiZXhhY3RQb3MiLCJjYWxsU3RhdGVNYWNoaW5lIiwic3dpdGNoUGxheWVycyIsImNvbnRhaW5zIiwidGFyZ2V0Iiwic3RhdGUiLCJkcmF3VXBncmFkZUJ1dHRvbiIsImFyYyIsIlBJIiwiZmlsbCIsImRyYXdTdGF0cyIsIlBsYXllciIsInJlbW92ZVVuaXQiLCJmb3VuZCIsInNwbGljZSIsIkh1bWFuUGxheWVyIiwiTUFYX0FQIiwiTUFYX1VOSVRTIiwiR2FtZSIsInNldEdhbWUiLCJjb25zb2xlIiwibG9nIiwic2V0Q29ubmVjdGlvbiIsInJlcGx5IiwiY29ubiIsIlNvY2tldCIsImNvbCIsInJvdyIsInN0YXRlTWFjaGluZSIsImNob29zZU1vdmUiLCJyZWRpcmVjdFN0YXRlIiwiYWN0aW9uVGFrZW4iLCJzZWxlY3RlZFNxdWFyZSIsIm5vTW9yZU1vdmVzRGlzcGxheSIsInVuaXRCb3VnaHQiLCJ1bml0VXBncmFkZWQiLCJ1bml0VXBncmFkZWFibGUiLCJ1bml0U2VsZWN0ZWQiLCJiYXJyYWNrU2VsZWN0ZWQiLCJtb3Zlc0F2YWlsYWJsZSIsImJvb2wiLCJiYXJyYWNrc0VtcHR5IiwicmVzIiwiYiIsImJhcnJhY2tTcXVhcmUiLCJ1bml0Q2FsbERyYXdTZWxlY3RlZCIsImZpbmQiLCJ4RGlmZmVyZW5jZSIsInlEaWZmZXJlbmNlIiwibW92ZVVuaXQiLCJhdHRhY2tVbml0IiwidW5pdE1vdmVkIiwicG9wIiwidHJlYXN1cmVJZHgiLCJnZXRUcmVhc3VyZUlkeCIsInVuaXRBdHRhY2tlZCIsImF0dGFja2VkU3F1YXJlIiwiYXR0YWNrZWRVbml0IiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRDb250ZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///627\n')},37:function(){eval("// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcuanMiLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXByb2plY3QvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///37\n")}};__webpack_modules__[627]();var __webpack_exports__={};__webpack_modules__[37]()})();